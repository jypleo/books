import{_ as e,c as o,o as d,a2 as c}from"./chunks/framework.D8Prfz4N.js";const b=JSON.parse('{"title":"4.基础篇：盒模型","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/4.基础篇：盒模型.md","filePath":"pamphlet/玩转css艺术之美/4.基础篇：盒模型.md"}'),a={name:"pamphlet/玩转css艺术之美/4.基础篇：盒模型.md"},i=c(`<h1 id="_4-基础篇-盒模型" tabindex="-1">4.基础篇：盒模型 <a class="header-anchor" href="#_4-基础篇-盒模型" aria-label="Permalink to &quot;4.基础篇：盒模型&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p><strong>盒模型</strong>是CSS中最重要最核心的概念，整个概念基本上环绕在CSS整个体系里，所有的样式和排版都基于该概念进行着。理解这个重要的概念才能更好地<code>排版页面</code>和<code>布局页面</code>，后面遇到的排版和布局困难也能快速定位出问题的所在。</p><p>不要觉得简单而去忽略它们，往往越简单的东西蕴含的威力越大。换成人生道理就是说，不要小看一个人，TA虽然穿着短裤拖鞋，背后可能是拥有10栋出租楼的包租公或包租婆。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2985494/1607320084833-af6526f2-12bc-443c-b460-3084d75ddea2.jpeg" alt="img"></p><h3 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h3><p><strong>盒模型</strong>又名<strong>框模型</strong>，是一种网页设计思维模型，它把文档节点看成一个盒子。</p><p>在HTML文档解析过程中，每个节点都会被描述为一个盒模型，然后一个盒子套进另一个盒子中，再依据各个节点对应的CSS规则，最后渲染成一个井井有条的页面。一个完整的页面就像以下的<code>惊喜爆炸礼盒</code>，层层嵌套，直到最后一层出现惊喜为止。有女友的，赶紧买一个试试！</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2985494/1607320085398-403c8b08-cd63-4062-bfb9-1f7753b9e788.jpeg" alt="img"></p><h5 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h5><p><strong>盒模型</strong>由以下属性组成，由外到内用公式表示就是：<code>box = margin + border + padding + content</code>。除了<code>content</code>(不是属性，作为盒模型扩展理解使用)，其余属性都包含<code>left</code>、<code>right</code>、<code>top</code>和<code>bottom</code>等扩展属性。</p><ul><li><p><strong>margin</strong>：边距，外部透明区域，负责隔离相邻盒子</p></li><li><p><strong>border</strong>：边框，内部着色区域，负责隔离边距和填充，包含<code>width</code>、<code>style</code>、<code>color</code>三个扩展属性</p></li><li><p><strong>padding</strong>：填充，内部着色区域，负责扩展盒子内部尺寸</p></li><li><p><strong>content</strong>：内容，以<code>文本</code>或<code>节点</code>存在的占用位置</p></li></ul><p>重点提醒，<code>padding</code>着色随<code>background-color</code>而变，可用<code>background-clip</code>隔离，该情况在第10章<strong>背景与遮罩</strong>中会详细讲解。</p><p>理解</p><p>节点由外到内一层一层深入，通过上述公式组成了一个完整的<strong>盒模型</strong>。所以在理解盒模型时记住这4个属性及其从外到内的顺序即可。换另一种方式理解，可把它看做你的快递包裹。两个快递包裹间的距离就是<code>margin</code>，快递包裹的纸皮就是<code>border</code>，打开快递包裹，填充物料就是<code>padding</code>，把填充物料打开看到了你的物品，那就是<code>content</code>。这样理解是不是特别容易呢？</p><h5 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h5><p>由于历史原因，盒模型分化成两种类型，分别是<strong>标准盒模型</strong>和<strong>怪异盒模型</strong>。具体原因在第2章<strong>浏览器</strong>有提及。</p><p>所以CSS3里提供一个属性用于声明盒模型的类型，它就是<code>box-sizing</code>。</p><ul><li><strong>content-box</strong>：标准盒模型(<code>默认</code>)</li><li><strong>border-box</strong>：怪异盒模型</li></ul><p>它不具备继承性，若全局统一盒模型，那只能使用<code>*</code>声明<code>box-sizing</code>了。建议使用<a href="https://github.com/JowayYoung/idea-css/blob/master/css/reset.css#L123" target="_blank" rel="noreferrer">reset.css</a>里的方式声明。</p><p>标准盒模型</p><p><strong>标准盒模型</strong>是W3C规范的标准，由<code>margin + border + padding + content</code>组成。与上述提到的公式一模一样，节点的<code>width/height</code>只包含<code>content</code>，不包含<code>padding</code>和<code>border</code>。</p><p>节点的尺寸计算公式如下。</p><ul><li><strong>横向</strong>：<code>margin-[left/right]</code> + <code>border-[left/right]</code>+ <code>padding-[left/right]</code> + <code>width</code></li><li><strong>纵向</strong>：<code>margin-[top/bottom]</code> + <code>border-[top/bottom]</code>+ <code>padding-[top/bottom]</code> + <code>height</code></li></ul><p>节点的宽高计算公式如下。</p><ul><li><strong>横向</strong>：<code>width = width</code></li><li><strong>纵向</strong>：<code>height = height</code></li></ul><p>怪异盒模型</p><p><strong>怪异盒模型</strong>又名<code>IE盒子模型</code>，是<code>IExplore</code>制定的标准，由<code>margin + content</code>组成。与上述提到的公式一不同，节点的<code>width/height</code>包含<code>border</code>、<code>padding</code>和<code>content</code>。</p><p>节点的尺寸计算公式如下。</p><ul><li><strong>横向</strong>：<code>margin-[left/right]</code> + <code>width</code>(包含<code>border-[left/right]</code>和<code>padding-[left/right]</code>)</li><li><strong>纵向</strong>：<code>margin-[top/bottom]</code> + <code>height</code>(包含<code>border-[top/bottom]</code>和<code>padding-[top/bottom]</code>)</li></ul><p>节点的宽高计算公式如下。</p><ul><li><strong>横向</strong>：<code>width = border + padding + width</code></li><li><strong>纵向</strong>：<code>height = border + padding + height</code></li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在IExplore中，若HTML文档缺失&lt;!doctype html&gt;声明则会触发怪异盒模型</span></span></code></pre></div><p>两者区别</p><p>通过代码演示可能会更清晰，<code>width</code>和<code>height</code>的范围也一目了然，其实两者区别在于<code>width</code>和<code>height</code>包不包含<code>border</code>和<code>padding</code>。把上述公式记清楚，两者区别就迎刃而解了。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.content-box {</span></span>
<span class="line"><span>    box-sizing: content-box;</span></span>
<span class="line"><span>    margin: 100px;</span></span>
<span class="line"><span>    padding: 50px;</span></span>
<span class="line"><span>    border: 10px solid #66f;</span></span>
<span class="line"><span>    width: 80px;</span></span>
<span class="line"><span>    height: 80px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.border-box {</span></span>
<span class="line"><span>    box-sizing: border-box;</span></span>
<span class="line"><span>    margin: 100px;</span></span>
<span class="line"><span>    padding: 50px;</span></span>
<span class="line"><span>    border: 10px solid #66f;</span></span>
<span class="line"><span>    width: 80px;</span></span>
<span class="line"><span>    height: 80px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320084950-bc55c39e-db88-4271-a282-5f20e3cc3d88.png" alt="img"></p><h3 id="视觉格式化模型" tabindex="-1">视觉格式化模型 <a class="header-anchor" href="#视觉格式化模型" aria-label="Permalink to &quot;视觉格式化模型&quot;">​</a></h3><p>上述<strong>盒模型</strong>都是平时了解到的概念，若使用<code>display</code>对这个简单盒模型稍微加工则会进化到<strong>视觉格式化模型</strong>。</p><p><strong>视觉格式化模型</strong>指在视觉媒体上处理和显示文档而使用的计算规则。它是一种CSS机制，由大量CSS规范组成，规定了节点在页面中的排版。</p><h5 id="块级元素" tabindex="-1">块级元素 <a class="header-anchor" href="#块级元素" aria-label="Permalink to &quot;块级元素&quot;">​</a></h5><p>当节点的<code>display</code>声明为<code>block</code>、<code>list-item</code>、<code>table</code>、<code>flex</code>或<code>grid</code>时，该节点被标记为<strong>块级元素</strong>。块级元素默认宽度为<code>100%</code>，在垂直方向上按顺序放置，同时参与<strong>块格式化上下文</strong>。</p><p>每个<code>块级元素</code>都至少生成一个块级盒，或一个块容器盒，<code>块级盒</code>描述它与兄弟节点间的表现方式，<code>块容器盒</code>描述它与子节点间的表现方式。</p><p>一个块容器盒只包含其他块级盒，或生成一个<code>行内格式化上下文</code>只包含行内盒。或许一段代码中某一个块容器盒同时包含块级盒和行内盒的情况，但实质上在这种情况下会产生一种新的匿名块盒解决该问题。</p><h5 id="行内元素" tabindex="-1">行内元素 <a class="header-anchor" href="#行内元素" aria-label="Permalink to &quot;行内元素&quot;">​</a></h5><p>当节点的<code>display</code>声明为<code>inline</code>、<code>inline-block</code>、<code>inline-table</code>、<code>inline-flex</code>或<code>inline-grid</code>时，该节点被标记为<strong>行内元素</strong>。行内元素默认宽度为<code>auto</code>，在水平方向上按顺序放置，同时参与<strong>行内格式化上下文</strong>。</p><p>当行内级盒参与<code>行内格式化上下文</code>后就会变成行内盒。另外还有一个叫做匿名行内盒的概念，匿名行内盒与匿名块盒的原理类似，都是浏览器自动生成的补充性盒，简单来一段代码理解理解匿名行内盒是如何产生的。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;p&gt;我是&lt;span&gt;JowayYoung&lt;/span&gt;，我的公众号是&lt;span&gt;IQ前端&lt;/span&gt;&lt;/p&gt;</span></span></code></pre></div><p>此时<code>我是</code>和<code>，我的公众号是</code>就会生成了一个匿名行内盒，然后与两个<code>&lt;span&gt;&lt;/span&gt;</code>一起处于<code>&lt;p&gt;</code>参与<code>行内格式化上下文</code>后的行内盒中，并保持水平排列。</p><p>两者区别</p><p>上述概念可能有点绕口，若从两者的区别理解可能更容易消化。</p><ul><li><p>互相转换</p></li><li><ul><li>块级元素转换行内元素：<code>display:inline</code></li><li>行内元素转换块级元素：<code>display:block</code></li></ul></li><li><p>占位表现</p></li><li><ul><li>块级元素默认独占一行，默认宽度为父元素的100%，可声明边距、填充、宽高</li><li>行内元素默认不独占一行(一行可多个)，默认宽度随内容自动撑开，可声明水平边距和填充，不可声明垂直边距和宽高</li></ul></li><li><p>包含关系</p></li><li><ul><li>块级元素可包含块级元素和行内元素</li><li>行内元素可包含行内元素，不能包含块级元素</li></ul></li></ul><h3 id="格式化上下文" tabindex="-1">格式化上下文 <a class="header-anchor" href="#格式化上下文" aria-label="Permalink to &quot;格式化上下文&quot;">​</a></h3><p>概念内容多次提到了<code>格式化上下文</code>的字眼，那么<code>格式化上下文</code>又是何方神圣呢？了解<code>格式化上下文</code>，或许就能了解上述内容了。</p><p><strong>格式化上下文</strong>指决定渲染区域里节点的排版、关系和相互作用的渲染规则。简单来说就是页面中有一个<code>&lt;ul&gt;</code>及其多个子节点<code>&lt;li&gt;</code>，<code>格式上下文</code>决定这些<code>&lt;li&gt;</code>如何排版，<code>&lt;li&gt;</code>与<code>&lt;li&gt;</code>间处于什么关系，以及<code>&lt;li&gt;</code>与<code>&lt;li&gt;</code>间如何互相影响。</p><p><code>格式上下文</code>由以下几部分组成，其中最重要的是<strong>块格式化上下文</strong>和<strong>行内格式化上下文</strong>，也频繁出现在大厂面试题中，了解其原理与特性，相信面试时被问到也无什么难度了。</p><table tabindex="0"><thead><tr><th>上下文</th><th>缩写</th><th>版本</th><th>声明</th></tr></thead><tbody><tr><td><strong>块格式化上下文</strong></td><td><code>BFC</code></td><td>2</td><td>块级盒子容器</td></tr><tr><td><strong>行内格式化上下文</strong></td><td><code>IFC</code></td><td>2</td><td>行内盒子容器</td></tr><tr><td><strong>弹性格式化上下文</strong></td><td><code>FFC</code></td><td>3</td><td>弹性盒子容器</td></tr><tr><td><strong>格栅格式化上下文</strong></td><td><code>GFC</code></td><td>3</td><td>格栅盒子容器</td></tr></tbody></table><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>读中文读起来有点拗口，干脆读英文缩写好了，有兴趣的同学自行查阅MDN了解其英文单词</span></span></code></pre></div><p>为了防止有些同学对<code>格式化上下文</code>的概念越看越混乱，本章不会过多解说<code>格式化上下文</code>，但是笔者会抽丝剥茧把<code>格式化上下文</code>的概念清晰化，更多的解读可自行查找相关资料深入学习。有时学习点到即止也未尝不是一件好事，过多解读反而达不到想要的效果。</p><h5 id="块格式化上下文" tabindex="-1">块格式化上下文 <a class="header-anchor" href="#块格式化上下文" aria-label="Permalink to &quot;块格式化上下文&quot;">​</a></h5><p>BFC是页面上一个独立且隔离的渲染区域，容器里的子节点不会在布局上影响到外面的节点，反之亦然。</p><p>以下是笔者意译W3C文档和平时一些开发经验的总结所得，也结合一些自身对BFC的理解。</p><p>规则</p><ul><li><p>子节点在垂直方向上按顺序放置</p></li><li><p>子节点的垂直方向距离由<code>margin</code>决定，相邻节点的<code>margin</code>会发生重叠，以最大<code>margin</code>为合并值</p></li><li><p>每个节点的<code>margin-left/right</code>与父节点的<code>左边/右边</code>相接触，即使处于浮动也如此，除非自行形成BFC</p></li><li><p>BFC区域不会与同级浮动区域重叠</p></li><li><p>BFC是一个隔离且不受外界影响的独立容器</p></li><li><p>计算BFC高度时其浮动子节点也参与计算</p></li></ul><p>成因</p><ul><li><p>根节点：<code>html</code></p></li><li><p>非溢出可见节点：<code>overflow:!visible</code></p></li><li><p>浮动节点：<code>float:left/right</code></p></li><li><p>绝对定位节点：<code>position:absolute/fixed</code></p></li><li><p>被定义成块级的非块级节点：<code>display:inline-block/table-cell/table-caption/flex/inline-flex</code></p></li><li><p>父节点与正常文档流的子节点(非浮动)自动形成BFC</p></li></ul><p>场景</p><ul><li><p>清除浮动</p></li><li><p>已知宽度水平居中</p></li><li><p>防止浮动节点被覆盖</p></li><li><p>防止垂直margin合并</p></li></ul><p>面试中常问到的<code>margin塌陷</code>问题，可用BFC的概念回答了。所谓的塌陷其实是两个BFC的相邻盒或父子盒相互作用时产生的效果，两个盒子会取相邻边最大<code>margin</code>作为相邻边的共用<code>margin</code>。</p><p>在此笔者补充一些<code>margin折叠</code>的计算问题，相信在笔试上会遇到。</p><ul><li><p>两个盒子相邻边的<code>margin</code>都为正值，取最大值</p></li><li><p>两个盒子相邻边的<code>margin</code>都为负值，取最小值，两者会互相重合</p></li><li><p>两个盒子相邻边的<code>margin</code>一正一负，取两者相加值，若结果为负，两者会互相重合</p></li></ul><h5 id="行内格式化上下文" tabindex="-1">行内格式化上下文 <a class="header-anchor" href="#行内格式化上下文" aria-label="Permalink to &quot;行内格式化上下文&quot;">​</a></h5><p>IFC的宽高由行内子元素中最大的实际高度确定，不受垂直方向的<code>margin</code>和<code>padding</code>影响。另外，IFC中不能存在块元素，若插入块元素则会产生对应个数的匿名块并互相隔离，即产生对应个数的IFC，每个IFC对外表现为块级元素，并垂直排列。</p><p>以下是笔者意译W3C文档和平时一些开发经验的总结所得，也结合一些自身对IFC的理解。</p><p>规则</p><ul><li><p>节点在水平方向上按顺序放置</p></li><li><p>节点无法指定宽高，其<code>margin</code>和<code>padding</code>在水平方向有效在垂直方向无效</p></li><li><p>节点在垂直方向上以不同形式对齐</p></li><li><p>节点的宽度由包含块和浮动决定，高度由行高决定</p></li></ul><p>成因</p><ul><li><p>行内元素：<code>display:inline[-x]</code></p></li><li><p>声明<code>line-height</code></p></li><li><p>声明<code>vertical-align</code></p></li><li><p>声明<code>font-size</code></p></li></ul><h5 id="弹性格式化上下文" tabindex="-1">弹性格式化上下文 <a class="header-anchor" href="#弹性格式化上下文" aria-label="Permalink to &quot;弹性格式化上下文&quot;">​</a></h5><p>声明<code>display</code>为<code>flex</code>或<code>inline-flex</code>时，节点会生成一个<code>FFC</code>的独立容器，主要用于<code>响应式布局</code>。</p><h5 id="格栅格式化上下文" tabindex="-1">格栅格式化上下文 <a class="header-anchor" href="#格栅格式化上下文" aria-label="Permalink to &quot;格栅格式化上下文&quot;">​</a></h5><p>声明<code>display</code>为<code>grid</code>或<code>inline-grid</code>时，节点会生成一个<code>GFC</code>的独立容器，主要用于<code>响应式布局</code>。</p><p>细心的同学会发现，<code>GFC</code>有点像<code>&lt;table&gt;</code>，同为二维表格，但是<code>GFC</code>会有更丰富的属性控制行列、对齐以及更为精细的渲染语义和控制。不过由于兼容性不是特别好，所以笔者在本小册也不会讲解基于<code>GFC</code>的<strong>格栅布局</strong>。</p><h3 id="文档流" tabindex="-1">文档流 <a class="header-anchor" href="#文档流" aria-label="Permalink to &quot;文档流&quot;">​</a></h3><p><strong>文档流</strong>指节点在排版布局过程中默认使用从左往右从上往下的流式排列方式。在窗体自上而下分成一行行，且每行按照从左至右的顺序排列节点，其显著特点就是<code>从左往右从上往下</code>。</p><h5 id="类型-1" tabindex="-1">类型 <a class="header-anchor" href="#类型-1" aria-label="Permalink to &quot;类型&quot;">​</a></h5><p>对于一个标准的文档流，可根据其特性对节点分类。</p><ul><li><p>HTML级别</p></li><li><ul><li>容器级元素：<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>等</li><li>文本级元素：<code>&lt;a&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>等</li></ul></li><li><p>CSS级别</p></li><li><ul><li>块级元素：<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>等</li><li>行内元素：<code>&lt;a&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>等</li></ul></li></ul><h5 id="微观现象" tabindex="-1">微观现象 <a class="header-anchor" href="#微观现象" aria-label="Permalink to &quot;微观现象&quot;">​</a></h5><p>即使是标准的文档流，也不排除有一些小小的缺陷，笔者罗列三个常见缺陷。</p><ul><li><p><strong>空白折叠</strong>：HTML中换行编写行内元素，排版会出现<code>5px空隙</code></p></li><li><p><strong>高矮不齐</strong>：行内元素统一以底边垂直对齐</p></li><li><p><strong>自动换行</strong>：排版若一行无法完成则换行接着排版</p></li></ul><p>空白折叠解决方式</p><p>空白折叠也许是最容易出现的文档流微观现象，可能各位同学都会遇过。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul&gt;</span></span>
<span class="line"><span>    &lt;li&gt;&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;li&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span>
<span class="line"><span>ul {</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>li {</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>此时，很多浏览器就会出现<code>5px空隙</code>，解决方式也有很多种的。</p><p>第一种，必须紧密连接节点。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul&gt;</span></span>
<span class="line"><span>    &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span></code></pre></div><p>第二种，子节点声明<code>margin-left:-5px</code>。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>li {</span></span>
<span class="line"><span>    display: inline-block;</span></span>
<span class="line"><span>    margin-left: -5px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>第三种，使用<code>Flex布局</code>居中显示。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ul {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="脱流文档流" tabindex="-1">脱流文档流 <a class="header-anchor" href="#脱流文档流" aria-label="Permalink to &quot;脱流文档流&quot;">​</a></h5><p><strong>脱流文档流</strong>指节点脱流正常文档流后，在正常文档流中的其他节点将忽略该节点并填补其原先空间。文档一旦脱流，计算其父节点高度时不会将其高度纳入，脱流节点不占据空间，因此添加浮动或定位后会对周围节点布局产生或多或少的影响。</p><p>文档流的脱流有两种方式。</p><ul><li>浮动布局：<code>float:left/right</code></li><li>定位布局：<code>position:absolute/fixed</code></li></ul><p>Float方式</p><p>节点使用<code>float</code>脱流时，会让其跳出正常文档流，其他节点会忽略该节点并填补其原先空间。但是该节点文本可不参与这个脱流效果，却会认同该节点所占据的空间并围绕它布局，这个就是常说的<code>文字环绕效果</code>的原理。</p><p>一句话概括：<code>节点参与浮动布局后，自身脱流但其文本不脱流</code>。</p><p>Position方式</p><p>节点使用<code>position</code>脱流时(只有<code>absolute</code>和<code>fixed</code>)，会让其及其文本一起跳出正常文档流，其他节点会忽略该节点并填补其原先空间。<code>absolute</code>绝对定位是相对往上遍历第一个包含<code>position:relative</code>的祖先节点定位，若无此节点则相对<code>&lt;body&gt;</code>定位；<code>fixed</code>固定定位是相对浏览器窗口定位。</p><p>一句话概括：<code>节点参与定位布局后，自身及其文本一起脱流</code>。</p><h5 id="显隐影响" tabindex="-1">显隐影响 <a class="header-anchor" href="#显隐影响" aria-label="Permalink to &quot;显隐影响&quot;">​</a></h5><p>在正常文档流排版过程中，经常会使用<code>display:none</code>和<code>visibility:hidden</code>控制节点的隐藏，<code>display:none</code>简称<code>DN</code>，<code>visibility:hidden</code>简称<code>VH</code>。上一章有提及<code>DN</code>和<code>VH</code>的区别，这次看看节点切入隐藏状态后，会存在什么差别。</p><ul><li><p>节点不可见但占据空间，显隐时可过渡：<code>visibility:hidden</code></p></li><li><p>节点不可见但占据空间，不可点击：<code>visibility:hidden</code></p></li><li><p>节点不可见不占据空间，可访问DOM：<code>display:none</code></p></li><li><p>节点不可见但占据空间，可点击：<code>opacity:0</code></p></li><li><p>节点不可见不占据空间，可点击：<code>position:absolute; opacity:0</code></p></li><li><p>节点不可见但占据空间，不可点击：<code>position:relative; z-index:-1</code></p></li><li><p>节点不可见不占据空间，不可点击：<code>position:absolute; z-index:-1</code></p></li></ul><p>当然这个问题也经常在大厂面试题中出现，结合<code>DN</code>和<code>VH</code>的区别，相信就能完美解答面试官的问题了。</p><h3 id="层叠上下文" tabindex="-1">层叠上下文 <a class="header-anchor" href="#层叠上下文" aria-label="Permalink to &quot;层叠上下文&quot;">​</a></h3><p><strong>层叠上下文</strong>指盒模型在三维空间<code>Z轴</code>上所表现的行为。每个盒模型存在于一个三维空间中，分别是平面画布的<code>X轴Y轴</code>和表示层叠的<code>Z轴</code>。</p><p>通常情况下，节点在页面上沿着X轴和Y轴平铺，很难察觉它们在Z轴上的层叠关系。一旦节点发生堆叠，最终表现就是<code>节点间互相覆盖</code>。若一个节点包含<code>层叠上下文</code>，那么该节点就拥有绝对的制高点，用一个成语贴切表示就是<code>鹤立鸡群</code>，最终表现就是<code>离屏幕观察者更近</code>。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320084868-aadcbd9a-10be-472c-b864-bbc5d2555d12.png" alt="img"></p><p>此时想起<code>position</code>和<code>z-index</code>的结合使用可生成<code>层叠上下文</code>，大部分同学可能一直认为<code>z-index</code>只是定义一个节点在三维空间<code>Z轴</code>的层叠顺序，值越高离屏幕观察者就越近。其实这个认识不全面，还需注意以下两点。</p><ul><li><code>z-index</code>只在声明定位的节点上起效</li><li>节点在<code>Z轴</code>的层叠顺序依据<code>z-index</code>、<code>层叠上下文</code>和<code>层叠等级</code>共同决定</li></ul><h5 id="层叠等级" tabindex="-1">层叠等级 <a class="header-anchor" href="#层叠等级" aria-label="Permalink to &quot;层叠等级&quot;">​</a></h5><p><strong>层叠等级</strong>又名<strong>层叠级别</strong>，指节点在三维空间<code>Z轴</code>上的上下顺序。在同一<code>层叠上下文</code>中，它描述了层叠上下文节点在<code>Z轴</code>上的上下顺序；在普通节点中，它描述普通节点在<code>Z轴</code>上的上下顺序。</p><p>普通节点的<code>层叠等级</code>优先由其所在的层叠上下文决定，<code>层叠等级</code>的比较只有在当前层叠上下文中才有意义，脱离当前层叠上下文的比较就变得无意义了。</p><p>成因</p><p>很多同学可能认为只有<code>position</code>和<code>z-index</code>才能让节点生成一个层叠上下文，其实不仅只有这两个属性，还有一些条件也能让节点生成层叠上下文。</p><ul><li><p><code>&lt;html&gt;</code>根结点</p></li><li><p>声明<code>position:relative/absolute</code>和<code>z-index</code>不为<code>auto</code>的节点</p></li><li><p>声明<code>position:fixed/sticky</code>的节点</p></li><li><p>Flex布局下声明<code>z-index</code>不为<code>auto</code>的节点</p></li><li><p>Grid布局下声明<code>z-index</code>不为<code>auto</code>的节点</p></li><li><p>声明<code>mask/mask-image/mask-border</code>不为<code>none</code>的节点</p></li><li><p>声明<code>filter</code>不为<code>none</code>的节点</p></li><li><p>声明<code>mix-blend-mode</code>不为<code>normal</code>的节点</p></li><li><p>声明<code>opacity</code>不为<code>1</code>的节点</p></li><li><p>声明<code>clip-path</code>不为<code>none</code>的节点</p></li><li><p>声明<code>will-change</code>不为<code>initial</code>的节点</p></li><li><p>声明<code>perspective</code>不为<code>none</code>的节点</p></li><li><p>声明<code>transform</code>不为<code>none</code>的节点</p></li><li><p>声明<code>isolation</code>为<code>isolate</code>的节点</p></li><li><p>声明<code>-webkit-overflow-scrolling</code>为<code>touch</code>的节点</p></li></ul><h5 id="层叠顺序" tabindex="-1">层叠顺序 <a class="header-anchor" href="#层叠顺序" aria-label="Permalink to &quot;层叠顺序&quot;">​</a></h5><p><strong>层叠顺序</strong>指节点发生层叠时按照特定的顺序规则在<code>Z轴</code>上垂直显示。</p><p>脱流元素的层叠顺序</p><p>在同一个层叠上下文中，节点会按照<code>z-index</code>的大小从上到下层叠，若<code>z-index</code>一致则后面的节点层叠等级要大于前面。脱流元素的层叠顺序就是看<code>z-index</code>的大小。</p><p>标准流元素的层叠顺序</p><p>标准流元素的层叠顺序稍微有点难记，笔者也未找到特别的记忆方法，只能死记硬背了。以下是层叠顺序从低到高的排列。</p><ul><li><p>层叠上下文的<code>border</code>和<code>background</code></p></li><li><p><code>z-index&lt;0</code>的子节点</p></li><li><p>标准流内块级非定位的子节点</p></li><li><p>浮动非定位的子节点</p></li><li><p>标准流内行内非定位的子节点</p></li><li><p><code>z-index:auto/0</code>的子节点</p></li><li><p><code>z-index&gt;0</code>的子节点</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320085232-e6bf16d3-7472-4d83-ba77-47950fb4c8e0.png" alt="img"></p>`,135),l=[i];function n(p,t,s,r,g,h){return d(),o("div",null,l)}const m=e(a,[["render",n]]);export{b as __pageData,m as default};
