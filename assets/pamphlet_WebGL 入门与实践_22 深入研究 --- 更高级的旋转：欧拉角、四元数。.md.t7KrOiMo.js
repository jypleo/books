import{_ as s,c as i,o as a,a2 as h}from"./chunks/framework.D8Prfz4N.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/WebGL 入门与实践/22 深入研究 --- 更高级的旋转：欧拉角、四元数。.md","filePath":"pamphlet/WebGL 入门与实践/22 深入研究 --- 更高级的旋转：欧拉角、四元数。.md"}'),p={name:"pamphlet/WebGL 入门与实践/22 深入研究 --- 更高级的旋转：欧拉角、四元数。.md"},n=h(`<p>在之前的<code>坐标系基本变换</code>章节中，我们学习了 3D 基本旋转的四个方法：绕 3 个坐标轴、绕任意轴的旋转，并讲述了推导过程。本节介绍另外两个旋转的表示方法：<code>欧拉角</code>与<code>四元数</code>。</p><p>任何一个概念的提出都有它自身的意义，新概念的诞生大多是为了解决一些问题，欧拉角与四元数也不例外。</p><h2 id="欧拉角" tabindex="-1">欧拉角 <a class="header-anchor" href="#欧拉角" aria-label="Permalink to &quot;欧拉角&quot;">​</a></h2><p>我们看下前四种旋转的特点，前四种旋转可以归结为旋转矩阵。</p><ul><li>首先，旋转矩阵是一个 3 X 3 矩阵，需要 9 个数字来表示一个旋转。</li><li>其次，旋转矩阵通过 3 个绕基本坐标轴的矩阵相乘得到，计算过程相对繁琐。</li><li>最后，物体旋转用矩阵来描述的话不易理解。为什么不易理解，是因为我们习惯于用角度来描述旋转状态，比如向左旋转多少度，绕着什么什么旋转多少度，这种说法很容易在脑子里想象出来。但如果我们看到一种旋转用如下方式来表示：</li></ul><p>$ \\begin{aligned} R = \\begin{pmatrix} 0.25 &amp; 0.1 &amp; 0.3 \\<br> 0.1 &amp; 0.02 &amp; 0.2 \\<br> 0.1 &amp; 0.02 &amp; 0.2 \\end{pmatrix} \\end{aligned} $</p><p>我想，这种反人类的<code>旋转表示方法</code>，人类是无法理解的，当然计算机是能读懂这种旋转的。</p><p>那么，如何表示才能让人很容易地理解旋转呢？于是欧拉角的表示方法诞生了。关于欧拉角的详细介绍，大家可以从<a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noreferrer">这里</a>了解，本节不做具体描述。</p><p>欧拉角是飞控系统中用于描述飞行器姿态的方式，使用三个角度来表示，分别是yaw<code>偏航角</code>、pitch<code>俯仰角</code>、roll<code>滚转角</code>。</p><ul><li>yaw：偏航角，是指飞行器偏离原来航线的角度。</li><li>pitch：俯仰角，是指飞行器机头抬起的角度。</li><li>roll：滚转角，是指飞行器绕着自身头尾轴线翻滚的角度。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672ab81527c0715~tplv-t2oaga2asx-image.image" alt=""></p><p>对比到笛卡尔坐标系，偏航角是绕着 Y 轴旋转的角度 α，俯仰角是绕着 X 轴旋转的角度 β，滚转角是绕着 Z 轴旋转的角度 γ。</p><blockquote><p>欧拉角旋转时绕的轴系，既可以参照世界坐标系，也可以参照自身坐标系。本节所讲的内容都是参照自身坐标系。</p></blockquote><p>可以看出，欧拉角很容易就能表示出一个旋转运动，而且用角度来描述旋转，容易被人理解。</p><p>$R = ( \\alpha, \\beta, \\gamma)$</p><h3 id="欧拉角旋转顺序。" tabindex="-1">欧拉角旋转顺序。 <a class="header-anchor" href="#欧拉角旋转顺序。" aria-label="Permalink to &quot;欧拉角旋转顺序。&quot;">​</a></h3><p>上面讲到，欧拉角是由三个角度构成，那么这三个角度的旋转顺序又是如何表示呢？</p><p>我们必须清楚，欧拉角的旋转顺序必须保证统一性。如果顺序不统一，同样的三个角度，旋转结果也会不一样。就好比我们平常走路，向左转α然后向右转β，向右转α然后向左转β，两种旋转最终表示的姿态也会不同。</p><p>我们常说的欧拉角严格意义上还可以细分为欧拉角<code>Euler-angles</code>和泰特布莱恩角<code>Tait-Bryan-angles</code>，这两种方法都利用了笛卡尔坐标系的三个坐标轴作为旋转轴，区别主要在于绕轴的旋转顺序。</p><h4 id="欧拉角-1" tabindex="-1">欧拉角 <a class="header-anchor" href="#欧拉角-1" aria-label="Permalink to &quot;欧拉角&quot;">​</a></h4><p>欧拉角的选取顺序有以下6种：</p><ul><li>XYX</li><li>XZX</li><li>YZY</li><li>YXY</li><li>ZXZ</li><li>ZYZ</li></ul><p>以 XYX 欧拉角为例，最开始物体的坐标系和世界坐标系保持一致，首先物体绕 X 轴旋转 α角度，此时物体的坐标系发生了变化，产生了新的坐标系E1，然后绕新坐标系E1的 Y 轴旋转 β角度，这时又产生了新的坐标系 E2， 接着绕 E2 的 X 轴旋转 γ 角度，此时即物体的最终姿态。</p><p>可以看到，这种顺序有一个共同点：第一个旋转轴和最后一个旋转轴在物体这个参照系下相同，可以理解为对称型欧拉角。</p><h4 id="泰特布莱恩角。" tabindex="-1">泰特布莱恩角。 <a class="header-anchor" href="#泰特布莱恩角。" aria-label="Permalink to &quot;泰特布莱恩角。&quot;">​</a></h4><p>泰特布莱恩角的选取顺序有如下 6 种：</p><ul><li>XYZ</li><li>XZY</li><li>ZXY</li><li>ZYX</li><li>YXZ</li><li>YZX</li></ul><p>可以看出，此种旋转顺序是非对称型的，我们前面所说的 yaw-pitch-roll 旋转就是采用的泰特布莱恩角。</p><h3 id="欧拉角的矩阵表示" tabindex="-1">欧拉角的矩阵表示 <a class="header-anchor" href="#欧拉角的矩阵表示" aria-label="Permalink to &quot;欧拉角的矩阵表示&quot;">​</a></h3><p>欧拉角的定义有了，那么我们最终还是要将它推导成对应的旋转矩阵才能使用。</p><p><a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noreferrer">这里</a>有这几种顺序的最终推导公式，但接下来我还是要讲解一下这个公式是如何推导出来的。</p><p>前面说过了，顺序不同，所对应的旋转矩阵不同，旋转结果也不同。那么我们根据不同的顺序推导对应的旋转矩阵：</p><h4 id="xyz-顺序" tabindex="-1">XYZ 顺序 <a class="header-anchor" href="#xyz-顺序" aria-label="Permalink to &quot;XYZ 顺序&quot;">​</a></h4><p>在坐标系基本变换章节我们讲解了矩阵的基本旋转，那么，本节的欧拉旋转其实相当于矩阵绕基本坐标轴的复合旋转。 以 XYZ 顺序为例，XYZ 顺序的欧拉旋转可以表示如下：</p><p>$ R_{xyz} = R_x R_y R_z $</p><p>看到这个表达式，我们首先要思考一个问题，上面这个表达式表示的是什么样的旋转呢？</p><p>请谨记，上面表示的旋转可以用以下两种方式理解：</p><ul><li>参照自身坐标系，先绕X轴旋转，再绕 Y 轴旋转，最后绕 Z 轴旋转。</li><li>参照世界坐标系，先绕 Z 轴旋转，再绕 Y 轴旋转，最后绕 X 轴旋转。</li></ul><p>这两种旋转顺序相反。下面的两个方法可以验证，点击<a href="./.html">这里查看源码</a>。</p><p>如何验证参照世界坐标系的旋转顺序？</p><ul><li>首先改变 Z 轴旋转角度，直到旋转 90 度。</li><li>其次改变 Y 轴旋转角度，直到旋转 90 度。</li><li>最后改变 X 轴旋转角度，直到旋转 90 度。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b7709ac748ba~tplv-t2oaga2asx-image.image" alt=""></p><p>我们发现，以世界坐标系为参照，旋转按照先 Z 、再 Y 、最后 X 轴的顺序依次进行。</p><p>如何验证参照自身坐标系的旋转顺序？</p><ul><li>首先改变 X 轴旋转角度，直到旋转 90 度。</li><li>其次改变 Y 轴旋转角度，直到旋转 90 度。</li><li>最后改变 Z 轴旋转角度，直到旋转 90 度。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b7b924f82e5a~tplv-t2oaga2asx-image.image" alt=""></p><p>我们发现，以自身坐标系为参照，旋转按照先 X 、再 Y 、最后 Z 轴的顺序依次进行。</p><p>所以我们得出以下结论：一个复合变换矩阵，既可以理解为世界坐标系下的依次变换，也可以理解为模型坐标系下的依次变换，变换顺序相反。</p><h4 id="根据欧拉角推导旋转矩阵" tabindex="-1">根据欧拉角推导旋转矩阵 <a class="header-anchor" href="#根据欧拉角推导旋转矩阵" aria-label="Permalink to &quot;根据欧拉角推导旋转矩阵&quot;">​</a></h4><p>接下来，我们按照 XYZ 的顺序推导旋转矩阵，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb107d2f57ad44279193c229b8c394d9~tplv-k3u1fbpfcp-watermark.image?" alt="MommyTalk1677065558787.jpg"></p><p>有了推导公式，我们就可以很容易编写JavaScript 算法了：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeRotationFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">euler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> euler.x, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> euler.y, z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> euler.z;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x), sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y), sy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z), sz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxsz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sxcz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cxsz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="其它顺序推导" tabindex="-1">其它顺序推导 <a class="header-anchor" href="#其它顺序推导" aria-label="Permalink to &quot;其它顺序推导&quot;">​</a></h4><p>其它顺序的推导公式和 XYZ 类似，大家只需要按照矩阵相乘顺序推导即可，比如：</p><ul><li>XZY 顺序的推导公式：</li></ul><p>$ R_{xzy} = R_x R_z R_y $</p><ul><li>YXZ 顺序的推导公式：</li></ul><p>$ R_{yxz} = R_y R_x R_z $</p><ul><li>YZX 顺序的推导公式：</li></ul><p>$ R_{yzx} = R_y R_z R_x $</p><ul><li>ZXY 顺序的推导公式：</li></ul><p>$ R_{zxy} = R_z R_x R_y $</p><ul><li>ZYX 顺序的推导公式：</li></ul><p>$ R_{zyx} = R_z R_y R_x $</p><p><a href="./.html">点击这里</a>可以查看不同顺序的欧拉角算法实现。</p><p>有了欧拉角生成旋转矩阵的算法之后，我们就可以按照任意顺序进行旋转了。但请注意，在一个应用中尽量要统一旋转顺序，否则物体的旋转姿态将不是我们期望的。</p><h4 id="实战演练" tabindex="-1">实战演练 <a class="header-anchor" href="#实战演练" aria-label="Permalink to &quot;实战演练&quot;">​</a></h4><p>上面推导出的算法使用起来相当简单，只需传入一个能够表示欧拉角的对象即可：</p><blockquote><p>一个欧拉角对象包含x、y、z 三个属性，分别表示绕 X 轴、Y 轴、Z 轴旋转的角度，以及一个表示欧拉旋转的顺序 order。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniforms.xRotation),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniforms.yRotation),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniforms.zRotation),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="欧拉角的缺点" tabindex="-1">欧拉角的缺点 <a class="header-anchor" href="#欧拉角的缺点" aria-label="Permalink to &quot;欧拉角的缺点&quot;">​</a></h3><p>尽管欧拉角易于理解，但它还是有一些缺点的：</p><ul><li>计算过程涉及到大量三角函数计算，运算量大，这点在推导公式的过程中显而易见。</li><li>给定方位的欧拉角不唯一，有多个，这会对旋转动画的插值造成困难。同样一个姿态可以由好多个欧拉角来表示，即多对一的关系，那么在插值过程中就可能会引起姿态突变，产生抖动效果。</li><li>万向节死锁，这个现象会在第二个旋转轴旋转了90 度时产生，当第二个旋转轴旋转 90 度时，会导致第三个旋转轴和第一个旋转轴重合，此时如果继续绕第三个旋转轴，相当于在第一个旋转轴上旋转。所谓死锁并不是旋转不了了，而是少了一个自由度。</li></ul><h4 id="万向节死锁" tabindex="-1">万向节死锁 <a class="header-anchor" href="#万向节死锁" aria-label="Permalink to &quot;万向节死锁&quot;">​</a></h4><p>我们看一下万向节死锁的表现：</p><p>首先绕 X 轴旋转30度。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b95a50c92be1~tplv-t2oaga2asx-image.image" alt=""></p><p>接着绕 Y 轴旋转90 度。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b96751efbb08~tplv-t2oaga2asx-image.image" alt=""></p><p>绕 Y 轴旋转 90 度后，此时自身坐标系的 Z 轴和最开始的 X 轴重合，触发了万向节死锁，那么它会产生什么后果呢？</p><p>我们绕 Z 轴做的旋转，等价于在最开始的 X 轴上旋转。那还要 Z 轴有什么用呢？是的，Z 轴的旋转已经没用了，此时我们无论怎么绕物体自身的 Z 轴旋转，都只能在原先 X 轴和 Y 轴上进行旋转，失去了原先 Z 轴方向上的的自由度。</p><p>上面的例子最终的旋转角度是(x: 30, y: 90, z: 50)。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b9c1369c1766~tplv-t2oaga2asx-image.image" alt=""></p><p>接下来，我们把 Z 轴的旋转角度放到 X 轴上，不再绕 Z 轴旋转了，此时的欧拉角（x：80， y：90，z：0）。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672b9ba8ef07dd1~tplv-t2oaga2asx-image.image" alt=""></p><p>可以看出，欧拉角（x: 80, y: 90, z: 0）和(x: 30, y: 90, z: 50) 表示的旋转一模一样。也就是说，多个欧拉角会对应一个旋转。这在做旋转动画时会导致旋转动画不准确的问题。</p><h4 id="欧拉角缺陷演示" tabindex="-1">欧拉角缺陷演示 <a class="header-anchor" href="#欧拉角缺陷演示" aria-label="Permalink to &quot;欧拉角缺陷演示&quot;">​</a></h4><p>有句话说得好，当你没有碰到过使用欧拉角进行旋转所产生的缺陷时，你永远无法理解它的缺点，接下来我通过两个例子来演示一下：</p><h5 id="大圆弧与小圆弧" tabindex="-1">大圆弧与小圆弧 <a class="header-anchor" href="#大圆弧与小圆弧" aria-label="Permalink to &quot;大圆弧与小圆弧&quot;">​</a></h5><p>我们知道 (0, 0, 330)和(0, 0, -30)所表示的方位一样，如果把物体从(0, 0, 0)旋转到（0，0，330）所代表的方位，我们期望的旋转动画应该是这样的：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/20/167304a01f8b6ceb~tplv-t2oaga2asx-image.image" alt=""></p><p>但是实际上，欧拉角旋转路径却是这样的：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/20/167304eb7e5ddcf4~tplv-t2oaga2asx-image.image" alt=""></p><p>欧拉角的这个特点会导致插值动画产生抖动、跳跃的副作用。</p><h5 id="动画路径怪异" tabindex="-1">动画路径怪异 <a class="header-anchor" href="#动画路径怪异" aria-label="Permalink to &quot;动画路径怪异&quot;">​</a></h5><p>除了上述大小圆弧产生的路径不正确以外，欧拉角的旋转路径有时很怪异，比如下面这个动画过程。</p><p>准备一个球体，球体初始状态处于万向节死锁状态，如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    xRotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yRotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    zRotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><p>接下来我们让球体转动到如下状态：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    xRotation: 0,</span></span>
<span class="line"><span>    yRotation: -90,</span></span>
<span class="line"><span>    zRotation: 0,</span></span></code></pre></div><p>我们看一下球体的旋转路径是怎样的：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/15/167b1ccaf1e51bf3~tplv-t2oaga2asx-image.image" alt="">。</p><ul><li><p>白色轨迹是采用欧拉角旋转时的运动路线。</p></li><li><p>红色轨迹是我们正常的旋转路线。</p></li></ul><p>可见，欧拉角有时会让我们的旋转绕个弯，产生比较怪异的动画效果，万向节死锁还是那么讨厌。</p><h5 id="连续旋转" tabindex="-1">连续旋转 <a class="header-anchor" href="#连续旋转" aria-label="Permalink to &quot;连续旋转&quot;">​</a></h5><p>万向节死锁除了会产生上面的问题以外，还会导致在做连续增量旋转时姿态不准确的问题，这个问题在一些跟踪系统中导致的后果是跟丢目标。</p><p>举个例子，假设现在我们的飞行器先绕自身 X 轴（此时 X 轴和世界坐标系的 X 轴重合）旋转47 度，接着绕 Y 轴旋转 41 度，最后绕 Z 轴旋转 55 度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">47</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>接着我们再绕飞行器自身坐标系的 X 轴旋转 8 度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMoreMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>经过两次连续旋转之后，物体姿态如下图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672ca68414f6aa2~tplv-t2oaga2asx-image.image" alt=""></p><p>那么，如果我们不分为两次旋转，而是采用一次旋转，那么物体的旋转姿态有什么不同呢？看一下一次旋转的效果：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672ca5f659c7f1e~tplv-t2oaga2asx-image.image" alt=""></p><p>可以看出，虽然有一些差异，但是大体上是一致的。</p><p>接下来我们逐渐改变 Y 轴的旋转角度，当 Y 轴旋转角度为 90 度时，我们再用上面的方法比较一下插值和不插值旋转的区别：</p><p>插值旋转：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">47</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMoreMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672cada3bd27c21~tplv-t2oaga2asx-image.image" alt=""></p><p>那么我们看下一次性旋转后的方位：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rotateMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMatrixFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XYZ&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/19/1672cad6b817fc9b~tplv-t2oaga2asx-image.image" alt=""></p><p>这次能够很明显的感觉出插值前和插值后的区别了，结论是当第二个旋转轴越靠近 90 度，经过插值后的旋转姿态与一次旋转后的姿态产生的偏差越大。</p><h4 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h4><p>实际上欧拉角足以应对大部分场景，虽然它有一些缺点。我们可以做出一些限制来避免它们，比如我们可以将第二个旋转轴的旋转角度限制在 -90 到 +90 之间。但尽管如此，我们仍然无法规避死锁的产生，所以我们急需一种能够避免死锁的旋转方法，也就是接下来要出场的四元数。</p><h2 id="四元数" tabindex="-1">四元数 <a class="header-anchor" href="#四元数" aria-label="Permalink to &quot;四元数&quot;">​</a></h2><p>还记得我们在基本变换里推导出的绕任意轴进行旋转的算法吗？但是通过轴角方式的旋转插值不是很直观，四元数的引入是对轴角旋转的升级，它能够完美地避免欧拉角的缺陷，并且能够很容易地对旋转进行插值，使物体旋转更自然，更平滑。</p><h3 id="四元数基础" tabindex="-1">四元数基础 <a class="header-anchor" href="#四元数基础" aria-label="Permalink to &quot;四元数基础&quot;">​</a></h3><p>四元数，顾名思义，是由四个数字组成，包含一个实数和三个复数，可以表示为：</p><p>$ q = (w, x, y, z) $</p><p>或者</p><p>$ q = w + xi + yj + zk $</p><p>并且有以下特点：</p><p>$ i^2= j^2 = k^2 = -1 $</p><p>四元数还可以理解为一个实数 w 和一个向量 $\\vec u(x,y,z)$</p><p>$ q = (w, \\vec u) $</p><h3 id="基本运算" tabindex="-1">基本运算 <a class="header-anchor" href="#基本运算" aria-label="Permalink to &quot;基本运算&quot;">​</a></h3><h4 id="加法-减法运算" tabindex="-1">加法/减法运算 <a class="header-anchor" href="#加法-减法运算" aria-label="Permalink to &quot;加法/减法运算&quot;">​</a></h4><p>四元数的加减是将对应位置的元素相加或者相减，得到新的四元数。</p><p>$ \\begin{aligned} q0 + q1 &amp;= (w_0, x_0i, y_0j, z_0k) + (w_1, x_1i, y_1j,z_1k) \\<br> &amp;=(w_0 + w_1, (x_0 + x_1)i, (y_0 + y_1)j,(z_0+z_1)k) \\end{aligned} $</p><p>$ \\begin{aligned} q0 - q1 &amp;= (w_0 + x_0i+ y_0j+ z_0k) - (w_1+ x_1i+ y_1j+z_1k) \\<br> &amp;=w_0 - w_1 + (x_0 - x_1)i+(y_0 - y_1)j+(z_0-z_1)k \\end{aligned} $</p><h4 id="乘法运算" tabindex="-1">乘法运算 <a class="header-anchor" href="#乘法运算" aria-label="Permalink to &quot;乘法运算&quot;">​</a></h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/881fc3554b12479597dfcc86ac7de810~tplv-k3u1fbpfcp-watermark.image?" alt="MommyTalk1677066507263.jpg"></p><h4 id="四元数的模" tabindex="-1">四元数的模 <a class="header-anchor" href="#四元数的模" aria-label="Permalink to &quot;四元数的模&quot;">​</a></h4><p>$ \\begin{aligned} |q| = \\sqrt{w^2+x^2+y^2+z^2} \\end{aligned} $</p><h4 id="四元数的共轭" tabindex="-1">四元数的共轭 <a class="header-anchor" href="#四元数的共轭" aria-label="Permalink to &quot;四元数的共轭&quot;">​</a></h4><p>$ \\begin{aligned} q^* &amp;= (w+xi+yj+zk)^* \\<br> &amp;=(w-xi-yj-zk) \\end{aligned} $</p><h4 id="四元数的倒数" tabindex="-1">四元数的倒数 <a class="header-anchor" href="#四元数的倒数" aria-label="Permalink to &quot;四元数的倒数&quot;">​</a></h4><p>q^{-1} . q &amp;= q . q^{-1} = 1</p><p>$ q^{-1} = \\cfrac{q^*}{w^2+x^2+y^2+z^2} $</p><h4 id="四元数的性质" tabindex="-1">四元数的性质 <a class="header-anchor" href="#四元数的性质" aria-label="Permalink to &quot;四元数的性质&quot;">​</a></h4><p>共轭与倒数的性质：</p><p>$ (q_0q_1)^{-1} = q_1^{-1}q_0^{-1} $</p><p>$ (q_0q_1)^{<em>} = q_1^{</em>}q_0^{*} $</p><p>加法乘法满足结合律和分配律</p><p>$ q_0+q_1+q_2 = q_0 + (q_1 + q_2) $ $ q_0q_1q_2 = q_0(q_1q_2) $</p><p>$ q_0(q_1+q_2) = q_0q_1+ q_0q_2 $</p><p>以上是四元数的运算法则和运算性质，我们对它们进行基本封装。</p><h3 id="如何用四元数表示旋转" tabindex="-1">如何用四元数表示旋转？ <a class="header-anchor" href="#如何用四元数表示旋转" aria-label="Permalink to &quot;如何用四元数表示旋转？&quot;">​</a></h3><p>四元数的旋转原理如下： 先将原向量表示为四元数$ q_0=(0,\\vec{v})$ ，将旋转角度和旋转轴的信息用<code>单位四元数 q</code> 表示，下面是一个代表旋转的四元数：</p><p>$ q = cos\\theta + \\vec u sin\\theta $</p><blockquote><p>其中旋转轴 $\\vec{u}$ 必须是单位向量。</p></blockquote><p>该四元数表示绕轴 $\\vec u$ 旋转 2 * θ 角度，注意是 θ 角的2倍哦。</p><p>旋转后得到的向量坐标利用公式 $r = q\\cdot p\\cdot q^*$ 或$ r = q \\cdot p\\cdot q^{-1}$ 计算得出。</p><h3 id="多个四元数旋转" tabindex="-1">多个四元数旋转 <a class="header-anchor" href="#多个四元数旋转" aria-label="Permalink to &quot;多个四元数旋转&quot;">​</a></h3><p>一个四元数代表一个旋转过程，那么多个四元数代表多个旋转过程。</p><p>假设有一个旋转 M 用四元数表示为 Q1，另一个旋转 N 用四元数表示为 Q2。</p><p>那么如果我们按顺序实现这两个旋转，先进行 M 旋转，再执行 N 旋转，我们有两种方式：</p><ul><li>将 Q2 和 Q1 相乘，然后将乘积转化为旋转矩阵。 <ul><li>注意顺序：Q2 * Q1。</li></ul></li><li>将 Q2 和 Q1 分别转换成旋转矩阵，再将旋转矩阵相乘。 <ul><li>注意顺序：N * M</li></ul></li></ul><p>注意：在计算四元数乘积或者旋转矩阵乘积时，一定要注意顺序，先进行的旋转矩阵或者旋转四元数要放在乘号右侧。</p><p>这两种方式所表达的旋转是一致的，但是显然，第一种方式计算量更小一些。</p><h3 id="利用四元数实现旋转。" tabindex="-1">利用四元数实现旋转。 <a class="header-anchor" href="#利用四元数实现旋转。" aria-label="Permalink to &quot;利用四元数实现旋转。&quot;">​</a></h3><p>我们至少需要以下三个方法才能对物体进行旋转：</p><ul><li>通过如下三种方式构造出四元数。 <ul><li>setFromEuler，将一组欧拉角转化成四元数。</li><li>setFromAxis，将轴角转化成四元数。</li><li>setFromRotationMatrix，将旋转矩阵转化成四元数。</li></ul></li><li>已知初始状态四元数和结束状态四元数，构造某一阶段的四元数。 <ul><li><code>slerp</code>。</li></ul></li><li>根据四元数计算出该四元数所代表的旋转矩阵。 <ul><li><code>makeRotationFromQuaternion</code></li></ul></li></ul><p>公式的推导比较复杂，这里就不讲述推导过程了，感兴趣的同学可以点击<a href="./.html">这里</a>，自己动动手试着推导一下。同时，<code>THREEJS</code> 已经为我们封装了关于四元数的函数，在这里我们掌握它提供的一些方法就能覆盖大部分应用场景。</p><p>除了上面的一些方法，THREEJS 还做了一些转换方法：</p><ul><li>将四元数转换成对应欧拉角。</li><li>将四元数转换成对应轴向量。</li><li>将四元数转换成绕轴向量旋转的角度。</li><li>从当前四元数旋转到另一个四元数所经过的角度。</li></ul><p>利用这些方法，很容易地将易于理解的欧拉旋转或者轴角旋转，转换成易于线性插值的四元数。</p><h3 id="四元数的用法" tabindex="-1">四元数的用法 <a class="header-anchor" href="#四元数的用法" aria-label="Permalink to &quot;四元数的用法&quot;">​</a></h3><p>看一下如何使用四元数进行插值，我们将物体从欧拉角（30，40，50）代表的方向旋转到（70，90，120）。</p><p>首先，我们将起始时刻和结束时刻的欧拉角转化为对应的四元数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startQuaternion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endQuaternion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFromEuler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _z: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deg2radians</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>有了起始四元数和结束四元数，我们就可以利用<code>球面插值算法slerp</code>来求旋转矩阵了。假设我们本次旋转过程设置为 30 帧，那么由初始角度到当前帧所代表角度的旋转用四元数表示如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentQuaternion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slerp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(startQuaternion, endQuaternion, progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>那么当前方位的旋转矩阵通过以下方法求得：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeRotationFromQuaternion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unitQuaternion);</span></span></code></pre></div><p>有了初始角度到每一帧角度的旋转矩阵 U ，那么左乘该旋转矩阵 U 可以实现平滑均匀的旋转动画了，如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/21/16735a0e43948b8b~tplv-t2oaga2asx-image.image" alt=""></p><blockquote><p>如果让欧拉角来做 30 次连续插值旋转，最终的动画路径和旋转方向可能会不准确。</p></blockquote><p>四元数在平滑插值上表现出了极大的优势，如果我们想做插值动画，那么四元数无疑是最佳选择。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>四元数相比欧拉角的优势还是很大的：</p><ul><li>计算量相对小一些。</li><li>能够更平滑地插值。</li></ul><p>但是四元数也有一定缺点：</p><ul><li>概念复杂，不易理解。</li></ul><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p>本节介绍了表示旋转的两种很重要的方法：欧拉角与四元数，并分析了它们的优缺点。在实际编程中，四元数的使用场景比较多，动画中的旋转往往需要平滑线性，这种情况我们采用四元数是最佳选择。</p><p>下一节，我们结合学过的算法，学习利用鼠标控制模型旋转的原理。</p>`,200),l=[n];function t(k,e,E,r,d,g){return a(),i("div",null,l)}const o=s(p,[["render",t]]);export{c as __pageData,o as default};
