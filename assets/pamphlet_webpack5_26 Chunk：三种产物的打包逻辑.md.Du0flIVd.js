import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.D8Prfz4N.js";const e="/books/assets/d54599450fe94d0a988ec70214e4ead8~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.Rl4yZMeZ.awebp",p="/books/assets/92e472f300934c009836445743dd6996~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.CQPTjQIr.awebp",h="/books/assets/39e2b041b1994fa2b9c4cb92046f1b90~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DeZLx0li.awebp",t="/books/assets/f065f4c71784477abff7b113eb6dd2bf~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DW5WRCQT.awebp",k="/books/assets/cd08a1a0b94b4f2d804399c77e916862~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.Ca9VF4xT.awebp",l="/books/assets/2bac3fb532bc406fb16331555c309f9b~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DgoYxGzm.awebp",o="/books/assets/219d44ad9b4e4d2e9847761f83774d89~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DICSSPnC.awebp",r="/books/assets/424fe595633d41649a616f2f5076adb4~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BKHROhaZ.awebp",c="/books/assets/1a40257760914ba08783bf2d6a3c1bef~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DMnRIB6r.awebp",d="/books/assets/9d7fbfc917b1416cb1ee86216c3131a0~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BFQmGauh.awebp",u="/books/assets/83a4ebfe25b940d5adfb9d04a7507646~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BPkWCHhP.awebp",g="/books/assets/716dba615b424147ad4076ce0a735eb5~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.B49KW5_c.awebp",E="/books/assets/892f542a06ae4d31a18130e93b07648a~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.CkBHVkPc.awebp",b="/books/assets/de9a9cbc02a9452baa1feddcd7c5ef71~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BALjKq-d.awebp",y="/books/assets/dcbe4fdd5f2d41d0af0b7fcf990a9bb7~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DokcnPOJ.awebp",C="/books/assets/b483355b9b3e4acfb022a2e3aa54d226~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.A9qQQ62S.awebp",F="/books/assets/452ebaf82f7c4df88ae7b5334ff17cba~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BEIivkN4.awebp",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/webpack5/26 Chunk：三种产物的打包逻辑.md","filePath":"pamphlet/webpack5/26 Chunk：三种产物的打包逻辑.md"}'),m={name:"pamphlet/webpack5/26 Chunk：三种产物的打包逻辑.md"},_=n('<p>在上一篇文章《<a href="https://juejin.cn/book/7115598540721618944/section/7119035705153552419" target="_blank" rel="noreferrer">Dependency Graph：如何管理模块间依赖？</a>》中，我们已经详细讲解了「构建」阶段如何从 Entry 开始逐步递归读入、解析模块内容，并最终构建出模块依赖关系图 —— ModuleGraph 对象。本文我们继续往下，讲解在接下来的「封装」阶段，如何根据 ModuleGraph 内容组织 Chunk，并进一步构建出 ChunkGroup、ChunkGraph 依赖关系对象的主流程。</p><p>主流程之外，我们还会详细讲解几个比较模糊的概念：</p><ul><li>Chunk、ChunkGroup、ChunGraph 对象分别是什么？互相之间存在怎样的交互关系？</li><li>Webpack 默认分包规则，以及规则中存在的问题。</li></ul><h2 id="chunkgraph-构建过程" tabindex="-1">ChunkGraph 构建过程 <a class="header-anchor" href="#chunkgraph-构建过程" aria-label="Permalink to &quot;ChunkGraph 构建过程&quot;">​</a></h2><p>在 《<a href="https://juejin.cn/book/7115598540721618944/section/7119035873802813475" target="_blank" rel="noreferrer">Init、Make、Seal：真正读懂 Webpack 核心流程</a>》中，我们已经介绍了 Webpack 底层构建逻辑大体上可以划分为：「<strong>初始化、构建、封装</strong>」三个阶段：</p><p><img src="'+e+'" alt="image.png"></p><p>其中，「<strong>构建</strong>」阶段负责分析模块间的依赖关系，建立起模块之间的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconcepts%2Fdependency-graph%2F%23root" target="_blank" rel="noreferrer">依赖关系图</a>（ModuleGraph）；紧接着，在「<strong>封装</strong>」阶段根据依赖关系图，将模块分开封装进若干 Chunk 对象中，并将 Chunk 之间的父子依赖关系梳理成 ChunkGraph 与若干 ChunkGroup 对象。</p><p>「封装」阶段最重要的目标就是根据「构建」阶段收集到的 ModuleGraph 关系图构建 ChunkGraph 关系图，这个过程的逻辑比较复杂：</p><p><img src="'+p+`" alt="image.png"></p><p>我们简单分析一下这里面几个重要步骤的实现逻辑。</p><p><strong>第一步非常关键：</strong> 调用 <code>seal()</code> 函数后，遍历 <code>entry</code> 配置，为每个入口创建一个空的 <code>Chunk</code> 与 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FEntrypoint.js" target="_blank" rel="noreferrer">EntryPoint</a> 对象（一种特殊的 <code>ChunkGroup</code>），并初步设置好基本的 <code>ChunkGraph</code> 结构关系，为下一步骤做好准备，关键代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  seal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunkGraphInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 遍历入口模块列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">includeDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .entries) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 为每一个 entry 创建对应的 Chunk 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 为每一个 entry 创建对应的 ChunkGroup 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entrypoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Entrypoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 关联 Chunk 与 ChunkGroup</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      connectChunkGroupAndChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entrypoint, chunk);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 遍历 entry Dependency 列表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.globalEntry.dependencies, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 为每一个 EntryPoint 关联入口依赖对象，以便下一步从入口依赖开始遍历其它模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        entrypoint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { name }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {any}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dep).request);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.moduleGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dep);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 在 ChunkGraph 中记录入口模块与 Chunk 关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          chunkGraph.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connectChunkAndEntryModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entrypoint);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 调用 buildChunkGraph 方法，开始构建 ChunkGraph</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildChunkGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chunkGraphInit);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 触发各种优化钩子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行完成后，形成如下数据结构：</p><p><img src="`+h+'" alt="image.png"></p><p>其次，若此时配置了 <code>entry.runtime</code>，Webpack 还会在这个阶段为运行时代码 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FCompilation.js%23L2933-L2934" target="_blank" rel="noreferrer">创建</a> 相应的 Chunk 并直接 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FCompilation.js%23L2937-L2938" target="_blank" rel="noreferrer">分配</a> 给 <code>entry</code> 对应的 <code>ChunkGroup</code>对象。一切准备就绪后调用 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L1347-L1348" target="_blank" rel="noreferrer">buildChunkGraph</a> 函数，进入下一步骤。</p><p><strong>第二步：</strong> 在 <code>buildChunkGraph</code> 函数内 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L1367-L1368" target="_blank" rel="noreferrer">调用</a> <code>visitModules</code> 函数，遍历 ModuleGraph，将所有 Module 按照依赖关系分配给不同 <code>Chunk</code> 对象；这个过程中若遇到 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fblog%2F2020-10-10-webpack-5-release%2F%23async-modules" target="_blank" rel="noreferrer">异步模块</a>，则为该模块 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L740-L742" target="_blank" rel="noreferrer">创建</a>新的 <code>ChunkGroup</code> 与 <code>Chunk</code> 对象，最终形成如下数据结构：</p><p><img src="'+t+'" alt="image.png"></p><p><strong>第三步：</strong> 在 <code>buildChunkGraph</code> 函数中<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L1381-L1382" target="_blank" rel="noreferrer">调用</a> <code>connectChunkGroups</code> 方法，建立 <code>ChunkGroup</code> 之间、<code>Chunk</code> 之间的依赖关系，生成完整的 <code>ChunkGraph</code> 对象，最终形成如下数据结构：</p><p><img src="'+k+'" alt="image.png"></p><p><strong>第四步：</strong> 在 <code>buildChunkGraph</code> 函数中<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L1397-L1398" target="_blank" rel="noreferrer">调用</a> <code>cleanupUnconnectedGroups</code> 方法，清理无效 <code>ChunkGroup</code>，主要起到性能优化作用。</p><p>自上而下经过这四个步骤后，<code>ModuleGraph</code> 中存储的模块将根据模块本身的性质，被分配到 Entry、Async、Runtime 三种不同的 Chunk 对象，并将 Chunk 之间的依赖关系存储到 ChunkGraph 与 ChunkGroup 集合中，后续可在这些对象基础上继续修改分包策略（例如 <code>SplitChunksPlugin</code>），通过重新组织、分配 Module 与 Chunk 对象的归属实现分包优化。</p><h2 id="chunk-vs-chunkgroup-vs-chunkgraph" tabindex="-1">Chunk vs ChunkGroup vs ChunkGraph <a class="header-anchor" href="#chunk-vs-chunkgroup-vs-chunkgraph" aria-label="Permalink to &quot;Chunk vs ChunkGroup vs ChunkGraph&quot;">​</a></h2><p>上述构建过程涉及 Chunk、ChunkGroup、ChunkGraph 三种关键对象，我们先总结它们的概念与作用，加深理解：</p><ul><li><code>Chunk</code>：Module 用于读入模块内容，记录模块间依赖等；而 Chunk 则根据模块依赖关系合并多个 Module，输出成资产文件（合并、输出产物的逻辑，我们放到下一章讲解）：</li></ul><p><img src="'+l+'" alt="image.png"></p><ul><li><code>ChunkGroup</code>：一个 <code>ChunkGroup</code> 内包含一个或多个 <code>Chunk</code> 对象；<code>ChunkGroup</code> 与 <code>ChunkGroup</code> 之间形成父子依赖关系：</li></ul><p><img src="'+o+'" alt="image.png"></p><ul><li><code>ChunkGraph</code>：最后，Webpack 会将 Chunk 之间、ChunkGroup 之间的依赖关系存储到 <code>compilation.chunkGraph</code> 对象中，形成如下类型关系：</li></ul><p><img src="'+r+`" alt="image.png"></p><h2 id="默认分包规则" tabindex="-1">默认分包规则 <a class="header-anchor" href="#默认分包规则" aria-label="Permalink to &quot;默认分包规则&quot;">​</a></h2><p>综合上述 <code>ChunkGraph</code> 构建流程最终会将 Module 组织成三种不同类型的 Chunk：</p><ul><li>Entry Chunk：同一个 <code>entry</code> 下触达到的模块组织成一个 Chunk；</li><li>Async Chunk：异步模块单独组织为一个 Chunk；</li><li>Runtime Chunk：<code>entry.runtime</code> 不为空时，会将运行时模块单独组织成一个 Chunk。</li></ul><p>这是 Webpack 内置的，在不使用 <code>splitChunks</code> 或其它插件的情况下，模块输入映射到输出的默认规则，是 Webpack 底层关键原理之一，因此有必要展开介绍每一种 Chunk 的具体规则。</p><blockquote><p><strong>Entry Chunk:</strong></p></blockquote><p>先从 Entry Chunk 开始，Webpack 首先会为每一个 <code>entry</code> 创建 <code>Chunk</code> 对象，例如对于如下配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    main: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    home: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>遍历 <code>entry</code> 对象属性并创建出 <code>chunk[main]</code> 、<code>chunk[home]</code> 两个对象，此时两个 Chunk 分别包含 <code>main</code> 、<code>home</code> 模块：</p><p><img src="`+c+'" alt="image.png"></p><p>初始化完毕后，Webpack 会根据 <code>ModuleGraph</code> 的依赖关系数据，将 <code>entry</code> 下所触及的所有 Module 塞入 Chunk （发生在 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2Fwebpack%2Fwebpack%2Fblob%2FHEAD%2Flib%2FbuildChunkGraph.js%23L187-L188" target="_blank" rel="noreferrer">visitModules</a> 方法），比如对于如下文件依赖：</p><p><img src="'+d+'" alt="image.png"></p><p><code>main.js</code> 以同步方式直接或间接引用了 a/b/c/d 四个文件，Webpack 会首先为 <code>main.js</code> 模块创建 Chunk 与 EntryPoint 对象，之后将 a/b/c/d 模块逐步添加到 <code>chunk[main]</code> 中，最终形成：</p><p><img src="'+u+`" alt="image.png"></p><blockquote><p><strong>Async Chunk:</strong></p></blockquote><p>其次，Webpack 会将每一个异步导入语句（<code>import(xxx)</code> 及 <code>require.ensure</code>）处理为一个单独的 Chunk 对象，并将其子模块都加入这个 Chunk 中 —— 我们称之为 Async Chunk。例如对于下面的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./sync-a.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./sync-b.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./async-a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// async-a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./sync-c.js&#39;</span></span></code></pre></div><p>在入口模块 <code>index.js</code> 中，以同步方式引入 sync-a、sync-b；以异步方式引入 async-a 模块；同时，在 async-a 中以同步方式引入 <code>sync-c</code> 模块，形成如下模块依赖关系图：</p><p><img src="`+g+'" alt="image.png"></p><p>此时，Webpack 会为入口 <code>index.js</code>、异步模块 <code>async-a.js</code> 分别创建分包，形成如下 Chunk 结构：</p><p><img src="'+E+'" alt="image.png"></p><p>并且 <code>chunk[index]</code> 与 <code>chunk[async-a]</code> 之间形成了单向依赖关系，Webpack 会将这种依赖关系保存在 <code>ChunkGroup._parents</code> 、<code>ChunkGroup._children</code> 属性中。</p><blockquote><p><strong>Runtime Chunk:</strong></p></blockquote><p>最后，除了 <code>entry</code>、异步模块外，Webpack5 还支持将 Runtime 代码单独抽取为 Chunk。这里说的 Runtime 代码是指一些为了确保打包产物能正常运行，而由 Webpack 注入的一系列基础框架代码，举个例子，常见的 Webpack 打包产物结构如：</p><p><img src="'+b+`" alt="image.png"></p><p>上图红框圈出来的一大段代码就是 Webpack 动态生成的运行时代码，编译时，Webpack 会根据业务代码，决定输出哪些支撑特性的运行时代码（基于 <code>Dependency</code> 子类），例如：</p><ul><li>需要 <code>__webpack_require__.f</code>、<code>__webpack_require__.r</code> 等功能实现最起码的模块化支持；</li><li>如果用到动态加载特性，则需要写入 <code>__webpack_require__.e</code> 函数；</li><li>如果用到 Module Federation 特性，则需要写入 <code>__webpack_require__.o</code> 函数；</li><li>等等。</li></ul><p>虽然每段运行时代码可能都很小，但随着特性的增加，最终结果会越来越大，特别对于多 entry 应用，在每个入口都重复打包一份相似的运行时显得有点浪费，为此 Webpack5 提供了 <code>entry.runtime</code> 配置项用于声明如何打包运行时代码。用法上只需在 <code>entry</code> 项中增加字符串形式的 <code>runtime</code> 值，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index: { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, runtime: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;solid-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在 <code>compilation.seal</code> 函数中，Webpack 首先为 <code>entry</code> 创建 <code>EntryPoint</code>，之后判断 <code>entry</code> 配置中是否带有 <code>runtime</code> 属性，有则创建以 <code>runtime</code> 值为名的 Chunk，因此，上例配置将生成两个 Chunk：<code>chunk[index.js]</code> 、<code>chunk[solid-runtime]</code>，并据此最终产出两个文件：</p><ul><li>入口 index 对应的 <code>index.js</code> 文件；</li><li>运行时配置对应的 <code>solid-runtime.js</code> 文件。</li></ul><p>在多 <code>entry</code> 场景中，只要为每个 <code>entry</code> 都设定相同的 <code>runtime</code> 值，Webpack 运行时代码就会合并写入到同一个 Runtime Chunk 中，最终达成产物性能优化效果。例如对于如下配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    index: { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, runtime: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;solid-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    home: { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, runtime: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;solid-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>入口 <code>index</code>、<code>home</code> 共享相同的 <code>runtime</code> 值，最终生成三个 Chunk，分别为：</p><p><img src="`+y+'" alt="image.png"></p><p>此时入口 <code>chunk[index]</code>、<code>chunk[home]</code> 与运行时 <code>chunk[solid-runtime]</code> 也会形成父子依赖关系。</p><h2 id="分包规则的问题" tabindex="-1">分包规则的问题 <a class="header-anchor" href="#分包规则的问题" aria-label="Permalink to &quot;分包规则的问题&quot;">​</a></h2><p>默认分包规则最大的问题是无法解决模块重复，如果多个 Chunk 同时包含同一个 Module，那么这个 Module 会被不受限制地重复打包进这些 Chunk。比如假设我们有两个入口 main/index 同时依赖了同一个模块：</p><p><img src="'+C+'" alt="image.png"></p><p>默认情况下，Webpack 不会对此做额外处理，只是单纯地将 c 模块同时打包进 main/index 两个 Chunk，最终形成：</p><p><img src="'+F+'" alt="image.png"></p><p>可以看到 <code>chunk</code> 间互相孤立，模块 c 被重复打包，对最终产物可能造成不必要的性能损耗！</p><p>为了解决这个问题，Webpack 3 引入 <code>CommonChunkPlugin</code> 插件试图将 entry 之间的公共依赖提取成单独的 <code>chunk</code>，但 <code>CommonChunkPlugin</code> 本质上还是基于 Chunk 之间简单的父子关系链实现的，很难推断出提取出的第三个包应该作为 <code>entry</code> 的父 <code>chunk</code> 还是子 <code>chunk</code>，<code>CommonChunkPlugin</code> 统一处理为父 <code>chunk</code>，某些情况下反而对性能造成了不小的负面影响。</p><p>为此，在 Webpack4 之后才专门引入了更复杂的数据结构 —— <code>ChunkGroup</code> 专门实现关系链管理，配合 <code>SplitChunksPlugin</code> 能够更高效、智能地实现<strong>启发式分包。</strong></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>综上，「构建」阶段负责根据模块的引用关系构建 ModuleGraph；「封装」阶段则负责根据 ModuleGraph 构建一系列 Chunk 对象，并将 Chunk 之间的依赖关系（异步引用、Runtime）组织为 ChunkGraph —— Chunk 依赖关系图对象。与 ModuleGraph 类似，ChunkGraph 结构的引入也能解耦 Chunk 之间依赖关系的管理逻辑，整体架构逻辑更合理更容易扩展。</p><p>不过，虽然看着很复杂，但「封装」阶段最重要的目标还是在于：确定有多少个 Chunk，以及每一个 Chunk 中包含哪些 Module —— 这些才是真正影响最终打包结果的关键因素。</p><p>针对这一点，我们需要理解 Webpack5 内置的三种分包规则：Entry Chunk、Async Chunk 与 Runtime Chunk，这些是最最原始的分包逻辑，其它插件（例如 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fplugins%2Fsplit-chunks-plugin%2F" target="_blank" rel="noreferrer">splitChunksPlugin</a>）都是在此基础，借助 <code>buildChunkGraph</code> 后触发的各种钩子进一步拆分、合并、优化 Chunk 结构，实现扩展分包效果。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p><code>Chunk</code> 一定会且只会生产出一个产物文件吗？为什么？<code>mini-css-extract-plugin</code>、<code>file-loader</code> 这一类能写出额外文件的组件，底层是怎么实现的？</p>',78),f=[_];function A(D,G,j,B,v,w){return a(),i("div",null,f)}const W=s(m,[["render",A]]);export{x as __pageData,W as default};
