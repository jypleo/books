import{_ as s,c as a,o as n,a2 as p}from"./chunks/framework.D8Prfz4N.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/基于 Vite 的组件库工程化实战/7 规范化： Eslint + Prettier + Husky.md","filePath":"pamphlet/基于 Vite 的组件库工程化实战/7 规范化： Eslint + Prettier + Husky.md"}'),e={name:"pamphlet/基于 Vite 的组件库工程化实战/7 规范化： Eslint + Prettier + Husky.md"},i=p(`<p>为了项目能够长期健康的发展。代码的规范性建设非常重要。只有纪律严明的队伍才能不断打胜仗。</p><p><strong>规范制定容易，执行的难度很大。</strong> 比如你规定大街上抽烟罚款 200 元。但是让警察去执法难度就很大。代码规范也会遇到同样的问题，代码检查任务繁琐又缺乏技术含量，应该没有人愿意干这个苦差事，一般都是交个程序完成，这样才能成功地推行下去。</p><p>这节课我们就来学习用工具实现组件库的规范化。</p><p>项目规范可以分为：</p><ul><li>编码规范；</li><li>项目结构规范；</li><li>文件命名规范；</li><li>git commit 版本规范；</li><li>工作流 workflow规范。</li></ul><p>本节只考虑前四部分。关于工作流部分，涉及到社区和团队合作方面，我们会另外开辟一节讲解。</p><p>本章代码分支： <a href="https://github.com/smarty-team/smarty-admin/tree/chapter07" target="_blank" rel="noreferrer">https://github.com/smarty-team/smarty-admin/tree/chapter07</a></p><h2 id="用户故事-userstory" tabindex="-1">用户故事(UserStory) <a class="header-anchor" href="#用户故事-userstory" aria-label="Permalink to &quot;用户故事(UserStory)&quot;">​</a></h2><p>引入项目规范，配置自动化检查工具，避免代码架构退化。</p><h2 id="任务分解-task" tabindex="-1">任务分解(Task) <a class="header-anchor" href="#任务分解-task" aria-label="Permalink to &quot;任务分解(Task)&quot;">​</a></h2><ul><li>编码与项目结构规范；</li><li>Eslint 代码检查工具；</li><li>Prettier 代码格式化工具；</li><li>Git commit 提交检查脚本；</li><li>Husky + git hook 提交前校验。</li></ul><h2 id="任务实现" tabindex="-1">任务实现 <a class="header-anchor" href="#任务实现" aria-label="Permalink to &quot;任务实现&quot;">​</a></h2><h3 id="编码规范" tabindex="-1">编码规范 <a class="header-anchor" href="#编码规范" aria-label="Permalink to &quot;编码规范&quot;">​</a></h3><ul><li><p>JS代码规范</p><ul><li><a href="https://link.juejin.cn/?target=https://github.com/lin-123/javascript" target="_blank" rel="noreferrer">airbnb-中文版</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/standard/standard/blob/master/docs/README-zhcn.md" target="_blank" rel="noreferrer">standard (24.5k star) 中文版</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/ecomfe/spec" target="_blank" rel="noreferrer">百度前端编码规范 3.9k</a></li></ul></li><li><p>CSS代码规范</p><ul><li><a href="https://link.juejin.cn/?target=https://github.com/fex-team/styleguide/blob/master/css.md" target="_blank" rel="noreferrer">styleguide 2.3k</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/ecomfe/spec/blob/master/css-style-guide.md" target="_blank" rel="noreferrer">spec 3.9k</a></li></ul></li></ul><p>对于编码规范，通常会依赖 eslint 这种代码检查工具。 eslint 提供了 airbnb 、google、eslint默认三种编码规范。其实无论选择哪一种规则都可以很好地保证代码的可读性。所以大家使用 eslint 默认规则就好。</p><p>另外还有目录规范和文件命名规范也一并罗列出来。</p><h3 id="目录规范" tabindex="-1">目录规范 <a class="header-anchor" href="#目录规范" aria-label="Permalink to &quot;目录规范&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── config               # 配置文件</span></span>
<span class="line"><span>├── coverage            # 覆盖率报告</span></span>
<span class="line"><span>├── demo                # 代码范例</span></span>
<span class="line"><span>├── docs                # 文档</span></span>
<span class="line"><span>├── node_modules  </span></span>
<span class="line"><span>├── scripts              # 脚本 发布、提交信息检查</span></span>
<span class="line"><span>├── src                  # 组件代码</span></span>
<span class="line"><span>└── types                # TS类型定义</span></span></code></pre></div><h3 id="文件命名规范" tabindex="-1">文件命名规范 <a class="header-anchor" href="#文件命名规范" aria-label="Permalink to &quot;文件命名规范&quot;">​</a></h3><p>以一个组件为例，代码规则如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── src                 # 组件代码</span></span>
<span class="line"><span>    └── button       # 组件包名</span></span>
<span class="line"><span>         ├── index.ts   # 组件入口</span></span>
<span class="line"><span>         ├── Button.tsx  # 组件代码  </span></span>
<span class="line"><span>         └── __tests__   # 测试用例</span></span>
<span class="line"><span>                  └── Button.spec.ts</span></span></code></pre></div><ul><li>包名：小写 + 中划线；</li><li>统一入口文件： index.ts；</li><li>组件代码： 大驼峰；</li><li>测试用例代码 ： 测试对象名+ .spec.ts。</li></ul><h3 id="eslint-prettier-代码检查工具" tabindex="-1">Eslint + Prettier 代码检查工具 <a class="header-anchor" href="#eslint-prettier-代码检查工具" aria-label="Permalink to &quot;Eslint + Prettier 代码检查工具&quot;">​</a></h3><p>通常代码的检查工作交给 eslint 和 prettier 共同完成。其中 eslint 主要是完成对于代码语法的检查工作，比如：是否有声明但是没有使用的变量。而 prettier 主要专注于代码格式的调整功能。prettier 通常会以eslint 插件的形式使用，一般无需直接运行。</p><p>另外 eslint 在环境下还需要配置专门针对 Vue 框架的 eslint-plugin-vue 插件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm i eslint -D</span></span>
<span class="line"><span># ESLint 专门解析 TypeScript 的解析器</span></span>
<span class="line"><span>pnpm i @typescript-eslint/parser -D</span></span>
<span class="line"><span># 内置各种解析 TypeScript rules 插件</span></span>
<span class="line"><span>pnpm i @typescript-eslint/eslint-plugin -D</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm i eslint-formatter-pretty -D</span></span>
<span class="line"><span>pnpm i eslint-plugin-json -D</span></span>
<span class="line"><span>pnpm i eslint-plugin-prettier -D</span></span>
<span class="line"><span>pnpm i eslint-plugin-vue -D</span></span>
<span class="line"><span>pnpm i @vue/eslint-config-prettier -D</span></span>
<span class="line"><span>pnpm i babel-eslint -D</span></span>
<span class="line"><span>pnpm i prettier -D</span></span></code></pre></div><blockquote><p>.eslintrc.cjs</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>module.exports =   {</span></span>
<span class="line"><span>  root: true,</span></span>
<span class="line"><span>  env: {</span></span>
<span class="line"><span>    browser: true,</span></span>
<span class="line"><span>    es2020: true,</span></span>
<span class="line"><span>    node: true,</span></span>
<span class="line"><span>    jest: true</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  globals: {</span></span>
<span class="line"><span>    ga: true,</span></span>
<span class="line"><span>    chrome: true,</span></span>
<span class="line"><span>    __DEV__: true</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 解析 .vue 文件</span></span>
<span class="line"><span>  parser: &#39;vue-eslint-parser&#39;, </span></span>
<span class="line"><span>  extends: [</span></span>
<span class="line"><span>    &#39;plugin:json/recommended&#39;,</span></span>
<span class="line"><span>    &#39;plugin:vue/vue3-essential&#39;,</span></span>
<span class="line"><span>    &#39;eslint:recommended&#39;,</span></span>
<span class="line"><span>    &#39;@vue/prettier&#39;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  plugins: [&#39;@typescript-eslint&#39;],</span></span>
<span class="line"><span>  parserOptions: {</span></span>
<span class="line"><span>    parser: &#39;@typescript-eslint/parser&#39; // 解析 .ts 文件</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  rules: {</span></span>
<span class="line"><span>    &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,</span></span>
<span class="line"><span>    &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,</span></span>
<span class="line"><span>    &#39;prettier/prettier&#39;: &#39;error&#39;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>.eslintignore</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>*.sh</span></span>
<span class="line"><span>node_modules</span></span>
<span class="line"><span>lib</span></span>
<span class="line"><span>coverage</span></span>
<span class="line"><span>*.md</span></span>
<span class="line"><span>*.scss</span></span>
<span class="line"><span>*.woff</span></span>
<span class="line"><span>*.ttf</span></span>
<span class="line"><span>src/index.ts</span></span>
<span class="line"><span>dist</span></span></code></pre></div><blockquote><p>package.json</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;lint&quot;: &quot;eslint --fix --ext .ts,.vue src&quot;,</span></span>
<span class="line"><span>    &quot;format&quot;: &quot;prettier --write \\&quot;src/**/*.ts\\&quot; \\&quot;src/**/*.vue\\&quot;&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行 pnpm lint 进行代码校验。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e50975de4e9421b8fc6966847d1a162~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>果然首次运行的时候还是发现一些语法问题。稍微调整一下就可以通过了。</p><h3 id="husky-git-hooks-自动化提交验证" tabindex="-1">Husky + git hooks 自动化提交验证 <a class="header-anchor" href="#husky-git-hooks-自动化提交验证" aria-label="Permalink to &quot;Husky + git hooks 自动化提交验证&quot;">​</a></h3><p>为了确保只有合格的代码才能够提交到仓库。 需要配置自动化脚本，确保代码在提交前通过了代码验证工具的检验。</p><p>实际上 git 本身就设计了生命周期钩子来完成这个任务。但是设置过程比较复杂。所以通常情况下会使用 husky 来简化配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm i husky -D</span></span></code></pre></div><p>在 <code>package.json</code> 加上下面的代码。</p><p>添加 husky 脚本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm set-script prepare &quot;husky install&quot;</span></span></code></pre></div><p>首先配置一个钩子，在 commit 提交前，必须执行 lint 代码校验。</p><p>添加生命周期钩子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx husky add .husky/pre-commit &quot;pnpm lint&quot;</span></span></code></pre></div><p>修改 hooks 程序。</p><p>.husky/pre-commit</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm run lint</span></span></code></pre></div><p>配置完成后，commit 一次代码测试一下是否有效。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1457c52cc1524e1c95a3b7bb7c733926~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>接着还需要配置在 push 之前通过单元测试的钩子。方法类似。</p><p>添加生命周期钩子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx husky add .husky/pre-push &quot;pnpm test:run&quot;</span></span></code></pre></div><p>由于 vitest 默认是以伺服模式运行，所以需要写一个专门的脚本让测试运行在伺服模式下 packages.json</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test:run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>修改hooks程序。 .husky/pre-push</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm run test:run</span></span></code></pre></div><h3 id="git-commit-提交规范" tabindex="-1">Git commit 提交规范 <a class="header-anchor" href="#git-commit-提交规范" aria-label="Permalink to &quot;Git commit 提交规范&quot;">​</a></h3><p>提交规范主要是为了让开发者提交完整的更新信息。方便查阅。大家可以围观一下 Vue 的 Github。拥有清晰 commit 信息非常有助于查阅代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b954cf904e74329a0325d2541d2bd6d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>目前最为流行的提交信息规范来自于 Angular 团队。</p><p>规范中，主要就是要求提交内容要进行分类并填写内容，更为严格的规定是要求标注开发模块。</p><ul><li>type：commit 的类型；</li><li>feat：新功能、新特性；</li><li>fix: 修改 bug；</li><li>perf：更改代码，以提高性能；</li><li>refactor：代码重构（重构，在不影响代码内部行为、功能下的代码修改）；</li><li>docs：文档修改；</li><li>style：代码格式修改, 注意不是 css 修改（例如分号修改）；</li><li>test：测试用例新增、修改；</li><li>build：影响项目构建或依赖项修改；</li><li>revert：恢复上一次提交；</li><li>ci：持续集成相关文件修改；</li><li>chore：其他修改（不在上述类型中的修改）；</li><li>release：发布新版本；</li><li>workflow：工作流相关文件修改。</li></ul><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 示例1</span></span>
<span class="line"><span>fix(global):修复checkbox不能复选的问题</span></span>
<span class="line"><span># 示例2 下面圆括号里的 common 为通用管理的名称</span></span>
<span class="line"><span>fix(common): 修复字体过小的BUG，将通用管理下所有页面的默认字体大小修改为 14px</span></span>
<span class="line"><span># 示例3</span></span>
<span class="line"><span>fix: value.length -&gt; values.length</span></span></code></pre></div><p>下面配置一个工具用于在提交时自动检查 commit 信息是否符合要求。</p><p>安装工具验证脚本 commitlint，并且配置一个 commitlint 内容插件来确定一种 msg 风格。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 安装commitlint</span></span>
<span class="line"><span>pnpm i -d @commitlint/config-conventional@&quot;17.0.2&quot; @commitlint/cli@&quot;17.0.2&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Configure commitlint to use conventional config</span></span>
<span class="line"><span>echo &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot; &gt; commitlint.config.js</span></span></code></pre></div><p>将 commitlint 脚本添加到 githooks 中， 让每次提交前都验证信息是否正常。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx husky add .husky/commit-msg &quot;&quot;</span></span></code></pre></div><p>.husky/commit-msg</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npx --no -- commitlint --edit &quot;$1&quot;</span></span></code></pre></div><p>配置完成后，你可以测试一下。</p><p>当你提交代码没有按照规范填写 commit message 时，就会出现报错并且阻止你提交代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34ddb5de19ee43898220b1fbe9eccba8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>本章代码分支： <a href="https://github.com/smarty-team/smarty-admin/tree/chapter07" target="_blank" rel="noreferrer">https://github.com/smarty-team/smarty-admin/tree/chapter07</a></p><h2 id="复盘" tabindex="-1">复盘 <a class="header-anchor" href="#复盘" aria-label="Permalink to &quot;复盘&quot;">​</a></h2><p>这节课是给组件库确定开发规范并且添加规范化检查工具。</p><p>代码规范大体可以分为目录规范、编码规范、提交规范。更重要的内容是介绍如何使用相应的工具来检查代码规范，保证项目的健康性。大体归纳如下：</p><ul><li>编码规范： ESLint （语法） + Prettier（格式）+ Husky (提交时自动检查)；</li><li>提交 Message ： commitlint(提交信息样式检查) + Husky (提交时自动检查)。</li></ul><p>ESLint 是通过对 AST 语法树的分析完成的检查，具有很好的扩展性，可以扩展很多功能，比如 vue2 与vue3 语法的不兼容性也可以通过相应的插件进行检测。甚至 Prettier 也是作为 ESLint 的插件执行的。假设在实际开发中有自定义规则，也推荐使用编写ESLint插件的形式完成。</p><p>代码规范的作用是为了提高代码的可读性，毕竟代码是人与机器的沟通媒介，机器可以不厌其烦的工作，而人类精力和记忆力都有限，需要更优秀的结构和形式来提高阅读效率。基于人类的有限的精力，代码规范化这个东西如果全部让人类手工完成并不合理，不合理就很难被推行下去，不过聪明的人类可以想到使用规范化工具，让机器来解决这个问题。</p><p>对于具体规范化规则的制定，我提倡一定要考虑到实现成本和收益。比如某个规则特别的复杂，但是对可读性没有明显的提高，而且不能使用现成的工具来实现，那这样的规则实际上不应该提倡。</p><p>最后留一些思考题帮助大家复习，也欢迎大家在评论区讨论。</p><ul><li>Eslint 与 Prettier 的功能和区别 ？</li><li>Git commit Message 的规范是什么 ？</li><li>如何设置 githooks ？</li></ul><p>下节课，我们将完成软件包的封装，下节课见。</p>`,86),t=[i];function l(c,o,r,u,h,d){return n(),a("div",null,t)}const b=s(e,[["render",l]]);export{g as __pageData,b as default};
