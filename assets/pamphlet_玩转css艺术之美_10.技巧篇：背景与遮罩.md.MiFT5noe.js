import{_ as n,c as a,o as s,a2 as e}from"./chunks/framework.D8Prfz4N.js";const h=JSON.parse('{"title":"10.技巧篇：背景与遮罩","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/10.技巧篇：背景与遮罩.md","filePath":"pamphlet/玩转css艺术之美/10.技巧篇：背景与遮罩.md"}'),p={name:"pamphlet/玩转css艺术之美/10.技巧篇：背景与遮罩.md"},o=e(`<h1 id="_10-技巧篇-背景与遮罩" tabindex="-1">10.技巧篇：背景与遮罩 <a class="header-anchor" href="#_10-技巧篇-背景与遮罩" aria-label="Permalink to &quot;10.技巧篇：背景与遮罩&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p><code>background</code>是使用最多的属性之一，<code>mask</code>是使用最少的属性之一。为何要拿<code>background</code>和<code>mask</code>一起说呢？因为它们的格式和用法大部分相似，作用效果也相似，是少有的兄弟属性。另外，<code>margin</code>和<code>padding</code>也是一对常见的兄弟属性，何时使用<code>margin</code>何时使用<code>padding</code>，这个就自行探讨了。</p><h3 id="属性连写" tabindex="-1">属性连写 <a class="header-anchor" href="#属性连写" aria-label="Permalink to &quot;属性连写&quot;">​</a></h3><p><code>background</code>是一个大家庭，包含着众多子属性，这些子属性可拆开声明也可合并声明。拆开与合并也是看个人编码习惯，无特别的标准说一定要怎样处理。合并声明有一个标准称呼，叫做<strong>属性连写</strong>。</p><p><code>background</code>包含以下子属性，而<code>mask</code>子属性也大部分与<code>background</code>一致。</p><ul><li><p><strong>background-color</strong>：背景颜色</p></li><li><p><strong>background-image</strong>：背景图像</p></li><li><p><strong>background-repeat</strong>：背景图像平铺方式</p></li><li><p><strong>background-attachment</strong>：背景图像依附方式</p></li><li><p><strong>background-position</strong>：背景图像起始位置</p></li><li><p><strong>background-size</strong>：背景图像尺寸模式</p></li><li><p><strong>background-origin</strong>：定位区域</p></li><li><p><strong>background-clip</strong>：绘制区域</p></li><li><p><strong>background-blend-mode</strong>：混合模式</p></li></ul><p>除了<code>background</code>，以下属性也包含众多子属性，它们单独声明也能代替单个子属性声明。例如<code>padding-top:10px</code>等价于<code>padding:10px 0 0 0</code>。</p><ul><li><p><strong>margin</strong></p></li><li><p><strong>padding</strong></p></li><li><p><strong>border</strong></p></li><li><p><strong>outline</strong></p></li><li><p><strong>mask</strong></p></li><li><p><strong>font</strong></p></li><li><p><strong>transition</strong></p></li><li><p><strong>animation</strong></p></li></ul><p>最常使用的<code>background</code>，有些同学喜欢简写，有些同学喜欢连写。建议只声明一个子属性时使用简写，声明两个或以上子属性时使用连写。这样是为了规范代码，增加代码的可读性。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* 简写 */</span></span>
<span class="line"><span>.elem {</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    background-image: url(&quot;./img.png&quot;);</span></span>
<span class="line"><span>    background-repeat: no-repeat;</span></span>
<span class="line"><span>    background-position: center;</span></span>
<span class="line"><span>    background-size: 100px 100px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 连写 */</span></span>
<span class="line"><span>.elem {</span></span>
<span class="line"><span>    background: #f66 url(&quot;./img.png&quot;) no-repeat center/100px 100px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>细心的同学可能发现<code>position</code>和<code>size</code>在连写时使用<code>/</code>衔接起来了。</p><p>刚开始的<code>background</code>只有<code>color</code>、<code>image</code>、<code>repeat</code>、<code>attachment</code>和<code>position</code>这五个子属性，CSS3发布后增加了<code>size</code>、<code>origin</code>和<code>clip</code>这三个子属性，而<code>position</code>和<code>size</code>都能使用长度单位作为值，连写时就无法区分两者的位置了，所以使用<code>/</code>将两者衔接起来。</p><p>通用格式是<code>position/size</code>，若声明<code>background:#f66 100px 100px</code>，<code>100px 100px</code>对应是<code>position</code>，而<code>size</code>不会被声明。</p><p>属性连写的好处是比单个子属性声明要简洁得多，可少写很多代码。而<code>background</code>子属性众多，到底如何安排子属性连写顺序也是一个难题。刚好CSS2推荐了一条子属性连写顺序规则。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>background: color image repeat attachment position/size</span></span></code></pre></div><p><code>origin</code>和<code>clip</code>不能加入到属性连写中，因为其取值都是一致的，有些浏览器无法区分它们的取值。</p><p>若某些值缺省则往前补充即可。<code>background</code>子属性连写顺序并无强制标准，若不喜欢上述规范，也可自行制定。以下涉及到<code>mask</code>子属性连写顺序与<code>background</code>子属性连写顺序一致，就不再啰嗦了。</p><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p><code>background</code>子属性众多，其属性取值也很多。</p><ul><li><p><strong>background-color</strong>：颜色</p></li><li><ul><li><code>transparent</code>：透明(<code>默认</code>)</li><li><code>Keyword</code>：颜色关键字</li></ul></li><li><ul><li><code>HEX</code>：十六进制色彩模式</li><li><code>RGB</code>或<code>RGBA</code>：RGB/A色彩模式</li></ul></li><li><ul><li><code>HSL</code>或<code>HSLA</code>：HSL/A色彩模式</li><li><code>Color1/Color2</code>：覆盖颜色，背景颜色可能是<code>Color1</code>，若背景图像无效则使用<code>Color2</code>代替<code>Color1</code></li></ul></li><li><p><strong>background-image</strong>：图像</p></li><li><ul><li><code>none</code>：无图像(<code>默认</code>)</li><li><code>url()</code>：图像路径</li></ul></li><li><p><strong>background-repeat</strong>：图像平铺方式</p></li><li><ul><li><code>repeat</code>：图像在水平方向和垂直方向重复(<code>默认</code>)</li><li><code>repeat-x</code>：图像在水平方向重复</li></ul></li><li><ul><li><code>repeat-y</code>：图像在垂直方向重复</li><li><code>no-repeat</code>：图像仅重复一次</li></ul></li><li><ul><li><code>space</code>：图像以相同间距平铺且填充整个节点</li><li><code>round</code>：图像自动缩放直到适应且填充整个节点</li></ul></li><li><p><strong>background-attachment</strong>：图像依附方式</p></li><li><ul><li><code>scroll</code>：图像随页面滚动而移动(<code>默认</code>)</li><li><code>fixed</code>：图像不会随页面滚动而移动</li></ul></li><li><p><strong>background-position</strong>：图像起始位置</p></li><li><ul><li><code>Position</code>：位置，可用任何长度单位，第二个位置(Y轴)不声明默认是<code>50%</code>(默认<code>0% 0%</code>)</li><li><code>Keyword</code>：位置关键字<code>left、right、top、bottom、center</code>，可单双使用，第二个关键字不声明默认是<code>center</code></li></ul></li><li><p><strong>background-size</strong>：图像尺寸模式</p></li><li><ul><li><code>auto</code>：自动设置尺寸(<code>默认</code>)</li><li><code>cover</code>：图像扩展至足够大，使其完全覆盖整个区域，图像某些部分也许无法显示在区域中</li></ul></li><li><ul><li><code>contain</code>：图像扩展至最大尺寸，使其宽度和高度完全适应整个区域</li><li><code>Size</code>：尺寸，可用任何长度单位，第二个尺寸(高)不声明默认是<code>auto</code></li></ul></li><li><p><strong>background-origin</strong>：定位区域(与<code>background-position</code>结合使用)</p></li><li><ul><li><code>padding-box</code>：图像相对填充定位(<code>默认</code>)</li><li><code>border-box</code>：图像相对边框定位</li></ul></li><li><ul><li><code>content-box</code>：图像相对内容定位</li></ul></li><li><p><strong>background-clip</strong>：绘制区域</p></li><li><ul><li><code>border-box</code>：图像被裁剪到边框与边距的交界处(<code>默认</code>)</li><li><code>padding-box</code>：图像被裁剪到填充与边框的的交界处</li></ul></li><li><ul><li><code>content-box</code>：图像被裁剪到内容与填充的交界处</li></ul></li><li><p><strong>background-blend-mode</strong>：混合模式</p></li><li><ul><li><code>normal</code>：正常(<code>默认</code>)</li><li><code>color-burn</code>：颜色加深</li></ul></li><li><ul><li><code>color-dodge</code>：颜色减淡</li><li><code>color</code>：颜色</li></ul></li><li><ul><li><code>darken</code>：变暗</li><li><code>difference</code>：差值</li></ul></li><li><ul><li><code>exclusion</code>：排除</li><li><code>hard-light</code>：强光</li></ul></li><li><ul><li><code>hue</code>：色相</li><li><code>lighten</code>：变亮</li></ul></li><li><ul><li><code>luminosity</code>：亮度</li><li><code>multiply</code>：正片叠底</li></ul></li><li><ul><li><code>overlay</code>：叠加</li><li><code>saturation</code>：饱和度</li></ul></li><li><ul><li><code>screen</code>：滤色</li><li><code>soft-light</code>：柔光</li></ul></li></ul><p>总体来说，<code>background</code>简单易用，以下三点可能需加注意。</p><ul><li><p><code>repeat</code>和<code>position</code>包含后缀为<code>-x</code>和<code>-y</code>这两个子属性，若单独声明使用<code>x</code>或<code>y</code>即可</p></li><li><p><code>position</code>的<code>x</code>和<code>y</code>允许负值，当赋值<code>x</code>时正值向右负值向左，当赋值<code>y</code>时正值向下负值向上</p></li><li><p><code>background</code>声明多个图像路径时，若不声明<code>position</code>，那么首个图像定位在节点最顶部，剩余图像依次顺序显示</p></li><li><p>对于兼容性比较低的浏览器，<code>size</code>不能在<code>background</code>中连写，需单独编写</p></li></ul><p>贴顶背景</p><p>这个需求可能是使用<code>background</code>最多的场景，没有之一。需求的定位很简单，就是背景图像贴着最顶部且水平居中显示，不管屏幕怎么拉伸都始终保持在最顶部最中间。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607321126832-3fd2ba15-f21d-4222-9ec0-f25606244eb5.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$bg: &quot;https://static.yangzw.vip/codepen/mountain.jpg&quot;;</span></span>
<span class="line"><span>.pasted-bg {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    height: 300px;</span></span>
<span class="line"><span>    background: #000 url($bg) no-repeat center top/auto 300px;</span></span>
<span class="line"><span>    text-shadow: 2px 2px 5px rgba(#000, .5);</span></span>
<span class="line"><span>    font-weight: bold;</span></span>
<span class="line"><span>    font-size: 50px;</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>该需求通常都会定死高度，声明<code>background-size:auto 300px</code>让背景图像高度跟节点高度一致但宽度自适应，千万别写死<code>100%</code>，这样在浏览器窗口变化过程中就会让背景图像变形了。声明<code>background-position:center top</code>是为了让背景图像水平居中且贴着最顶部，无论浏览器窗口怎样变化都始终保持这个定位。</p><p>多重背景</p><p>CSS3的<code>background</code>不仅仅增加了<code>size</code>、<code>origin</code>和<code>clip</code>这三个子属性，还增加了<code>多重背景</code>这个强大功能。多重背景可从上到下从左到右拼接背景图像，也可叠加背景图像。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126846-ac1154ec-babc-4366-9866-d9a59a9ef3f8.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$bg-1: &quot;https://static.yangzw.vip/codepen/ab-1.jpg&quot;;</span></span>
<span class="line"><span>$bg-2: &quot;https://static.yangzw.vip/codepen/ab-2.jpg&quot;;</span></span>
<span class="line"><span>$bg-3: &quot;https://static.yangzw.vip/codepen/mountain.jpg&quot;;</span></span>
<span class="line"><span>$bg-4: &quot;https://static.yangzw.vip/codepen/logo.svg&quot;;</span></span>
<span class="line"><span>.spliced-bg {</span></span>
<span class="line"><span>    width: 300px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-color: #3c9;</span></span>
<span class="line"><span>    background-image: url($bg-1), url($bg-2);</span></span>
<span class="line"><span>    background-repeat: no-repeat, no-repeat;</span></span>
<span class="line"><span>    background-position: left, right;</span></span>
<span class="line"><span>    background-size: auto 200px, auto 200px;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.overlying-bg {</span></span>
<span class="line"><span>    margin-left: 20px;</span></span>
<span class="line"><span>    width: 300px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-image: url($bg-4), url($bg-3);</span></span>
<span class="line"><span>    background-repeat: repeat, no-repeat;</span></span>
<span class="line"><span>    background-position: left, center;</span></span>
<span class="line"><span>    background-size: auto 80px, auto 200px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>声明顺序靠前的背景图像的层叠等级比较高，叠加背景图像时，靠前的背景图像尽量使用<code>png</code>格式才能让靠后的背景图像显示，否则可能遮挡靠后的背景图像。</p><p>镂空文本</p><p><code>background-clip</code>是一个很巧妙的属性，除了专有的三个取值，在<code>Webkit内核</code>中还可裁剪到文本与内容的交界处，也就是说背景只作用于文本中。</p><p>有了<code>background-clip:text</code>，再结合<code>text-shadow</code>描绘文本阴影，让文字变得更立体更动感。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126794-10422d76-b072-4f52-8b63-06d0a355fcbd.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$bg: &quot;https://static.yangzw.vip/codepen/mountain.jpg&quot;;</span></span>
<span class="line"><span>.hollow-text {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background: #000 url($bg) no-repeat center top/auto 300px;</span></span>
<span class="line"><span>    background-clip: text;</span></span>
<span class="line"><span>    text-shadow: 2px 2px 5px rgba(#000, .5);</span></span>
<span class="line"><span>    font-weight: bold;</span></span>
<span class="line"><span>    font-size: 80px;</span></span>
<span class="line"><span>    color: transparent;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="渐变" tabindex="-1">渐变 <a class="header-anchor" href="#渐变" aria-label="Permalink to &quot;渐变&quot;">​</a></h3><p>渐变一直以来在页面中都是一种常见的视觉元素。设计师都是通过<code>图形软件</code>设计这些渐变效果，然后以图像的形式被前端开发者运用到页面中。</p><p><strong>渐变</strong>指两种或多种颜色在特定区域内平滑过渡的效果。曾经渲染带有渐变的背景只能使用图像实现。如今CSS3增加了以下几个<code>渐变函数</code>，让代码渲染渐变成为了可能。</p><ul><li><p><strong>linear-gradient()</strong>：线性渐变</p></li><li><p><strong>radial-gradient()</strong>：径向渐变</p></li><li><p><strong>conic-gradient()</strong>：锥形渐变</p></li><li><p><strong>repeating-linear-gradient()</strong>：重复线性渐变</p></li><li><p><strong>repeating-radial-gradient()</strong>：重复径向渐变</p></li><li><p><strong>repeating-conic-gradient()</strong>：重复锥形渐变</p></li></ul><p>重点讲解<code>linear-gradient()</code>、<code>radial-gradient()</code>和<code>conic-gradient()</code>，<code>repeating-*</code>也是在原有函数的基础上延伸，就不再啰嗦了。</p><p>CSS渐变分为三种，每一种都有自身的特点。</p><ul><li><p><strong>线性渐变</strong>：沿着指定方向从起点到终点逐渐改变颜色，渐变形状是一条<code>直线</code></p></li><li><p><strong>径向渐变</strong>：沿着任意方向从圆心往外面逐渐改变颜色，渐变形状是一个<code>圆形</code>或<code>椭圆形</code></p></li><li><p><strong>锥形渐变</strong>：沿着顺时针方向从圆心往外面逐渐改变颜色，渐变形状是一个<code>圆锥体</code></p></li></ul><p>每个<code>渐变函数</code>都必须在<code>background</code>或<code>background-image</code>上使用，可认为<code>gradient()</code>就是一个图像，只不过是通过函数产生的图像。</p><p>线性渐变</p><p><code>线性渐变</code>是三种渐变效果里最简单的一种，以<code>直线</code>的方式向指定方向扩散，使用频率很高，是渐变函数里最好用的一个函数。掌握它几乎能应付大部分需求，其使用语法如下。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>background-image: linear-gradient(direction, color-stop)</span></span></code></pre></div><ul><li><p><strong>Direction</strong>：方向</p></li><li><ul><li><code>Keyword</code>：方向关键字<code>to left/right/top/bottom/top left/top right/bottom left/bottom right</code>(默认<code>to bottom</code>)</li><li><code>Angle</code>：角度，以顺时针方向的垂直线和渐变线的夹角计算，超出N圈则计算剩余角度</li></ul></li><li><p><strong>ColorStop</strong>：色标</p></li><li><ul><li><code>Color</code>：颜色，可参考<code>background-color</code>取值，在指定位置产生渐变效果所使用的颜色</li><li><code>Position</code>：位置，可参考<code>background-position</code>的<code>Position</code>取值，在指定位置产生渐变效果</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126848-c54652bc-6edc-4cc2-81a3-8f4ad5fcccf2.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    width: 400px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-image: linear-gradient(to bottom, #f66, #66f);</span></span>
<span class="line"><span>    /* 等价于 */</span></span>
<span class="line"><span>    background-image: linear-gradient(to bottom, #f66 0, #66f 100%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>color-stop()</code>在指定位置使用指定颜色，可用多个色标，其连写方式如下。第一个值为<code>Color</code>，第二个值为<code>Position</code>，编写形式为<code>#f66 30%</code>，若第二个值不声明则浏览器会自动分配位置。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    background-image: linear-gradient(to bottom, #f66 0, #66f 20%, #f90, 40%, #09f 60%, #9c3 80%, #3c9 100%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>很多同学对线性渐变的方向搞不清，若<code>Direction</code>缺省则默认<code>从上到下</code>，也就是参数默认值<code>to bottom</code>。</p><p>可能使用方向关键字比较容易理解，<code>to xxx</code>就知道是什么意思了。千万不要使用单独的方向关键字，例如<code>left</code>、<code>right</code>、<code>top</code>和<code>bottom</code>等，因为<code>Sarafi</code>相对其他浏览器对这些单独的方向关键字的解释可能是不同的。</p><p>若以角度声明方向，上述角度解析可能有点拗口，可参考以下的角度演示图。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2985494/1607321127156-919f64ee-e707-4017-911a-5a75738b83b1.jpeg" alt="img"></p><ul><li><p><strong>0deg</strong>：<code>to top</code></p></li><li><p><strong>90deg</strong>：<code>to right</code></p></li><li><p><strong>180deg</strong>：<code>to bottom</code></p></li><li><p><strong>270deg</strong>：<code>to left</code></p></li></ul><p>从形式上可联想到<code>盒模型</code>的<code>margin</code>、<code>padding</code>和<code>border</code>。<code>padding:10px 20px 30px 40px</code>可拆分为以下形式</p><ul><li><p><strong>padding-top</strong>：<code>10px</code></p></li><li><p><strong>padding-right</strong>：<code>20px</code></p></li><li><p><strong>padding-bottom</strong>：<code>30px</code></p></li><li><p><strong>padding-left</strong>：<code>40px</code></p></li></ul><p>其实CSS的方向顺序都是符合<code>上右下左</code>这个规则，若跟方向有关的声明都可联想到这个规则。</p><p>径向渐变</p><p><code>径向渐变</code>是一个很奇妙的渐变效果，以<code>圆形</code>或<code>椭圆形</code>的方式向任意方向扩散。参数有点奇葩，但是解构其参数后用起来也很方便，其使用语法如下。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>background-image: radial-gradient(shape size at position, color-stop)</span></span></code></pre></div><ul><li><p><strong>Shape</strong>：形状</p></li><li><ul><li><code>ellipse</code>：椭圆形(<code>默认</code>)</li><li><code>circle</code>：圆形</li></ul></li><li><p><strong>Size</strong>：尺寸</p></li><li><ul><li><code>farthest-corner</code>：从圆心到离圆心最远的角为半径(<code>默认</code>)</li><li><code>farthest-side</code>：从圆心到离圆心最远的边为半径</li></ul></li><li><ul><li><code>closest-corner</code>：从圆心到离圆心最近的角为半径</li><li><code>closest-side</code>：从圆心到离圆心最近的边为半径</li></ul></li><li><ul><li><code>Size</code>：尺寸，可用任何长度单位，宽和高必须同时声明</li></ul></li><li><p><strong>Position</strong>：位置</p></li><li><ul><li><code>Keyword</code>：位置关键字<code>left、right、top、bottom、center</code>(默认<code>center</code>)</li><li><code>Position</code>：位置，可用任何长度单位</li></ul></li><li><p><strong>ColorStop</strong>：色标</p></li><li><ul><li><code>Color</code>：颜色，可参考<code>background-color</code>取值，在指定位置产生渐变效果所使用的颜色</li><li><code>Position</code>：位置，可参考<code>background-position</code>的<code>Position</code>取值，在指定位置产生渐变效果</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126866-e87756ef-5fd1-4382-9c08-a9714aa7bd80.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    width: 400px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-image: radial-gradient(100px 100px, #f66, #66f);</span></span>
<span class="line"><span>    /* 等价于 */</span></span>
<span class="line"><span>    background-image: radial-gradient(ellipse 100px 100px at center, #f66, #66f);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>径向渐变的<code>color-stop()</code>与线性渐变的<code>color-stop()</code>完全一致，其细节可回看上述详情。虽然<code>径向渐变</code>比<code>线性渐变</code>更复杂，只要了解其基本语法以及参数，基本也没什么大问题。</p><p>锥形渐变</p><p><code>锥形渐变</code>比其他两个渐变效果更新潮，，以<code>圆锥体</code>的方式向顺时针方向扩散，产生的渐变效果就像俯视圆锥体的顶部。由于兼容性比较差也没什么实际应用，不过认识它也是一件很不错的事情，其使用语法如下。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>background-image: conic-gradient(color-stop)</span></span></code></pre></div><ul><li><p><strong>ColorStop</strong>：色标</p></li><li><ul><li><code>Color</code>：颜色，可参考<code>background-color</code>取值，在指定位置产生渐变效果所使用的颜色</li><li><code>Position</code>：位置，可参考<code>background-position</code>的<code>Position</code>取值，在指定位置产生渐变效果</li></ul></li></ul><p>细心的同学可能发现锥形渐变无方向感，因为其无参数可声明。锥形渐变确实无参数用于声明方向，其渐变的起始位置是垂直线与向上方向的夹角(可参照上述线性渐变的<code>0deg</code>)，再沿着顺时针方向旋转产生渐变效果。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126897-38fd4ea4-6e78-4274-af1e-178d24b1cfa9.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    width: 400px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-image: conic-gradient(#f66, #66f);</span></span>
<span class="line"><span>    /* 等价于 */</span></span>
<span class="line"><span>    background-image: conic-gradient(#f66 0, #66f 100%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>锥形渐变的<code>color-stop()</code>与线性渐变的<code>color-stop()</code>完全一致，其细节可回看上述详情。貌似锥形渐变比线性渐变更简单，其参数比线性渐变更少。</p><h5 id="渐变背景" tabindex="-1">渐变背景 <a class="header-anchor" href="#渐变背景" aria-label="Permalink to &quot;渐变背景&quot;">​</a></h5><p>声明<code>linear-gradient()</code>产生从左上角往右下角的渐变效果，将背景定位在左边，通过<code>animation</code>控制背景定位左右徘徊产生动态的渐变背景。其实这是一种障眼法，好比在电视机前看电视，电视机不动，但镜头却一直在移动。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607321126935-d40b0fc3-7631-43c8-b1f7-4361d44886b2.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;gradient-bg&quot;&gt;iCSS&lt;/div&gt;</span></span>
<span class="line"><span>.gradient-bg {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    height: 100%;</span></span>
<span class="line"><span>    background: linear-gradient(135deg, #f66, #f90, #3c9, #09f, #66f) left center/400% 400%;</span></span>
<span class="line"><span>    font-weight: bold;</span></span>
<span class="line"><span>    font-size: 100px;</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>    animation: move 10s infinite;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes move {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        background-position-x: left;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    50% {</span></span>
<span class="line"><span>        background-position-x: right;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/oNvbRwN" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/color/%E4%BD%BF%E7%94%A8linear-gradient()%E6%8E%A7%E5%88%B6%E6%B8%90%E5%8F%98%E8%83%8C%E6%99%AF.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="渐变文本" tabindex="-1">渐变文本 <a class="header-anchor" href="#渐变文本" aria-label="Permalink to &quot;渐变文本&quot;">​</a></h5><p>实现原理与上述<code>镂空文本</code>和<code>渐变背景</code>一致，在声明<code>background-image</code>时由图像路径改成<code>linear-gradient()</code>，再通过<code>filter:hue-rotate()</code>在指定时间内改变背景色相。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607321126820-8bbd604e-37d0-4855-850a-3c205501b58d.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;h1 class=&quot;gradient-text&quot;&gt;Full Stack Developer&lt;/h1&gt;</span></span>
<span class="line"><span>.gradient-text {</span></span>
<span class="line"><span>    background-image: linear-gradient(90deg, #f66, #f90);</span></span>
<span class="line"><span>    background-clip: text;</span></span>
<span class="line"><span>    line-height: 60px;</span></span>
<span class="line"><span>    font-size: 60px;</span></span>
<span class="line"><span>    color: transparent;</span></span>
<span class="line"><span>    animation: hue 5s linear infinite;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes hue {</span></span>
<span class="line"><span>    from {</span></span>
<span class="line"><span>        filter: hue-rotate(0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    to {</span></span>
<span class="line"><span>        filter: hue-rotate(-1turn);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/pozgQVo" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/color/%E4%BD%BF%E7%94%A8linear-gradient()%E6%8E%A7%E5%88%B6%E6%B8%90%E5%8F%98%E6%96%87%E6%9C%AC.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="闪烁文本" tabindex="-1">闪烁文本 <a class="header-anchor" href="#闪烁文本" aria-label="Permalink to &quot;闪烁文本&quot;">​</a></h5><p>实现原理与上述<code>渐变文本</code>一致，额外声明<code>background-blend-mode</code>为<code>强光模式</code>是为了模拟闪烁效果。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607321126879-f44c3647-fc23-4d4f-82cb-51b986c4272b.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;p class=&quot;blink-text tac&quot;&gt;🔥若对CSS技巧很感兴趣，请关注我喔&lt;/p&gt;</span></span>
<span class="line"><span>.blink-text {</span></span>
<span class="line"><span>    width: 100%;</span></span>
<span class="line"><span>    background-image: linear-gradient(-45deg, #f66 30%, #fff 50%, #f66 70%);</span></span>
<span class="line"><span>    background-size: 200%;</span></span>
<span class="line"><span>    background-clip: text;</span></span>
<span class="line"><span>    background-blend-mode: hard-light;</span></span>
<span class="line"><span>    font-weight: bold;</span></span>
<span class="line"><span>    font-size: 20px;</span></span>
<span class="line"><span>    color: transparent;</span></span>
<span class="line"><span>    animation: shine 2s infinite;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes shine {</span></span>
<span class="line"><span>    from {</span></span>
<span class="line"><span>        background-position: 100%;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    to {</span></span>
<span class="line"><span>        background-position: 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/XWbGEzo" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/color/%E4%BD%BF%E7%94%A8linear-gradient()%E6%8E%A7%E5%88%B6%E9%97%AA%E7%83%81%E6%96%87%E6%9C%AC.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="方格背景" tabindex="-1">方格背景 <a class="header-anchor" href="#方格背景" aria-label="Permalink to &quot;方格背景&quot;">​</a></h5><p>曾经渲染<code>方格背景</code>需在<code>图形软件</code>下切出重复主体的图层，再声明<code>background-repeat:repeat</code>让该图像重复平铺到整个背景区域。</p><p>其实可用<code>linear-gradient()</code>完成上述效果，减少图像渲染。分析<code>方格背景</code>的特点可知，其主体部分由4个交错的正方形组成，两个白色两个灰色，声明<code>linear-gradient()</code>渲染出这个主体图像，再声明<code>background-repeat:repeat</code>让该主体图像重复平铺到整个背景区域。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126851-3c113fb7-307f-4c84-ade4-1d7d9782e41a.png" alt="img"></p><p>首先声明<code>background-image:linear-gradient(45deg,#eee 25%,transparent 25%,transparent 75%,#eee 75%)</code>产生下图。有无发现把该图像复制一份并向上位移<code>20px</code>向右位移<code>20px</code>就得到上图。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126839-ef757801-3b3c-4fee-8ae0-37191093a6a6.png" alt="img"></p><p>上述有提及<code>background</code>可用多重背景，那么此时就可用上了。声明两个<code>linear-gradient()</code>产生两个图像，声明<code>background-position:0 0, 20px 20px</code>让两个图像错位排列，声明<code>background-size:40px 40px</code>固定两个图像的大小。由于<code>background-repeat</code>的默认值是<code>repeat</code>，因此无需声明重复平铺了。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126946-39cc84de-8a95-41ad-8a58-7649759e0593.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;square-bg&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>.square-bg {</span></span>
<span class="line"><span>    width: 500px;</span></span>
<span class="line"><span>    height: 300px;</span></span>
<span class="line"><span>    background-image: linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%),</span></span>
<span class="line"><span>        linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%);</span></span>
<span class="line"><span>    background-position: 0 0, 20px 20px;</span></span>
<span class="line"><span>    background-size: 40px 40px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/RwboXoV" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/figure/%E4%BD%BF%E7%94%A8linear-gradient()%E6%8F%8F%E7%BB%98%E6%96%B9%E6%A0%BC%E8%83%8C%E6%99%AF.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="网格背景" tabindex="-1">网格背景 <a class="header-anchor" href="#网格背景" aria-label="Permalink to &quot;网格背景&quot;">​</a></h5><p>实现原理与上述<code>方格背景</code>一致，各位同学可试试该效果的实现。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126911-6bb4110d-1c0e-4a93-adf9-7a9050aa7a60.png" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;grid-bg&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>.grid-bg {</span></span>
<span class="line"><span>    width: 500px;</span></span>
<span class="line"><span>    height: 300px;</span></span>
<span class="line"><span>    background-color: #3c9;</span></span>
<span class="line"><span>    background-image: linear-gradient(0deg, #fff 5%, transparent 5%, transparent),</span></span>
<span class="line"><span>        linear-gradient(90deg, #fff 5%, transparent 5%, transparent);</span></span>
<span class="line"><span>    background-position: 0 0, 20px 20px;</span></span>
<span class="line"><span>    background-size: 20px 20px;</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/pojoyzd" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/figure/%E4%BD%BF%E7%94%A8linear-gradient()%E6%8F%8F%E7%BB%98%E7%BD%91%E6%A0%BC%E8%83%8C%E6%99%AF.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="彩色饼图" tabindex="-1">彩色饼图 <a class="header-anchor" href="#彩色饼图" aria-label="Permalink to &quot;彩色饼图&quot;">​</a></h5><p>平时绘制饼图需引入第三方图表库，仅仅绘制一个饼图而引入一个图表库，岂不是很浪费资源。若要求不高的话，其实CSS也能完成一个常规的饼图。</p><p>上述提及的<code>conic-gradient()</code>能产生锥形渐变，若控制每个颜色的渐变范围就能产生以下效果。该渐变范围指颜色渲染的边界，具体到哪个百分比。以下代码分别声明了<code>0~25%</code>、<code>25~30%</code>、<code>30~55%</code>、<code>55~70%</code>、<code>70~100%</code>这五个区间，每个区间渲染一种指定颜色。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    background-image: conic-gradient(#f66 0, #f66 25%, #66f 25% #66f, 30%, #f90 30%, #f90 55%, #09f 55%, #09f 70%, #3c9 70%, #3c9 100%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126893-3305dd67-8be7-480a-8a0a-2c2c067e2847.png" alt="img"></p><p>整个饼图在<code>0deg</code>(可参照上述线性渐变的<code>0deg</code>)的位置沿着顺时针方向依次渲染颜色，先定义的颜色先渲染。声明<code>border-radius:100%</code>让节点变成圆形，就能完成一个常规的饼图了。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607321126970-acde35e5-fd94-4051-b6ba-666f11d21e05.png" alt="img"></p><p>上述写法导致<code>background-image</code>过长，可用<code>color start end</code>代替<code>color start, color end</code>。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;pie-chart&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>.pie-chart {</span></span>
<span class="line"><span>    border-radius: 100%;</span></span>
<span class="line"><span>    width: 300px;</span></span>
<span class="line"><span>    height: 300px;</span></span>
<span class="line"><span>    background-image: conic-gradient(#f66 0 25%, #66f 25% 30%, #f90 30% 55%, #09f 55% 70%, #3c9 70% 100%);</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/XWrjrgE" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/figure/%E4%BD%BF%E7%94%A8conic-gradient()%E6%8F%8F%E7%BB%98%E5%BD%A9%E8%89%B2%E9%A5%BC%E5%9B%BE.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h3 id="遮罩" tabindex="-1">遮罩 <a class="header-anchor" href="#遮罩" aria-label="Permalink to &quot;遮罩&quot;">​</a></h3><p><code>mask</code>子属性比<code>background</code>子属性还要多，其属性取值也很多，但是总体使用情况和<code>background</code>差不多。</p><ul><li><p><strong>mask-mode</strong>：模式</p></li><li><ul><li><code>match-source</code>：根据图像类型采用合适的遮罩模式(<code>默认</code>)</li><li><code>alpha</code>：根据图像透明度采用合适的遮罩模式</li></ul></li><li><ul><li><code>luminance</code>：根据图像亮度采用合适的遮罩模式</li></ul></li><li><p><strong>mask-image</strong>：图像</p></li><li><ul><li><code>none</code>：无图像(<code>默认</code>)</li><li><code>url()</code>：图像路径</li></ul></li><li><p><strong>mask-repeat</strong>：图像平铺方式</p></li><li><ul><li><code>repeat</code>：图像在水平方向和垂直方向重复(<code>默认</code>)</li><li><code>repeat-x</code>：图像在水平方向重复</li></ul></li><li><ul><li><code>repeat-y</code>：图像在垂直方向重复</li><li><code>no-repeat</code>：图像仅重复一次</li></ul></li><li><ul><li><code>space</code>：图像以相同间距平铺且填充整个节点</li><li><code>round</code>：图像自动缩放直到适应且填充整个节点</li></ul></li><li><p><strong>mask-position</strong>：图像起始位置</p></li><li><ul><li><code>Position</code>：位置，可用任何长度单位，第二个位置(Y轴)不声明默认是<code>50%</code>(默认<code>0% 0%</code>)</li><li><code>Keyword</code>：位置关键字<code>left、right、top、bottom、center</code>，可单双使用，第二个关键字不声明默认是<code>center</code></li></ul></li><li><p><strong>mask-size</strong>：图像尺寸模式</p></li><li><ul><li><code>auto</code>：自动设置尺寸(<code>默认</code>)</li><li><code>cover</code>：图像扩展至足够大，使其完全覆盖整个区域，图像某些部分也许无法显示在区域中</li></ul></li><li><ul><li><code>contain</code>：图像扩展至最大尺寸，使其宽度和高度完全适应整个区域</li><li><code>Size</code>：尺寸，可用任何长度单位，第二个尺寸(高)不声明默认是<code>auto</code></li></ul></li><li><p><strong>mask-origin</strong>：定位区域(与<code>background-position</code>结合使用)</p></li><li><ul><li><code>padding-box</code>：图像相对填充定位(<code>默认</code>)</li><li><code>border-box</code>：图像相对边框定位</li></ul></li><li><ul><li><code>content-box</code>：图像相对内容定位</li></ul></li><li><p><strong>mask-clip</strong>：绘制区域</p></li><li><ul><li><code>border-box</code>：图像被裁剪到边框与边距的交界处(<code>默认</code>)</li><li><code>padding-box</code>：图像被裁剪到填充与边框的的交界处</li></ul></li><li><ul><li><code>content-box</code>：图像被裁剪到内容与填充的交界处</li></ul></li><li><p><strong>mask-composite</strong>：混合模式</p></li><li><ul><li><code>source-over</code>：叠加，显示遮罩图像合并处</li><li><code>subtract</code>：相减，不显示遮罩图像重合处</li></ul></li><li><ul><li><code>intersect</code>：相交，显示遮罩图像重合处</li><li><code>exclude</code>：排除，显示遮罩图像合并处但不显示重合处</li></ul></li></ul><p>总体来说，<code>mask</code>和<code>background</code>的格式和用法大部分相似，作用效果也相似。认识它的难度不大，当作<code>background</code>的另一种效果使用即可。</p><ul><li><p><code>repeat</code>和<code>position</code>包含后缀为<code>-x</code>和<code>-y</code>这两个子属性，若单独声明使用<code>x</code>或<code>y</code>即可</p></li><li><p><code>position</code>的<code>x</code>和<code>y</code>允许负值，当赋值<code>x</code>时正值向右负值向左，当赋值<code>y</code>时正值向下负值向上</p></li><li><p><code>mask</code>声明多个图像路径时，若不声明<code>position</code>，那么首个图像定位在节点最顶部，剩余图像依次顺序显示</p></li><li><p>若要声明<code>mask</code>生效，节点的<code>background-image</code>必须使用透明格式的图像</p></li><li><p>目前多个浏览器还没统一<code>composite</code>的取值，上述取值均为<code>Firefox</code>标准，是极大可能被W3C标准化的取值，<code>Chrome</code>标准请参照<a href="https://www.canvasapi.cn/CanvasRenderingContext2D/globalCompositeOperation" target="_blank" rel="noreferrer">这里</a></p></li></ul><h5 id="镂空背景" tabindex="-1">镂空背景 <a class="header-anchor" href="#镂空背景" aria-label="Permalink to &quot;镂空背景&quot;">​</a></h5><p>实现原理与上述<code>镂空文本</code>一致，只不过是把<code>background-clip</code>改成<code>mask</code>。</p><ul><li><code>background-clip:text</code>针对文本镂空</li><li><code>mask</code>针对图像镂空</li></ul><p>实现镂空背景有两个要点。声明<code>background</code>时可选纯色、图像或渐变，声明<code>mask</code>时必须选择透明格式的图像才能用该图像的透明区域遮挡背景。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607321127015-54a69a66-c5be-4cf8-b9a7-47f35cc35604.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;mask-bg&quot;&gt;</span></span>
<span class="line"><span>    &lt;div&gt;&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>$mask-bg: &quot;https://static.yangzw.vip/codepen/mountain.jpg&quot;;</span></span>
<span class="line"><span>$mask-text: &quot;https://static.yangzw.vip/codepen/snow.jpg&quot;;</span></span>
<span class="line"><span>$logo: &quot;https://static.yangzw.vip/codepen/logo.png&quot;;</span></span>
<span class="line"><span>.mask-bg {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    overflow: hidden;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>    height: 100%;</span></span>
<span class="line"><span>    &amp;::after {</span></span>
<span class="line"><span>        position: absolute;</span></span>
<span class="line"><span>        left: -20px;</span></span>
<span class="line"><span>        right: -20px;</span></span>
<span class="line"><span>        top: -20px;</span></span>
<span class="line"><span>        bottom: -20px;</span></span>
<span class="line"><span>        background: url($mask-bg) no-repeat center/cover;</span></span>
<span class="line"><span>        filter: blur(10px);</span></span>
<span class="line"><span>        content: &quot;&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    div {</span></span>
<span class="line"><span>        position: relative;</span></span>
<span class="line"><span>        z-index: 9;</span></span>
<span class="line"><span>        width: 600px;</span></span>
<span class="line"><span>        height: 300px;</span></span>
<span class="line"><span>        background: url($mask-text) left center/150% auto;</span></span>
<span class="line"><span>        mask: url($logo) center/cover;</span></span>
<span class="line"><span>        animation: move 10s infinite;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes move {</span></span>
<span class="line"><span>    0% {</span></span>
<span class="line"><span>        background-position-x: 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    50% {</span></span>
<span class="line"><span>        background-position-x: 100%;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/xxKZdZN" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/figure/%E4%BD%BF%E7%94%A8mask%E9%9B%95%E5%88%BB%E9%95%82%E7%A9%BA%E8%83%8C%E6%99%AF.vue" target="_blank" rel="noreferrer">Here</a></li></ul>`,136),l=[o];function i(c,d,t,r,g,u){return s(),a("div",null,l)}const m=n(p,[["render",i]]);export{h as __pageData,m as default};
