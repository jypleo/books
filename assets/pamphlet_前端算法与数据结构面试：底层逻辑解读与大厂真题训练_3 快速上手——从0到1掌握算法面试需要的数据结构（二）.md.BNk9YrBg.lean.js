import{_ as n,D as p,c as h,j as s,a as i,I as t,w as l,a2 as k,o as e}from"./chunks/framework.D8Prfz4N.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3 快速上手——从0到1掌握算法面试需要的数据结构（二）.md","filePath":"pamphlet/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3 快速上手——从0到1掌握算法面试需要的数据结构（二）.md"}'),d={name:"pamphlet/前端算法与数据结构面试：底层逻辑解读与大厂真题训练/3 快速上手——从0到1掌握算法面试需要的数据结构（二）.md"},E=s("p",null,"本节我们基于对数组的理解和掌握，围剿线性数据结构（栈、队列和链表）。",-1),r=s("h2",{id:"栈和队列",tabindex:"-1"},[i("栈和队列 "),s("a",{class:"header-anchor",href:"#栈和队列","aria-label":'Permalink to "栈和队列"'},"​")],-1),g=s("p",null,[i("在 JavaScript 中，"),s("strong",null,"栈和队列的实现一般都要依赖于数组"),i("，大家完全可以把栈和队列都看作是“特别的数组”。")],-1),c=s("p",null,[i("（注：实际上，栈和队列作为两种运算受限的"),s("strong",null,"线性表"),i("，用链表来实现也是没问题的。只是从前端面试做题的角度来说，基于链表来实现栈和队列约等于脱裤子放屁（链表实现起来会比数组麻烦得多，做不到开箱即用），基本没人会这么干。这里大家按照数组的思路往下走就行了）")],-1),o=s("strong",null,"增删操作",-1),y=k("",102);function F(u,b,C,m,f,v){const a=p("font");return e(),h("div",null,[E,r,g,c,s("p",null,[i("两者的区别在于，它们各自对数组的"),t(a,{color:"Crimson"},{default:l(()=>[o]),_:1}),i("有着不一样的限制。因此，在学习栈与队列之前，我们需要先来明确一下数组中的增删操作具有什么样的特性、对应的方法有哪些：")]),y])}const B=n(d,[["render",F]]);export{D as __pageData,B as default};
