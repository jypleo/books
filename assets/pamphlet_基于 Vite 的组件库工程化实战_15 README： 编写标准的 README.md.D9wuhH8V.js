import{_ as i,c as s,o as a,a2 as t}from"./chunks/framework.D8Prfz4N.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/基于 Vite 的组件库工程化实战/15 README： 编写标准的 README.md","filePath":"pamphlet/基于 Vite 的组件库工程化实战/15 README： 编写标准的 README.md"}'),l={name:"pamphlet/基于 Vite 的组件库工程化实战/15 README： 编写标准的 README.md"},e=t(`<p>这节课，我们来介绍如何编写 README 文档。README 文档对于开源项目的重要性甚至会超过代码本身。你试想一下，你打开一个 Github 项目，第一时间就会看到 README 文档，而这时候同一类的项目你可能有很多选择，如果这个README不正规，无法快速上手，你可能直接就弃用这个项目。</p><p>在编写自己的组件库案例之前，先带大家欣赏一下大神的作品。</p><p>优秀的案例：<a href="https://github.com/slidevjs/slidev" target="_blank" rel="noreferrer">https://github.com/slidevjs/slidev</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71b9b54fd5a54d9fa85e5b97278a200f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>先看开头部分：</p><ul><li>Banner + Title 居中；</li><li>徽章的颜色重新定制和 Logo 呼应，并且细心地使用了渐变效果。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebc503f3f3284a2bb25d050dfa5622e9~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><ul><li>特性描述精炼准确；</li><li>字体图标开头提升了页面视觉效果；</li><li>引用链接完整清晰。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1ffbf69f0a54116a84b95ac6f052105~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><ul><li>快速开始提供了在线编辑器可以一键试用；</li><li>文档提供多语言链接。</li></ul><h2 id="用户故事-userstory" tabindex="-1">用户故事(UserStory) <a class="header-anchor" href="#用户故事-userstory" aria-label="Permalink to &quot;用户故事(UserStory)&quot;">​</a></h2><p>为组件库编写标准 README 文档，使开发者更容易上手使用。</p><h2 id="任务分解-task" tabindex="-1">任务分解(Task) <a class="header-anchor" href="#任务分解-task" aria-label="Permalink to &quot;任务分解(Task)&quot;">​</a></h2><ul><li>Title 标题；</li><li>Banner 头图；</li><li>徽章 Badges；</li><li>特性 Features；</li><li>开源许可证 License 。</li></ul><p>对于如何编写标准 README ，有一个<a href="https://github.com/RichardLitt/standard-readme" target="_blank" rel="noreferrer">经典的 Github 项目</a>。</p><p>这个项目系统地讲述了 README 的编写方法。文中提到标准的 README，最基本的部分包括以下几大内容：</p><ul><li>Background 背景；</li><li>Install 安装 ；</li><li>Usage 用途；</li><li>Badge徽章 - 项目的标准，例： npm 下载量、测试覆盖率、通过 CI 工具持续验证 ；</li><li>Contributing 贡献者名单；</li><li>License 代码许可证。</li></ul><p>这个应该是一个最低配的 README。</p><p>通过这个结构可以让使用者最短时间了解并上手。</p><p>如果扩展一下，让项目介绍更加的丰满，还可以采用以下结构：</p><ul><li>Title；</li><li>Banner；</li><li>Badges；</li><li>Short Description；</li><li>Long Description ；</li><li>Table of Contents；</li><li>Security；</li><li>Background；</li><li>Install；</li><li>Usage；</li><li>Extra Sections；</li><li>API；</li><li>Maintainers；</li><li>Thanks；</li><li>Contributing；</li><li>License 。</li></ul><p>以上，都是给你提供的一个思维框架，在实际运用中可以根据实际情况灵活掌握。</p><p>下面开始 Smarty-UI 的具体编写。</p><h3 id="标题-title" tabindex="-1">标题 Title <a class="header-anchor" href="#标题-title" aria-label="Permalink to &quot;标题 Title&quot;">​</a></h3><p>首先是标题。</p><p>内容就是项目的名字，没什么好说的，关键部分是副标题和表现形式。</p><p>副标题可以很好地解释主题。表现形式上可以考虑一下居中效果。由于 Markdown 中可以使用 html， 所以可以直接使用 html 实现。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2330846c6b234ac1931811345b2390ac~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/smarty-team/smarty-admin/blob/main/assets/logo.jpeg&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:200px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Smarty-Admin-UI&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">五脏俱全的组件库教学模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="banner-头图" tabindex="-1">Banner 头图 <a class="header-anchor" href="#banner-头图" aria-label="Permalink to &quot;Banner 头图&quot;">​</a></h3><p>一个醒目的横幅可以有效提高 README 的颜值。所以可以选一个合适的图片作为横幅。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/390c29a627e545efba79517ba8b1674f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="badges-徽章" tabindex="-1">Badges 徽章 <a class="header-anchor" href="#badges-徽章" aria-label="Permalink to &quot;Badges 徽章&quot;">​</a></h3><p>徽章是一个开源库的品质保证。比如 npm下载量、测试覆盖率、CI运行状况。这些不是普通的字符，每一个徽章都是相应的系统动态生成的，比如 npm 下载量就是由 npm 生成并颁发的。虽然这个可以通过技术手段模拟，但是大家还是要注意自己的素质。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/092e93a4566a4ed68533ebb9e543204f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ad4b82b363348239a74e0d3918ce5fb~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>徽章在 <a href="https://shields.io/" target="_blank" rel="noreferrer">https://shields.io/</a> 中生成。比如： MIT 证书徽章，访问 <a href="https://shields.io/category/license%E3%80%82" target="_blank" rel="noreferrer">https://shields.io/category/license。</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d78cb8f1907e48da80088597a6cfc753~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">![MIT](https://img.shields.io/github/license/smarty-team/smarty-admin?color=red)</span></span></code></pre></div><p>颜色字体等内容可以根据页面需要稍微定制一下，让呈现效果更加美观。比如我把 MIT 定义为红色会和前端有点对比。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89dacfad73764b7790598fbd84eb46b8~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="features-特性" tabindex="-1">Features 特性 <a class="header-anchor" href="#features-特性" aria-label="Permalink to &quot;Features 特性&quot;">​</a></h3><p>这部分可以认为是一个 Description ，也就是具体说明这个库的功能。这部分主要是为了描述项目的重点功能。本项目属于工程化学习，所以我的重点是介绍技术栈，这样大家比较容易了解到通过本项目可以学习到什么。</p><div class="language-Markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">## Features</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">前端工程化演示项目。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基于Vue框架</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 支持JSX与Vue单文件组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jest + Vue3 plugins实现单元测试</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Eslint + Prettier + Husky 语法检查</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 采用Rollup构建</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vitepress + Vercel 文档网站搭建</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基于Action CI 实现持续集成与交付</span></span></code></pre></div><h3 id="install-quick-start-安装-快速指南" tabindex="-1">Install &amp; Quick Start 安装 &amp; 快速指南 <a class="header-anchor" href="#install-quick-start-安装-快速指南" aria-label="Permalink to &quot;Install &amp; Quick Start 安装 &amp; 快速指南&quot;">​</a></h3><p>为了让用户快速上手，这部分一般都会在第一屏出现。普遍有两种方法。</p><p>第一种是直接写到 README 里面。比如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93fd42826fce4c92ab2eacb6f032c1d1~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>Install 安装指南要尽量简洁，目的是为了让用户尽快上手。尽量选择通过 Npm 包和 CDN 直接安装。这样使用者可以尽快感受到项目的效果，有利于推广。</p><p>Quick Start 快速开始也是同样的要求，尽量用最精华的代码让用户感受到项目的强大。</p><p>像本项目这种具备文档网站的项目，更好的方法是将用户引导到网站中去。因为网站有更好的阅读体验，可以呈现更为系统的内容。</p><p>第二种是当有文档网站的时候，显示文档网站链接就可以了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56f972de40d9418db6b2a72eeca792ff~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="license-代码许可证" tabindex="-1">License 代码许可证 <a class="header-anchor" href="#license-代码许可证" aria-label="Permalink to &quot;License  代码许可证&quot;">​</a></h3><p>这部分会引用开源证书链接并且填写上 Copyright 信息。</p><h2 id="复盘" tabindex="-1">复盘 <a class="header-anchor" href="#复盘" aria-label="Permalink to &quot;复盘&quot;">​</a></h2><p>这节课的主要内容是编写一个标准的 README 文档。</p><p>最后留一些思考题帮助大家复习，也欢迎在留言区讨论。</p><ul><li>如何使用 Vercel 部署前端项目？</li><li>Github Page 与 Vercel 的区别 ？</li></ul><p>下节课，我们将给大家讲解如何编写标准的README文档，下节课见。</p>`,60),p=[e];function n(h,k,r,c,o,E){return a(),s("div",null,p)}const u=i(l,[["render",n]]);export{g as __pageData,u as default};
