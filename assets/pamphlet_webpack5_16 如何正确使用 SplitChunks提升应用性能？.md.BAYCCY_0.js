import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.D8Prfz4N.js";const e="/books/assets/73dad47e4d3e45419a9ad3f7ff746fa0~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0._Xt1dvQm.awebp",l="/books/assets/1481f62edb484224aefd7498bb9b871a~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.JcO_kjkd.awebp",p="/books/assets/ae729e4dd408433ea242733ae9913d89~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BnLEjRfV.awebp",t="/books/assets/88d54f6ffcfe44658fddb93c4bd57e95~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.BQ4YGSo4.awebp",h="/books/assets/1a1d537299ed44da947a7dbf03e22a18~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DIR90E95.awebp",o="/books/assets/e6ddb044d1d649a297ec76000bcad3d6~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.I2Esh6zv.awebp",k="/books/assets/e8a66c3358fb42e59660a0640210f359~tplv-k3u1fbpfcp-zoom-in-crop-mark_3024_0_0_0.DEppc4kS.awebp",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/webpack5/16 如何正确使用 SplitChunks提升应用性能？.md","filePath":"pamphlet/webpack5/16 如何正确使用 SplitChunks提升应用性能？.md"}'),d={name:"pamphlet/webpack5/16 如何正确使用 SplitChunks提升应用性能？.md"},c=n('<p>Webpack 默认会将尽可能多的模块代码打包在一起，优点是能减少最终页面的 HTTP 请求数，但缺点也很明显：</p><ol><li>页面初始代码包过大，影响首屏渲染性能；</li><li>无法有效应用浏览器缓存，特别对于 NPM 包这类变动较少的代码，业务代码哪怕改了一行都会导致 NPM 包缓存失效。</li></ol><p>为此，Webpack 提供了 <code>SplitChunksPlugin</code> 插件，专门用于根据产物包的体积、引用次数等做分包优化，规避上述问题，特别适合生产环境使用。</p><p>不过，<code>SplitChunksPlugin</code> 的使用方法比较复杂，我们得从 Chunk 这个概念开始说起。</p><h2 id="深入理解-chunk" tabindex="-1">深入理解 Chunk <a class="header-anchor" href="#深入理解-chunk" aria-label="Permalink to &quot;深入理解 Chunk&quot;">​</a></h2><p>Chunk 是 Webpack 内部一个非常重要的底层设计，用于组织、管理、优化最终产物，在构建流程进入生成(Seal)阶段后：</p><ol><li>Webpack 首先根据 <code>entry</code> 配置创建若干 Chunk 对象；</li><li>遍历构建(Make)阶段找到的所有 Module 对象，同一 Entry 下的模块分配到 Entry 对应的 Chunk 中；</li><li>遇到异步模块则创建新的 Chunk 对象，并将异步模块放入该 Chunk；</li><li>分配完毕后，根据 SplitChunksPlugin 的启发式算法进一步对这些 Chunk 执行<strong>裁剪、拆分、合并、代码调优</strong>，最终调整成运行性能(可能)更优的形态；</li><li>最后，将这些 Chunk 一个个输出成最终的产物(Asset)文件，编译工作到此结束。</li></ol><p><img src="'+e+'" alt="image.png"></p><p>可以看出，Chunk 在构建流程中起着承上启下的关键作用 —— 一方面作为 Module 容器，根据一系列默认 <strong>分包策略</strong> 决定哪些模块应该合并在一起打包；另一方面根据 <code>splitChunks</code> 设定的 <strong>策略</strong> 优化分包，决定最终输出多少产物文件。</p><p><strong>Chunk 分包结果的好坏直接影响了最终应用性能</strong>，Webpack 默认会将以下三种模块做分包处理：</p><ul><li>Initial Chunk：<code>entry</code> 模块及相应子模块打包成 Initial Chunk；</li><li>Async Chunk：通过 <code>import(&#39;./xx&#39;)</code> 等语句导入的异步模块及相应子模块组成的 Async Chunk；</li><li>Runtime Chunk：运行时代码抽离成 Runtime Chunk，可通过 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fentry-context%2F%23dependencies" target="_blank" rel="noreferrer">entry.runtime</a> 配置项实现。</li></ul><p>Runtime Chunk 规则比较简单，本文先不关注，但 Initial Chunk 与 Async Chunk 这种略显粗暴的规则会带来两个明显问题：</p><ol><li><strong>模块重复打包：</strong></li></ol><p>假如多个 Chunk 同时依赖同一个 Module，那么这个 Module 会被不受限制地重复打包进这些 Chunk，例如对于下面的模块关系：</p><p><img src="'+l+'" alt="image.png"></p><p>示例中 <code>main/index</code> 入口(<code>entry</code>)同时依赖于 <code>c</code> 模块，默认情况下 Webpack 不会对此做任何优化处理，只是单纯地将 <code>c</code> 模块同时打包进 <code>main/index</code> 两个 Chunk：</p><p><img src="'+p+`" alt="image.png"></p><ol><li><strong>资源冗余 &amp; 低效缓存：</strong></li></ol><p>Webpack 会将 Entry 模块、异步模块所有代码都打进同一个单独的包，这在小型项目通常不会有明显的性能问题，但伴随着项目的推进，包体积逐步增长可能会导致应用的响应耗时越来越长。归根结底这种将所有资源打包成一个文件的方式存在两个弊端：</p><ul><li><strong>资源冗余</strong>：客户端必须等待整个应用的代码包都加载完毕才能启动运行，但可能用户当下访问的内容只需要使用其中一部分代码</li><li><strong>缓存失效</strong>：将所有资源达成一个包后，所有改动 —— 即使只是修改了一个字符，客户端都需要重新下载整个代码包，缓存命中率极低</li></ul><p>这两个问题都可以通过更科学的分包策略解决，例如：</p><ul><li>将被多个 Chunk 依赖的包分离成独立 Chunk，防止资源重复；</li><li><code>node_modules</code> 中的资源通常变动较少，可以抽成一个独立的包，业务代码的频繁变动不会导致这部分第三方库资源缓存失效，被无意义地重复加载。</li></ul><p>为此，Webpack 专门提供了 <code>SplitChunksPlugin</code> 插件，用于实现更灵活、可配置的分包，提升应用性能。</p><h2 id="splitchunksplugin-简介" tabindex="-1">SplitChunksPlugin 简介 <a class="header-anchor" href="#splitchunksplugin-简介" aria-label="Permalink to &quot;SplitChunksPlugin 简介&quot;">​</a></h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F" target="_blank" rel="noreferrer">SplitChunksPlugin</a> 是 Webpack 4 之后内置实现的最新分包方案，与 Webpack3 时代的 <code>CommonsChunkPlugin</code> 相比，它能够基于一些更灵活、合理的启发式规则将 Module 编排进不同的 Chunk，最终构建出性能更佳，缓存更友好的应用产物。</p><p><code>SplitChunksPlugin</code> 的用法比较抽象，算得上 Webpack 的一个难点，主要能力有：</p><ul><li><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SplitChunksPlugin</span></span></code></pre></div><p>支持根据 Module 路径、Module 被引用次数、Chunk 大小、Chunk 请求数等决定是否对 Chunk 做进一步拆解，这些决策都可以通过</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>optimization.splitChunks</span></span></code></pre></div><p>相应配置项调整定制，基于这些能力我们可以实现：</p><ul><li>单独打包某些特定路径的内容，例如 <code>node_modules</code> 打包为 <code>vendors</code>；</li><li>单独打包使用频率较高的文件；</li></ul></li><li><p><code>SplitChunksPlugin</code> 还提供了 <code>optimization.splitChunks.cacheGroup</code> 概念，用于对不同特点的资源做分组处理，并为这些分组设置更有针对性的分包规则；</p></li><li><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SplitChunksPlugin</span></span></code></pre></div><p>还内置了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>default</span></span></code></pre></div><p>与</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>defaultVendors</span></span></code></pre></div><p>两个</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cacheGroup</span></span></code></pre></div><p>，提供一些开箱即用的分包特性：</p><ul><li><code>node_modules</code> 资源会命中 <code>defaultVendors</code> 规则，并被单独打包；</li><li>只有包体超过 20kb 的 Chunk 才会被单独打包；</li><li>加载 Async Chunk 所需请求数不得超过 30；</li><li>加载 Initial Chunk 所需请求数不得超过 30。</li></ul></li></ul><blockquote><p>提示：这里所说的请求数不能等价对标到 http 资源请求数，下面会细讲。</p></blockquote><p>由于 Webpack4 开始已经内置支持 <code>SplitChunksPlugin</code> ，我们不需要额外安装依赖，直接修改 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Foptimization%2F%23optimizationsplitchunks" target="_blank" rel="noreferrer">optimization.splitChunks</a> 配置项即可实现自定义的分包策略：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>splitChunks</code> 主要有两种类型的配置：</p><ul><li><code>minChunks/minSize/maxInitialRequest</code> 等分包条件，满足这些条件的模块都会被执行分包；</li><li><code>cacheGroup</code> ：用于为特定资源声明特定分包条件，例如可以为 <code>node_modules</code> 包设定更宽松的分包条件。</li></ul><p>下面展开细讲。</p><h2 id="设置分包范围" tabindex="-1">设置分包范围 <a class="header-anchor" href="#设置分包范围" aria-label="Permalink to &quot;设置分包范围&quot;">​</a></h2><p>首先，<code>SplitChunksPlugin</code> 默认情况下只对 Async Chunk 生效，我们可以通过 <code>splitChunks.chunks</code> 调整作用范围，该配置项支持如下值：</p><ul><li>字符串 <code>&#39;all&#39;</code> ：对 Initial Chunk 与 Async Chunk 都生效，建议优先使用该值；</li><li>字符串 <code>&#39;initial&#39;</code> ：只对 Initial Chunk 生效；</li><li>字符串 <code>&#39;async&#39;</code> ：只对 Async Chunk 生效；</li><li>函数 <code>(chunk) =&gt; boolean</code> ：该函数返回 <code>true</code> 时生效；</li></ul><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>设置为 <code>all</code> 效果最佳，此时 Initial Chunk、Async Chunk 都会被 <code>SplitChunksPlugin</code> 插件优化。</p><h2 id="根据-module-使用频率分包" tabindex="-1">根据 Module 使用频率分包 <a class="header-anchor" href="#根据-module-使用频率分包" aria-label="Permalink to &quot;根据 Module 使用频率分包&quot;">​</a></h2><p><code>SplitChunksPlugin</code> 支持按 Module 被 Chunk 引用的次数决定是否分包，借助这种能力我们可以轻易将那些被频繁使用的模块打包成独立文件，减少代码重复。</p><p>用法很简单，只需用 <code>splitChunks.minChunks</code> 配置项设定最小引用次数，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 设定引用次数超过 2 的模块才进行分包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意，这里“被 Chunk 引用次数”并不直接等价于被 <code>import</code> 的次数，而是取决于上游调用者是否被视作 Initial Chunk 或 Async Chunk 处理，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// common.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;common chunk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// async-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./common&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// entry-a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./common&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./async-module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// entry-b.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> common </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./common&#39;</span></span></code></pre></div><p>上例包含四个模块，形成如下模块关系图：</p><p><img src="`+t+`" alt="image.png"></p><p>其中，<code>entry-a</code>、<code>entry-b</code> 分别被视作 Initial Chunk 处理；<code>async-module</code> 被 <code>entry-a</code> 以异步方式引入，因此被视作 Async Chunk 处理。那么对于 <code>common</code> 模块来说，分别被三个不同的 Chunk 引入，此时引用次数为 3，配合下面的配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/entry-a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/entry-b.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><blockquote><p>提示：示例已上传到 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2FTecvan-fe%2Fwebpack-book-samples%2Ftree%2Fmain%2Fsplitchunks-basic" target="_blank" rel="noreferrer">小册仓库</a>。</p></blockquote><p><code>common</code> 模块命中 <code>optimization.splitChunks.minChunks = 2</code> 规则，因此该模块<strong>可能</strong>会被单独分包，最终产物：</p><ul><li><code>entry1.js</code></li><li><code>entry1.js</code></li><li><code>async-module.js</code></li><li><code>common.js</code></li></ul><p>强调一下，上面说的是“<strong>可能</strong>”，<code>minChunks</code> 并不是唯一条件，此外还需要满足诸如 <code>minSize</code>、<code>chunks</code> 等限制条件才会真正执行分包，接着往下看。</p><h2 id="限制分包数量" tabindex="-1">限制分包数量 <a class="header-anchor" href="#限制分包数量" aria-label="Permalink to &quot;限制分包数量&quot;">​</a></h2><p>在 <code>minChunks</code> 基础上，为防止最终产物文件数量过多导致 HTTP 网络请求数剧增，反而降低应用性能，Webpack 还提供了 <code>maxInitialRequest/maxAsyncRequest</code> 配置项，用于限制分包数量：</p><ul><li><code>maxInitialRequest</code>：用于设置 Initial Chunk 最大并行请求数；</li><li><code>maxAsyncRequests</code>：用于设置 Async Chunk 最大并行请求数。</li></ul><blockquote><p>敲重点，&quot;请求数&quot; 这个概念有点复杂：</p></blockquote><p>这里所说的“请求数”，是指加载一个 Chunk 时所需要加载的所有分包数。例如对于一个 Chunk A，如果根据分包规则(如模块引用次数、第三方包)分离出了若干子 Chunk A[¡]，那么加载 A 时，浏览器需要同时加载所有的 A[¡]，此时并行请求数等于 ¡ 个分包加 A 主包，即 ¡+1。</p><blockquote><p>提示：通过 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2Fapi%2Fcompilation-object%2F%23emitasset" target="_blank" rel="noreferrer">emitAssets</a> 等方式直接输出产物文件不在此范畴。</p></blockquote><p>举个例子，对于上例所说的模块关系：</p><p><img src="`+h+'" alt="image.png"></p><p>若 <code>minChunks = 2</code> ，则 <code>common</code> 模块命中 <code>minChunks</code> 规则被独立分包，浏览器请求 <code>entry-a</code> 时，则需要同时请求 <code>common</code> 包，并行请求数为 1 + 1=2。</p><p>而对于下述模块关系：</p><p><img src="'+o+'" alt="image.png"></p><p>若 <code>minChunks = 2</code> ，则 <code>common-1</code> 、<code>common-2</code> 同时命中 <code>minChunks</code> 规则被分别打包，浏览器请求 <code>entry-b</code> 时需要同时请求 <code>common-1</code> 、<code>common-2</code> 两个分包，并行数为 2 + 1 = 3，此时若 <code>maxInitialRequest = 2</code>，则分包数超过阈值，<code>SplitChunksPlugin</code> 会 <strong>放弃 <code>common-1</code>、<code>common-2</code> 中体积较小的分包</strong>。<code>maxAsyncRequest</code> 逻辑与此类似，不在赘述。</p><p>并行请求数关键逻辑总结如下：</p><ul><li>Initial Chunk 本身算一个请求；</li><li>Async Chunk 不算并行请求；</li><li>通过 <code>runtimeChunk</code> 拆分出的 runtime 不算并行请求；</li><li>如果同时有两个 Chunk 满足拆分规则，但是 <code>maxInitialRequests</code>(或 <code>maxAsyncRequest</code>) 的值只能允许再拆分一个模块，那么体积更大的模块会被优先拆解。</li></ul><h2 id="限制分包体积" tabindex="-1">限制分包体积 <a class="header-anchor" href="#限制分包体积" aria-label="Permalink to &quot;限制分包体积&quot;">​</a></h2><p>除上面介绍的 <code>minChunks</code> —— 模块被引用次数，以及 <code>maxXXXRequest</code> —— 包数量，这两个条件外，Webpack 还提供了一系列与 Chunk 大小有关的分包判定规则，借助这些规则我们可以实现当包体过小时直接取消分包 —— 防止产物过&quot;碎&quot;；当包体过大时尝试对 Chunk 再做拆解 —— 避免单个 Chunk 过大。</p><p>这一规则相关的配置项有：</p><ul><li><code>minSize</code>： 超过这个尺寸的 Chunk 才会正式被分包；</li><li><code>maxSize</code>： 超过这个尺寸的 Chunk 会尝试进一步拆分出更小的 Chunk；</li><li><code>maxAsyncSize</code>： 与 <code>maxSize</code> 功能类似，但只对异步引入的模块生效；</li><li><code>maxInitialSize</code>： 与 <code>maxSize</code> 类似，但只对 <code>entry</code> 配置的入口模块生效；</li><li><code>enforceSizeThreshold</code>： 超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 Size 限制。</li></ul><p>那么，结合前面介绍的两种规则，<code>SplitChunksPlugin</code> 的主体流程如下：</p><ol><li><p><code>SplitChunksPlugin</code> 尝试将命中 <code>minChunks</code> 规则的 Module 统一抽到一个额外的 Chunk 对象；</p></li><li><p>判断该 Chunk 是否满足 <code>maxInitialRequests</code> 阈值，若满足则进行下一步；</p></li><li><p>判断该 Chunk 资源的体积是否大于上述配置项</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>minSize</span></span></code></pre></div><p>声明的下限阈值；</p><ul><li>如果体积<strong>小于</strong> <code>minSize</code> 则取消这次分包，对应的 Module 依然会被合并入原来的 Chunk</li><li>如果 Chunk 体积<strong>大于</strong> <code>minSize</code> 则判断是否超过 <code>maxSize</code>、<code>maxAsyncSize</code>、<code>maxInitialSize</code> 声明的上限阈值，如果超过则尝试将该 Chunk 继续分割成更小的部分</li></ul></li></ol><blockquote><p>提示：虽然 <code>maxSize</code> 等阈值规则会产生更多的包体，但缓存粒度会更小，命中率相对也会更高，配合持久缓存与 HTTP2 的多路复用能力，网络性能反而会有正向收益。</p></blockquote><p>以上述模块关系为例：</p><p><img src="'+k+`" alt="image.png"></p><p>若此时 Webpack 配置的 <code>minChunks</code> 大于 2，且 <code>maxInitialRequests</code> 也同样大于 2，如果 <code>common</code> 模块的体积大于上述说明的 <code>minxSize</code> 配置项则分包成功，<code>commont</code> 会被分离为单独的 Chunk，否则会被合并入原来的 3 个 Chunk。</p><blockquote><p>提示：注意，这些条件的优先级顺序为： <code>maxInitialRequest/maxAsyncRequests &lt; maxSize &lt; minSize</code>。而命中 <code>enforceSizeThreshold</code> 阈值的 Chunk 会直接跳过这些条件判断，强制进行分包。</p></blockquote><h2 id="缓存组-cachegroups-简介" tabindex="-1">缓存组 <code>cacheGroups</code> 简介 <a class="header-anchor" href="#缓存组-cachegroups-简介" aria-label="Permalink to &quot;缓存组 \`cacheGroups\` 简介&quot;">​</a></h2><p>上述 <code>minChunks</code>、<code>maxInitialRequest</code>、<code>minSize</code> 都属于分包条件，决定是否对什么情况下对那些 Module 做分包处理。此外， <code>SplitChunksPlugin</code> 还提供了 <code>cacheGroups</code> 配置项用于为不同文件组设置不同的规则，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vendors: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            minSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>示例通过 <code>cacheGroups</code> 属性设置 <code>vendors</code> 缓存组，所有命中 <code>vendors.test</code> 规则的模块都会被归类 <code>vendors</code> 分组，优先应用该组下的 <code>minChunks</code>、<code>minSize</code> 等分包配置。</p><p><code>cacheGroups</code> 支持上述 <code>minSice/minChunks/maxInitialRequest</code> 等条件配置，此外还支持一些与分组逻辑强相关的属性，包括：</p><ul><li><code>test</code>：接受正则表达式、函数及字符串，所有符合 <code>test</code> 判断的 Module 或 Chunk 都会被分到该组；</li><li><code>type</code>：接受正则表达式、函数及字符串，与 <code>test</code> 类似均用于筛选分组命中的模块，区别是它判断的依据是文件类型而不是文件名，例如 <code>type = &#39;json&#39;</code> 会命中所有 JSON 文件；</li><li><code>idHint</code>：字符串型，用于设置 Chunk ID，它还会被追加到最终产物文件名中，例如 <code>idHint = &#39;vendors&#39;</code> 时，输出产物文件名形如 <code>vendors-xxx-xxx.js</code> ；</li><li><code>priority</code>：数字型，用于设置该分组的优先级，若模块命中多个缓存组，则优先被分到 <code>priority</code> 更大的组。</li></ul><p>缓存组的作用在于能为不同类型的资源设置更具适用性的分包规则，一个典型场景是将所有 <code>node_modules</code> 下的模块统一打包到 <code>vendors</code> 产物，从而实现第三方库与业务代码的分离。</p><p>Webpack 提供了两个开箱即用的 <code>cacheGroups</code>，分别命名为 <code>default</code> 与 <code>defaultVendors</code>，默认配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          idHint: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          reuseExistingChunk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          minChunks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        defaultVendors: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          idHint: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          reuseExistingChunk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          priority: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>这两个配置组能帮助我们：</p><ul><li>将所有 <code>node_modules</code> 中的资源单独打包到 <code>vendors-xxx-xx.js</code> 命名的产物</li><li>对引用次数大于等于 2 的模块 —— 也就是被多个 Chunk 引用的模块，单独打包</li></ul><p>开发者也可以将默认分组设置为 false，关闭分组配置，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="配置项与最佳实践" tabindex="-1">配置项与最佳实践 <a class="header-anchor" href="#配置项与最佳实践" aria-label="Permalink to &quot;配置项与最佳实践&quot;">​</a></h2><p>最后，我们再回顾一下 <code>SplitChunksPlugin</code> 支持的配置项：</p><ul><li><code>minChunks</code>：用于设置引用阈值，被引用次数超过该阈值的 Module 才会进行分包处理；</li><li><code>maxInitialRequest/maxAsyncRequests</code>：用于限制 Initial Chunk(或 Async Chunk) 最大并行请求数，本质上是在限制最终产生的分包数量；</li><li><code>minSize</code>： 超过这个尺寸的 Chunk 才会正式被分包；</li><li><code>maxSize</code>： 超过这个尺寸的 Chunk 会尝试继续做分包；</li><li><code>maxAsyncSize</code>： 与 <code>maxSize</code> 功能类似，但只对异步引入的模块生效；</li><li><code>maxInitialSize</code>： 与 <code>maxSize</code> 类似，但只对 <code>entry</code> 配置的入口模块生效；</li><li><code>enforceSizeThreshold</code>： 超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 size 限制；</li><li><code>cacheGroups</code>：用于设置缓存组规则，为不同类型的资源设置更有针对性的分包策略。</li></ul><p>结合这些特性，业界已经总结了许多惯用的最佳分包策略，包括：</p><ul><li><p>针对</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>node_modules</span></span></code></pre></div><p>资源：</p><ul><li>可以将 <code>node_modules</code> 模块打包成单独文件(通过 <code>cacheGroups</code> 实现)，防止业务代码的变更影响 NPM 包缓存，同时建议通过 <code>maxSize</code> 设定阈值，防止 vendor 包体过大；</li><li>更激进的，如果生产环境已经部署 HTTP2/3 一类高性能网络协议，甚至可以考虑将每一个 NPM 包都打包成单独文件，具体实现可查看小册<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub1s.com%2FTecvan-fe%2Fwebpack-book-samples%2Fblob%2F50c9a47ce3%2Fsplitchunks-seperate-npm%2Fwebpack.config.js%23L19-L20" target="_blank" rel="noreferrer">示例</a>；</li></ul></li><li><p>针对业务代码：</p><ul><li>设置 <code>common</code> 分组，通过 <code>minChunks</code> 配置项将使用率较高的资源合并为 Common 资源；</li><li>首屏用不上的代码，尽量以异步方式引入；</li><li>设置 <code>optimization.runtimeChunk</code> 为 <code>true</code>，将运行时代码拆分为独立资源。</li></ul></li></ul><p>不过，现实世界很复杂，同样的方法放在不同场景可能会有完全相反的效果，建议你根据自己项目的实际情况(代码量、基础设施环境)，择优选用上述实践。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Chunk 是 Webpack 实现模块打包的关键设计，Webpack 会首先为 Entry 模块、异步模块、Runtime 模块(取决于配置) 创建 Chunk 容器，之后按照 <code>splitChunks</code> 配置进一步优化、裁剪分包内容。</p><p><code>splitChunks</code> 规则比较复杂，大致上可以分类为：</p><ul><li>规则类：如 <code>minSize/minChunks</code> 等，匹配这些条件的 Module 都会被单独分包；</li><li><code>cacheGroup</code>：可以理解为针对特定资源的次级规则集合。</li></ul><p>实践中，分包策略的好坏直接影响应用的运行性能，常用策略一是单独打包 <code>node_modules</code> 代码(习惯称为 <code>vendor</code>)，二是单独打包被频繁使用的模块(习惯称为 <code>common</code>)。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p><code>SplitChunksPlugin</code> 的用法比较复杂，建议你尝试写一些 demo，组合各种形态的配置值，深入理解配置项背后的隐晦逻辑。</p>`,104),r=[c];function u(E,g,m,y,C,b){return a(),i("div",null,r)}const _=s(d,[["render",u]]);export{v as __pageData,_ as default};
