import{_ as e,c as o,o as c,a2 as d}from"./chunks/framework.D8Prfz4N.js";const m=JSON.parse('{"title":"3.进阶篇：回流重绘","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/3.进阶篇：回流重绘.md","filePath":"pamphlet/玩转css艺术之美/3.进阶篇：回流重绘.md"}'),a={name:"pamphlet/玩转css艺术之美/3.进阶篇：回流重绘.md"},s=d(`<h1 id="_3-进阶篇-回流重绘" tabindex="-1">3.进阶篇：回流重绘 <a class="header-anchor" href="#_3-进阶篇-回流重绘" aria-label="Permalink to &quot;3.进阶篇：回流重绘&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>上一章梳理了浏览器三大核心内容：<strong>渲染引擎</strong>、<strong>渲染过程</strong>、<strong>兼容性</strong>。其中渲染过程里的<strong>回流</strong>和<strong>重绘</strong>是CSS中很重要的概念。了解和认识它们，可编写出性能更好的CSS代码。</p><p>有些同学说，怎么不开发完CSS再找时间优化呢？试问有多少同学开发完一个项目后会拿出空余时间重构或优化你的代码。何必不在编码时对CSS代码进行一次完美的编写呢？接下来隆重介绍本章的两位主角。</p><h3 id="回流" tabindex="-1">回流 <a class="header-anchor" href="#回流" aria-label="Permalink to &quot;回流&quot;">​</a></h3><p><strong>回流</strong>又名<strong>重排</strong>，指<code>几何属性</code>需改变的渲染。但是感觉回流这个词比较高大上，后续统称回流吧。</p><p>可理解成，将整个网页填白，对内容重新渲染一次。只不过以人眼的感官速度去看浏览器回流是不会有任何变化的，若你拥有<code>闪电侠</code>的感官速度去看浏览器回流(<code>实质是将时间调慢</code>)，就会发现每次回流都会将页面清空，再从左上角第一个像素点从左到右从上到下这样一点一点渲染，直至右下角最后一个像素点。每次回流都会呈现该过程，只是感受不到而已。</p><p>渲染树的节点发生改变，影响了该节点的几何属性，导致该节点位置发生变化，此时就会触发浏览器回流并重新生成渲染树。回流意味着节点的几何属性改变，需重新计算并生成渲染树，导致渲染树的全部或部分发生变化。</p><h3 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-label="Permalink to &quot;重绘&quot;">​</a></h3><p><strong>重绘</strong>指更改<code>外观属性</code>而不影响<code>几何属性</code>的渲染。相比回流，重绘在两者中会温和一些，后续谈到的CSS性能优化就会基于该特点展开。</p><p>渲染树的节点发生改变，但是不影响该节点的几何属性。由此可见，回流对浏览器性能的消耗是高于重绘的，而且回流一定会伴随重绘，重绘却不一定伴随回流。</p><p>为何回流一定会伴随重绘呢？整个节点的位置都变了，肯定要重新渲染它的外观属性啊！</p><h3 id="属性分类" tabindex="-1">属性分类 <a class="header-anchor" href="#属性分类" aria-label="Permalink to &quot;属性分类&quot;">​</a></h3><p>以下对一些常用的几何属性和外观属性分类，其实同种分类的属性都有一些共同点，各位同学可自行感受。推荐一个查询CSS属性渲染状态的网站<a href="https://csstriggers.com/" target="_blank" rel="noreferrer">CssTriggers</a>，可查看每个属性在渲染过程中发生了什么影响了什么。</p><ul><li><p><strong>几何属性</strong>：包括布局、尺寸等可用数学几何衡量的属性</p></li><li><ul><li>布局：<code>display</code>、<code>float</code>、<code>position</code>、<code>list</code>、<code>table</code>、<code>flex</code>、<code>columns</code>、<code>grid</code></li><li>尺寸：<code>margin</code>、<code>padding</code>、<code>border</code>、<code>width</code>、<code>height</code></li></ul></li><li><p><strong>外观属性</strong>：包括界面、文字等可用状态向量描述的属性</p></li><li><ul><li>界面：<code>appearance</code>、<code>outline</code>、<code>background</code>、<code>mask</code>、<code>box-shadow</code>、<code>box-reflect</code>、<code>filter</code>、<code>opacity</code>、<code>clip</code></li><li>文字：<code>text</code>、<code>font</code>、<code>word</code></li></ul></li></ul><p>如何理解回流重绘</p><p>有无更好的方法可帮助理解<strong>回流重绘</strong>呢？答案是有的。</p><p>某一天星巴克发行一套很有纪念价值的杯子，男同胞们为了买到心仪的杯子给女友当惊喜礼物，通宵达旦搬张板凳去星巴克门口排队。此时形成的队伍是有序的，毕竟大家都是文明人，不可能随便插队吧，先到先拿，这个道理谁都懂！</p><p>可是总有一些人不按常理出牌，别人排队排得那么辛苦，他一到来就仗着自己有钱有势人多马多，插队到最前面。若他插队成功，那么后面的人都要往后挪一位。此时队伍就要重新往后挪，甚至引发多人斗殴。但是混乱的情况总会被控制下来，此时就得重新排队，而原先的队伍顺序经过这次斗殴就可能不按照原先的队伍顺序排队了。几何属性变了，就要重新排队，这个就是<strong>回流</strong>或<strong>重排</strong>。重新排队啊😂！</p><p>一位漂亮妹纸排队排得久肚子呱呱叫，就与另一位同伴交换，她去买早餐，而这位同伴代替她的位置。各位男同胞可能发现这位妹纸更漂亮了。没错，外观属性改变了，变漂亮了，但是除了妹纸，其余人的位置和顺序都无发生变化，所以肯定不会发生上述重新排队的情况。外观属性变了，但是几何属性没变，这个就是<strong>重绘</strong>。不用重新排队，还有漂亮妹纸看，大家都很乐意🤔！</p><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><p><strong>回流重绘</strong>在操作节点样式时频繁出现，同时也存在很大程度上的性能问题。<code>回流成本比重绘成本高得多</code>，一个节点的回流很有可能导致子节点、兄弟节点或祖先节点的回流。在一些高性能电脑上也许无什么影响，但是回流发生在手机上(<code>明摆说某些安卓手机</code>)，就会<code>减缓加载速度</code>和<code>增加电量消耗</code>。</p><p>在上一章中引出一个定向法则：<strong>回流必定引发重绘，重绘不一定引发回流</strong>，可利用该法则解决一些因为回流重绘而引发的性能问题。在优化性能前，需了解什么情况可能产生性能问题，以下罗列一些常见的情况。</p><ul><li><p>改变窗口大小</p></li><li><p>修改盒模型</p></li><li><p>增删样式</p></li><li><p>重构布局</p></li><li><p>重设尺寸</p></li><li><p>改变字体</p></li><li><p>改动文字</p></li></ul><p>很多同学可能不知，回流重绘其实与浏览器的<strong>事件循环</strong>有关，以下源自对<a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model" target="_blank" rel="noreferrer">HTML文档</a>的理解。</p><ul><li><p>浏览器刷新频率为<code>60Hz</code>，即每<code>16.6ms</code>更新一次</p></li><li><p><code>事件循环</code>执行完成<code>微任务</code></p></li><li><p>判断<code>document</code>是否需更新</p></li><li><p>判断<code>resize/scroll</code>事件是否存在，存在则触发事件</p></li><li><p>判断<code>Media Query</code>是否触发</p></li><li><p>更新动作并发送事件</p></li><li><p>判断<code>document.isFullScreen</code>是否为<code>true</code>(全屏)</p></li><li><p>执行<code>requestAnimationFrame</code>回调</p></li><li><p>执行<code>IntersectionObserver</code>回调</p></li><li><p>更新界面</p></li></ul><p>上述就是浏览器每一帧中可能会做到的事情，若在一帧中有空闲时间，就会执行<code>requestIdleCallback</code>回调。</p><p>回到正题，通过定向法则<strong>回流必定引发重绘，重绘不一定引发回流</strong>可知道，尽量减少回流重绘，就是CSS性能优化中一个很好的指标。</p><p>如何减少和避免回流重绘</p><h5 id="使用transform代替top" tabindex="-1">使用transform代替top <a class="header-anchor" href="#使用transform代替top" aria-label="Permalink to &quot;使用transform代替top&quot;">​</a></h5><p><code>top</code>是几何属性，操作<code>top</code>会改变节点位置从而引发回流，使用<code>transform:translate3d(x,0,0)</code>代替<code>top</code>，只会引发图层重绘，还会间接启动GPU加速，该情况在第12章<strong>变换与动画</strong>中会详细讲解。</p><h5 id="使用visibility-hidden替换display-none" tabindex="-1">使用visibility:hidden替换display:none <a class="header-anchor" href="#使用visibility-hidden替换display-none" aria-label="Permalink to &quot;使用visibility:hidden替换display:none&quot;">​</a></h5><p>笔者从以下四方面对比<code>display:none</code>和<code>visibility:hidden</code>，<code>display:none</code>简称<code>DN</code>，<code>visibility:hidden</code>简称<code>VH</code>。</p><ul><li><p><strong>占位表现</strong></p></li><li><ul><li>DN不占据空间</li><li>VH占据空间</li></ul></li><li><p><strong>触发影响</strong></p></li><li><ul><li>DN触发回流重绘</li><li>VH触发重绘</li></ul></li><li><p><strong>过渡影响</strong></p></li><li><ul><li>DN影响过渡不影响动画</li><li>VH不影响过渡不影响动画</li></ul></li><li><p><strong>株连效果</strong></p></li><li><ul><li>DN后自身及其子节点全都不可见</li><li>VH后自身及其子节点全都不可见但可声明子节点<code>visibility:visible</code>单独显示</li></ul></li></ul><p>两者的<code>占位表现</code>、<code>触发影响</code>和<code>株连效果</code>就能说明<code>VH</code>代替<code>DN</code>的好处，从两者区别中就能找出恰当的答案了。</p><h5 id="避免使用table布局" tabindex="-1">避免使用Table布局 <a class="header-anchor" href="#避免使用table布局" aria-label="Permalink to &quot;避免使用Table布局&quot;">​</a></h5><p><code>牵一发而动全身</code>用在Table布局身上就很适合了，可能很小的一个改动就会造成整个<code>&lt;table&gt;</code>回流，有兴趣的同学可用<code>Chrome Devtools</code>的<code>Performance</code>调试看看，在此就不演示了。</p><p>通常可用<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>和<code>&lt;span&gt;</code>等标签取代<code>&lt;table&gt;</code>系列标签生成表格。</p><h5 id="避免样式节点层级过多" tabindex="-1">避免样式节点层级过多 <a class="header-anchor" href="#避免样式节点层级过多" aria-label="Permalink to &quot;避免样式节点层级过多&quot;">​</a></h5><p>浏览器的<code>CSS解析器</code>解析<code>css文件</code>时，对CSS规则是从右到左匹配查找，样式层级过多会影响回流重绘效率，建议保持CSS规则在<code>3层</code>左右。</p><h5 id="将频繁回流或重绘的节点设置为图层" tabindex="-1">将频繁回流或重绘的节点设置为图层 <a class="header-anchor" href="#将频繁回流或重绘的节点设置为图层" aria-label="Permalink to &quot;将频繁回流或重绘的节点设置为图层&quot;">​</a></h5><p>上一章的<code>渲染过程</code>最后一步，提到将回流重绘生成的图层逐张合并并显示在屏幕上。可将其理解成<code>Photoshop</code>的图层，若不对图层添加关联，图层间是不会互相影响的。同理，在浏览器中设置频繁回流或重绘的节点为一张新图层，那么新图层就能够阻止节点的渲染行为影响别的节点，这张图层里怎样变化都无法影响到其他图层。</p><p>设置新图层有两种方法，将节点设置为<code>&lt;video&gt;</code>或<code>&lt;iframe&gt;</code>，为节点添加<code>will-change</code>。<code>will-change</code>是一个很叼的属性，在第12章<strong>变换与动画</strong>中会详细讲解。</p><h5 id="动态改变类名而不改变样式" tabindex="-1">动态改变类名而不改变样式 <a class="header-anchor" href="#动态改变类名而不改变样式" aria-label="Permalink to &quot;动态改变类名而不改变样式&quot;">​</a></h5><p>不要尝试每次操作DOM去改变节点样式，这样会频繁触发回流。</p><p>更好的方法是使用新的类名预定义节点样式，在执行逻辑操作时收集并确认最终更换的类名集合，在适合时机一次性动态替换原来的类名集合。有点像<code>vue</code>的<code>依赖收集机制</code>，不知这样描述会不会更容易理解。</p><p>各位同学可研究下这个强大的<a href="https://www.runoob.com/jsref/prop-element-classlist.html" target="_blank" rel="noreferrer">classList</a>，它能满足笔者所说的需求。</p><h5 id="避免节点属性值放在循环里当成循环变量" tabindex="-1">避免节点属性值放在循环里当成循环变量 <a class="header-anchor" href="#避免节点属性值放在循环里当成循环变量" aria-label="Permalink to &quot;避免节点属性值放在循环里当成循环变量&quot;">​</a></h5><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for (let i = 0; i &lt; 10000; i++) {</span></span>
<span class="line"><span>    const top = document.getElementById(&quot;css&quot;).style.top;</span></span>
<span class="line"><span>    console.log(top);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>呵呵，每次循环操作DOM都会发生回流，应该在循环外使用变量保存一些不会变化的DOM映射值。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const top = document.getElementById(&quot;css&quot;).style.top;</span></span>
<span class="line"><span>for (let i = 0; i &lt; 10000; i++) {</span></span>
<span class="line"><span>    console.log(top);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h5 id="使用requestanimationframe作为动画速度帧" tabindex="-1">使用requestAnimationFrame作为动画速度帧 <a class="header-anchor" href="#使用requestanimationframe作为动画速度帧" aria-label="Permalink to &quot;使用requestAnimationFrame作为动画速度帧&quot;">​</a></h5><p>动画速度越快，回流次数越多，上述有提到浏览器刷新频率为<code>60Hz</code>，即每<code>16.6ms</code>更新一次，而<code>requestAnimationFrame()</code>正是以<code>16.6ms</code>的速度更新一次。所以可用<code>requestAnimationFrame()</code>代替<code>setInterval()</code>。</p><h3 id="属性排序" tabindex="-1">属性排序 <a class="header-anchor" href="#属性排序" aria-label="Permalink to &quot;属性排序&quot;">​</a></h3><p>在进入属性排序这个话题前，先来看看以下两段CSS代码。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.elem {</span></span>
<span class="line"><span>    width: 200px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    font-size: 20px;</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.elem {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    width: 200px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    background-color: #f66;</span></span>
<span class="line"><span>    font-size: 20px;</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>若不特别指明，可能各位同学觉得这两段代码无异样，顶多就是属性顺序不同。但是仔细观察两段代码，就会发现第一段代码好像无依据地随便排列，而第二段代码好像按照某些规范顺序排列。</p><p><strong>属性排序</strong>指按照预设规范排列CSS属性。提供一个预设的约定规范，依据该规范以一定的顺序排列所有属性。</p><p>曾经笔者也是随机排列属性顺序，想到什么写什么，反正能实现就行。但是反过来看，随意真的好吗，每次维护代码都需反复确认某个属性是否已经存在，混乱的属性排序让笔者有时无法在脑海里构思出更好的排版。所以笔者下意识去了解和认识属性排序，利用一些约定规范合理管理我的CSS代码。</p><p>曾经有一个著名的CSS网站<a href="https://css-tricks.com/" target="_blank" rel="noreferrer">CSSTricks</a>做了一份属性排序的<a href="https://css-tricks.com/poll-results-how-do-you-order-your-css-properties" target="_blank" rel="noreferrer">调查问卷</a>，调查结果如下。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607318013132-ee13f3c0-5a94-4838-a3c5-47fb08076e4d.png" alt="img"></p><ul><li><p><strong>A</strong>：随意排序占<code>39%</code></p></li><li><p><strong>B</strong>：按照类型排序占<code>45%</code></p></li><li><p><strong>C</strong>：按照单行代码长度排序占<code>2%</code></p></li><li><p><strong>D</strong>：按照属性字母排序占<code>14%</code></p></li></ul><p>发现<strong>B选项</strong>占比最多，很可惜，这份调查问卷都是针对国外前端开发者。所以笔者在自己的微信群里发起了这个调查问卷，结果还是<strong>B选项</strong>占比最多。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2985494/1607318013073-92d932d1-31c3-4efd-b523-ea6c21469087.jpeg" alt="img"></p><p>由于人数过少，怕可信度不高，所以笔者又去Github上随机寻找200个国内项目，通过一个周末的时间细心对比了所有<code>css文件</code>，统计出以下结果。</p><ul><li><p><strong>A</strong>：随意排序占<code>38%</code></p></li><li><p><strong>B</strong>：按照类型排序占<code>58%</code></p></li><li><p><strong>C</strong>：按照长度排序占<code>1%</code></p></li><li><p><strong>D</strong>：按照字母排序占<code>3%</code></p></li></ul><p>结果还是<strong>B选项</strong>占比最多，不过这也说明不了什么问题。毕竟CSS编码的灵活性比JS编码更高，随意也是一件不错的事情。可能就是在维护代码时比较眼花缭乱，问了一位编码很随意的同事(每次开发项目时都把预设的<code>Lint</code>关掉，搞到每次<code>Commit</code>代码都手忙脚乱)，他如实说出了随便排列属性顺序经常会重复编写某些属性，导致属性冗余。</p><p>其实属性排序有很多优点，笔者着重罗列一些。</p><ul><li><p>突出CSS艺术之美</p></li><li><p>防止属性重复编写</p></li><li><p>可快速定位到问题代码</p></li><li><p>可快速在脑海里构思出节点</p></li><li><p>可锻炼无视图架构页面能力</p></li><li><p>提高代码的可读性和可维护性</p></li></ul><p>大部分前端开发者都会给属性做排序，可见业内大部分人对属性排序持有肯定的态度，只是在排序方式上会有一定的分歧。<code>按照长度排序</code>和<code>按照字母排序</code>是比较简单易用的排序方式，但是忽略了属性间的关联性。而<code>按照类型排序</code>又会分为很多种，主要还是围绕着<code>盒模型</code>。</p><ul><li><p><strong>按照类型排序</strong></p></li><li><p><strong>按照长度排序</strong></p></li><li><p><strong>按照字母排序</strong></p></li></ul><p>属性排序并不会影响样式的功能和性能，只是让代码看起来更简洁和规范。</p><h5 id="想法" tabindex="-1">想法 <a class="header-anchor" href="#想法" aria-label="Permalink to &quot;想法&quot;">​</a></h5><p>笔者有一个想法，就是按照<code>回流重绘</code>的原理，涉及到<code>几何属性</code>和<code>外观属性</code>，结合<code>盒模型规范</code>和<code>从外到里</code>进行属性排序。综合太极图的哲学思想，将一些回流的几何属性排在最前面，毕竟这些属性决定了节点的布局、尺寸等和本质有关的状态，有了这些状态才能派生出节点更多的外观属性，逐一构成完整的节点。</p><p>好比一座摩天大楼的构筑过程，从打桩(<code>存在</code>)、搭设(<code>布局</code>)、主体(<code>尺寸</code>)、砌体(<code>界面</code>)、装修(<code>文字</code>)、装潢(<code>交互</code>)到验收(<code>生成一个完整的节点</code>)，每一步都基于前一步作为基础才能继续下去。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>太极图哲学思想：太极生两仪，两仪生四象，四象生八卦，从无极生太极开始，一直通过物质派生而构筑一个完整的立体结构，这一过程又显然是一个立体并包含位次顺序的四维关系</span></span></code></pre></div><h5 id="理解" tabindex="-1">理解 <a class="header-anchor" href="#理解" aria-label="Permalink to &quot;理解&quot;">​</a></h5><p>假设编写一个节点样式，先声明<code>display</code>还是<code>width</code>呢？<code>display</code>决定了该节点的开始状态，是<code>none</code>，还是<code>block</code>，还是<code>inline</code>，还是其他。若先声明<code>width</code>，万一后续声明<code>display:inline</code>表示该节点是行内元素，行内元素无法显式声明宽高，那么<code>width</code>不是白白浪费了？所以推荐声明<code>display</code>在首位，毕竟它声明了该节点最开始的状态，<code>有还是无</code>。</p><h5 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h5><p>根据上述想法和理解，笔者将属性排序按照<code>布局 → 尺寸 → 界面 → 文字 → 交互</code>的方式顺序定义。把交互属性放到后面是因为<code>transform</code>和<code>animation</code>会让节点重新生成新图层，上述有提到新图层不会对其他图层造成影响。</p><p>布局属性</p><ul><li><p>显示：<code>display</code> <code>visibility</code></p></li><li><p>溢出：<code>overflow</code> <code>overflow-x</code> <code>overflow-y</code></p></li><li><p>浮动：<code>float</code> <code>clear</code></p></li><li><p>定位：<code>position</code> <code>left</code> <code>right</code> <code>top</code> <code>bottom</code> <code>z-index</code></p></li><li><p>列表：<code>list-style</code> <code>list-style-type</code> <code>list-style-position</code> <code>list-style-image</code></p></li><li><p>表格：<code>table-layout</code> <code>border-collapse</code> <code>border-spacing</code> <code>caption-side</code> <code>empty-cells</code></p></li><li><p>弹性：<code>flex-flow</code> <code>flex-direction</code> <code>flex-wrap</code> <code>justify-content</code> <code>align-content</code> <code>align-items</code> <code>align-self</code> <code>flex</code> <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code> <code>order</code></p></li><li><p>多列：<code>columns</code> <code>column-width</code> <code>column-count</code> <code>column-gap</code> <code>column-rule</code> <code>column-rule-width</code> <code>column-rule-style</code> <code>column-rule-color</code> <code>column-span</code> <code>column-fill</code> <code>column-break-before</code> <code>column-break-after</code> <code>column-break-inside</code></p></li><li><p>格栅：<code>grid-columns</code> <code>grid-rows</code></p></li></ul><p>尺寸属性</p><ul><li><p>模型：<code>box-sizing</code></p></li><li><p>边距：<code>margin</code> <code>margin-left</code> <code>margin-right</code> <code>margin-top</code> <code>margin-bottom</code></p></li><li><p>填充：<code>padding</code> <code>padding-left</code> <code>padding-right</code> <code>padding-top</code> <code>padding-bottom</code></p></li><li><p>边框：<code>border</code> <code>border-width</code> <code>border-style</code> <code>border-color</code> <code>border-colors</code> <code>border-[direction]-&lt;param&gt;</code></p></li><li><p>圆角：<code>border-radius</code> <code>border-top-left-radius</code> <code>border-top-right-radius</code> <code>border-bottom-left-radius</code> <code>border-bottom-right-radius</code></p></li><li><p>框图：<code>border-image</code> <code>border-image-source</code> <code>border-image-slice</code> <code>border-image-width</code> <code>border-image-outset</code> <code>border-image-repeat</code></p></li><li><p>大小：<code>width</code> <code>min-width</code> <code>max-width</code> <code>height</code> <code>min-height</code> <code>max-height</code></p></li></ul><p>界面属性</p><ul><li><p>外观：<code>appearance</code></p></li><li><p>轮廓：<code>outline</code> <code>outline-width</code> <code>outline-style</code> <code>outline-color</code> <code>outline-offset</code> <code>outline-radius</code> <code>outline-radius-[direction]</code></p></li><li><p>背景：<code>background</code> <code>background-color</code> <code>background-image</code> <code>background-repeat</code> <code>background-repeat-x</code> <code>background-repeat-y</code> <code>background-position</code> <code>background-position-x</code> <code>background-position-y</code> <code>background-size</code> <code>background-origin</code> <code>background-clip</code> <code>background-attachment</code> <code>bakground-composite</code></p></li><li><p>遮罩：<code>mask</code> <code>mask-mode</code> <code>mask-image</code> <code>mask-repeat</code> <code>mask-repeat-x</code> <code>mask-repeat-y</code> <code>mask-position</code> <code>mask-position-x</code> <code>mask-position-y</code> <code>mask-size</code> <code>mask-origin</code> <code>mask-clip</code> <code>mask-attachment</code> <code>mask-composite</code> <code>mask-box-image</code> <code>mask-box-image-source</code> <code>mask-box-image-width</code> <code>mask-box-image-outset</code> <code>mask-box-image-repeat</code> <code>mask-box-image-slice</code></p></li><li><p>滤镜：<code>box-shadow</code> <code>box-reflect</code> <code>filter</code> <code>mix-blend-mode</code> <code>opacity</code>,</p></li><li><p>裁剪：<code>object-fit</code> <code>clip</code></p></li><li><p>事件：<code>resize</code> <code>zoom</code> <code>cursor</code> <code>pointer-events</code> <code>touch-callout</code> <code>user-modify</code> <code>user-focus</code> <code>user-input</code> <code>user-select</code> <code>user-drag</code></p></li></ul><p>文字属性</p><ul><li><p>模式：<code>line-height</code> <code>line-clamp</code> <code>vertical-align</code> <code>direction</code> <code>unicode-bidi</code> <code>writing-mode</code> <code>ime-mode</code></p></li><li><p>文本：<code>text-overflow</code> <code>text-decoration</code> <code>text-decoration-line</code> <code>text-decoration-style</code> <code>text-decoration-color</code> <code>text-decoration-skip</code> <code>text-underline-position</code> <code>text-align</code> <code>text-align-last</code> <code>text-justify</code> <code>text-indent</code> <code>text-stroke</code> <code>text-stroke-width</code> <code>text-stroke-color</code> <code>text-shadow</code> <code>text-transform</code> <code>text-size-adjust</code></p></li><li><p>字体：<code>src</code> <code>font</code> <code>font-family</code> <code>font-style</code> <code>font-stretch</code> <code>font-weight</code> <code>font-variant</code> <code>font-size</code> <code>font-size-adjust</code> <code>color</code></p></li><li><p>内容：<code>overflow-wrap</code> <code>word-wrap</code> <code>word-break</code> <code>word-spacing</code> <code>letter-spacing</code> <code>white-space</code> <code>caret-color</code> <code>tab-size</code> <code>content</code> <code>counter-increment</code> <code>counter-reset</code> <code>quotes</code> <code>page</code> <code>page-break-before</code> <code>page-break-after</code> <code>page-break-inside</code></p></li></ul><p>交互属性</p><ul><li><p>模式：<code>will-change</code> <code>perspective</code> <code>perspective-origin</code> <code>backface-visibility</code></p></li><li><p>变换：<code>transform</code> <code>transform-origin</code> <code>transform-style</code></p></li><li><p>过渡：<code>transition</code> <code>transition-property</code> <code>transition-duration</code> <code>transition-timing-function</code> <code>transition-delay</code></p></li><li><p>动画：<code>animation</code> <code>animation-name</code> <code>animation-duration</code> <code>animation-timing-function</code> <code>animation-delay</code> <code>animation-iteration-count</code> <code>animation-direction</code> <code>animation-play-state</code> <code>animation-fill-mode</code></p></li></ul><p>在此已经整合了95%的属性，可满足95%的属性排序。其他未列入的属性，可根据自身使用习惯添加。当然笔者的属性分类只提供参考。</p><h5 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h5><p>纯粹靠在编码过程中按照约定规范排列属性肯定是有难度的，也不方便频繁修改代码。每次编码时都记住这些属性排序估计也挺费脑力的，这么多属性，肯定使用工具自动化处理啊！推荐一个自动排列CSS属性的网站<a href="https://csscomb.com/" target="_blank" rel="noreferrer">Csscomb</a>，在<code>学前准备</code>那章已经安装了<code>VSCode</code>的<code>Csscomb</code>，接下来就配置<code>一键排序</code>。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>该插件貌似只有存档，主软件包已经无维护者了，后续估计也不会再更新</span></span></code></pre></div><p>官网内容已经不复存在，以前是一步一步显示配置再选择适合自己的配置，最终生成一个<code>json文件</code>。配置详情请戳<a href="https://github.com/csscomb/csscomb.js/blob/dev/doc/options.md" target="_blank" rel="noreferrer">这里</a>，以下的全局配置也是依据文档处理的，当然你也可对工作区设置。</p><p>打开<code>VSCode</code>，<code>Window系统</code>选择<code>ctrl+, → 用户 → 右上角第二个图标(打开设置)</code>，<code>Mac系统</code>选择<code>cmd+, → 用户 → 右上角第二个图标(打开设置)</code>，在<code>json文件</code>里插入以下配置。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;csscomb.formatOnSave&quot;: true, // 保存代码时自动格式化</span></span>
<span class="line"><span>    &quot;csscomb.preset&quot;: {</span></span>
<span class="line"><span>        &quot;always-semicolon&quot;: true, // 分号结尾</span></span>
<span class="line"><span>        &quot;block-indent&quot;: &quot;\\t&quot;, // 换行格式</span></span>
<span class="line"><span>        &quot;color-case&quot;: &quot;lower&quot;, // 颜色格式</span></span>
<span class="line"><span>        &quot;color-shorthand&quot;: true, // 颜色缩写</span></span>
<span class="line"><span>        &quot;element-case&quot;: &quot;lower&quot;, // 元素格式</span></span>
<span class="line"><span>        // &quot;eof-newline&quot;: false, // 结尾空行</span></span>
<span class="line"><span>        &quot;leading-zero&quot;: false, // 保留前导零位</span></span>
<span class="line"><span>        // &quot;lines-between-rulesets&quot;: 0, // 规则间隔行数</span></span>
<span class="line"><span>        &quot;quotes&quot;: &quot;double&quot;, // 引号格式</span></span>
<span class="line"><span>        &quot;remove-empty-rulesets&quot;: true, // 剔除空规则</span></span>
<span class="line"><span>        &quot;space-between-declarations&quot;: &quot;\\n&quot;, // 属性换行</span></span>
<span class="line"><span>        &quot;space-before-closing-brace&quot;: &quot;\\n&quot;, // 后花括号前插入</span></span>
<span class="line"><span>        &quot;space-after-colon&quot;: &quot; &quot;, // 冒号后插入</span></span>
<span class="line"><span>        &quot;space-before-colon&quot;: &quot;&quot;, // 冒号前插入</span></span>
<span class="line"><span>        &quot;space-after-combinator&quot;: &quot; &quot;, // 大于号后插入</span></span>
<span class="line"><span>        &quot;space-before-combinator&quot;: &quot; &quot;, // 大于号前插入</span></span>
<span class="line"><span>        &quot;space-after-opening-brace&quot;: &quot;\\n&quot;, // 前花括号后插入</span></span>
<span class="line"><span>        &quot;space-before-opening-brace&quot;: &quot; &quot;, // 前花括号前插入</span></span>
<span class="line"><span>        &quot;space-after-selector-delimiter&quot;: &quot;\\n&quot;, // 逗号后插入</span></span>
<span class="line"><span>        &quot;space-before-selector-delimiter&quot;: &quot;&quot;, // 逗号前插入</span></span>
<span class="line"><span>        &quot;strip-spaces&quot;: true, // 剔除空格</span></span>
<span class="line"><span>        &quot;tab-size&quot;: true, // 缩进大小</span></span>
<span class="line"><span>        &quot;unitless-zero&quot;: true, // 剔除零单位</span></span>
<span class="line"><span>        &quot;vendor-prefix-align&quot;: false, // 前缀缩进</span></span>
<span class="line"><span>        &quot;sort-order&quot;: [] // 属性排序</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>sort-order</code>是一个数组，由于属性太多就不一一插入了，按照上述分类好的排序逐个插入即可，<code>&quot;sort-order&quot;:[&quot;display&quot;, &quot;visibility&quot;, ...]</code>。配置详情请戳<a href="https://github.com/JowayYoung/idea-css/blob/master/vscode/settings.json" target="_blank" rel="noreferrer">这里</a>。</p><p>配置完成后，若觉得每次保存时格式化CSS代码会影响编辑器性能，可为<code>Csscomb</code>配置快捷键，在有需时再格式化CSS代码。<code>Window系统</code>选择<code>ctrl+K+S → 用户 → 右上角第一个图标(打开键盘快捷方式)</code>，<code>Mac系统</code>选择<code>cmd+K+S → 用户 → 右上角第一个图标(打开键盘快捷方式)</code>，在<code>json文件</code>里插入以下配置。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[{</span></span>
<span class="line"><span>    &quot;key&quot;: &quot;ctrl+alt+c&quot;, // &quot;cmd+alt+c&quot;</span></span>
<span class="line"><span>    &quot;command&quot;: &quot;csscomb.execute&quot;</span></span>
<span class="line"><span>}]</span></span></code></pre></div><p>全选代码或选择局部代码，执行<code>ctrl/cmd+alt+c</code>，自动格式化代码且自动排列属性，一个字，爽🤔！配置详情请戳<a href="https://github.com/JowayYoung/idea-css/blob/master/vscode/keybindings.json" target="_blank" rel="noreferrer">这里</a>。</p>`,101),n=[s];function t(i,l,p,r,u,g){return c(),o("div",null,n)}const b=e(a,[["render",t]]);export{m as __pageData,b as default};
