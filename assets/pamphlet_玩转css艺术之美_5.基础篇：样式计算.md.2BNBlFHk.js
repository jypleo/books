import{_ as e,c as t,o as d,a2 as o}from"./chunks/framework.D8Prfz4N.js";const m=JSON.parse('{"title":"5.基础篇：样式计算","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/5.基础篇：样式计算.md","filePath":"pamphlet/玩转css艺术之美/5.基础篇：样式计算.md"}'),s={name:"pamphlet/玩转css艺术之美/5.基础篇：样式计算.md"},n=o(`<h1 id="_5-基础篇-样式计算" tabindex="-1">5.基础篇：样式计算 <a class="header-anchor" href="#_5-基础篇-样式计算" aria-label="Permalink to &quot;5.基础篇：样式计算&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>有试过样式覆盖导致排版出问题或布局时不知使用什么长度单位声明属性吗？这些问题应该都是比较常见的问题，笔者有位同事遇到样式覆盖的问题时一言不合使用<code>!important</code>暴力解决，这样真的好吗？</p><h3 id="优先级别" tabindex="-1">优先级别 <a class="header-anchor" href="#优先级别" aria-label="Permalink to &quot;优先级别&quot;">​</a></h3><p>样式覆盖的根本原因是未处理好规则间的优先级别，虽然使用<code>!important</code>能解决问题，但是不能什么情况都由<code>!important</code>暴力解决。</p><p>为何样式需优先级别呢？当创建的样式越来越复杂时，一个节点的样式将会受到越来越多的影响，这种影响可能来自周围节点也可能来自自身。通过相关规范分配给规则一个权重，那么样式可按照权重计算，呈现页面最终的效果。</p><p>从以下几方面了解优先级别，相信能更好把握优先级别的使用场景。</p><h5 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h5><ul><li><p>使用<code>就近原则</code></p></li><li><p><code>继承样式</code>的优先级别最低</p></li><li><p><code>!important样式</code>的优先级别最高，若冲突则重新计算</p></li></ul><h5 id="权重" tabindex="-1">权重 <a class="header-anchor" href="#权重" aria-label="Permalink to &quot;权重&quot;">​</a></h5><p>直观权重</p><ul><li><p><strong>10000</strong>：<code>!important</code></p></li><li><p><strong>1000</strong>：<code>内联样式</code>、<code>外联样式</code></p></li><li><p><strong>100</strong>：<code>ID选择器</code></p></li><li><p><strong>10</strong>：<code>类选择器</code>、<code>伪类选择器</code>、<code>属性选择器</code></p></li><li><p><strong>1</strong>：<code>元素选择器</code>、<code>伪元素选择器</code></p></li><li><p><strong>0</strong>：<code>通配选择器</code>、<code>后代选择器</code>、<code>兄弟选择器</code></p></li></ul><p>微观权重</p><ul><li><p><strong>1,0,0,0,0</strong>：<code>!important</code></p></li><li><p><strong>0,1,0,0,0</strong>：<code>内联样式</code>、<code>外联样式</code></p></li><li><p><strong>0,0,1,0,0</strong>：<code>ID选择器</code></p></li><li><p><strong>0,0,0,1,0</strong>：<code>类选择器</code>、<code>伪类选择器</code>、<code>属性选择器</code></p></li><li><p><strong>0,0,0,0,1</strong>：<code>元素选择器</code>、<code>伪元素选择器</code></p></li><li><p><strong>0,0,0,0,0</strong>：<code>通配选择器</code>、<code>后代选择器</code>、<code>兄弟选择器</code></p></li></ul><p>总体来说，直观权重和微观权重只是表达方式不同，实际意义还是一致的，使用公式可表达成这样。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>!important &gt; 内联样式 = 外联样式 &gt; ID选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 元素选择器 = 伪元素选择器 &gt; 通配选择器 = 后代选择器 = 兄弟选择器</span></span></code></pre></div><h5 id="计算" tabindex="-1">计算 <a class="header-anchor" href="#计算" aria-label="Permalink to &quot;计算&quot;">​</a></h5><p>优先级别相同的规则使用最后出现的规则</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.input-box {</span></span>
<span class="line"><span>    color: #f66;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>:focus {</span></span>
<span class="line"><span>    color: #66f;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[type=text] {</span></span>
<span class="line"><span>    color: #f90;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>虽然<code>类选择器</code>、<code>伪类选择器</code>和<code>属性选择器</code>三者的优先级别相同，但是最后出现的规则其优先级别最高，所以<code>&lt;input&gt;</code>最终会显示<code>#f90</code>。</p><p>优先级别无视节点在DOM树中的距离</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>html h1 {</span></span>
<span class="line"><span>    color: #f66;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>body h1 {</span></span>
<span class="line"><span>    color: #66f;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>虽然<code>&lt;html&gt;</code>包含着<code>&lt;body&gt;</code>，但是依据就近原则，所以<code>&lt;h1&gt;</code>最终会显示<code>#66f</code>。</p><p>不同规则作用于相同节点使用优先级别最高的规则</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#bruce {</span></span>
<span class="line"><span>    color: #f66;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[id=bruce] {</span></span>
<span class="line"><span>    color: #66f;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>虽然两者规则都作用于ID为bruce的<code>&lt;div&gt;</code>，但是<code>ID选择器</code>的优先级比<code>属性选择器</code>高，所以<code>&lt;div&gt;</code>最终会显示<code>#f66</code>。</p><p>:not()不参与优先级别的计算</p><p><code>:not()</code>在优先级别计算中不会被看成<code>伪类</code>，但是会把<code>:not()</code>里的选择器当作普通选择器计数。简单来说就是忽略<code>:not()</code>，其他伪类照常参与优先级别计算。</p><h5 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h5><ul><li><p>规则的权值不同时，权值高的规则优先</p></li><li><p>规则的权值相同时，后定义的规则优先</p></li><li><p>属性后面追加<code>!important</code>时，规则无条件绝对优先</p></li></ul><h3 id="长度单位" tabindex="-1">长度单位 <a class="header-anchor" href="#长度单位" aria-label="Permalink to &quot;长度单位&quot;">​</a></h3><p>粗糙的干活可能只需<code>px</code>和<code>%</code>两个长度单位即可，随着终端设备分辨率的多样性，CSS衍生出越来越多的长度单位，灵活结合这些长度单位能为页面的布局方案提供更多可能性。</p><table tabindex="0"><thead><tr><th>单位</th><th>定义</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>px</strong></td><td>像素</td><td><code>绝对单位</code></td><td>-</td></tr><tr><td><strong>pt</strong></td><td>点</td><td><code>绝对单位</code></td><td><code>1pt = 1/72in</code></td></tr><tr><td><strong>pc</strong></td><td>派</td><td><code>绝对单位</code></td><td><code>1pc = 12pt</code></td></tr><tr><td><strong>mm</strong></td><td>毫米</td><td><code>绝对单位</code></td><td>-</td></tr><tr><td><strong>cm</strong></td><td>厘米</td><td><code>绝对单位</code></td><td>-</td></tr><tr><td><strong>in</strong></td><td>英寸</td><td><code>绝对单位</code></td><td><code>1in = 96px = 2.54cm</code></td></tr><tr><td><strong>%</strong></td><td>百分比</td><td><code>相对单位</code></td><td>相对父节点，宽度对应，高度不一定对应</td></tr><tr><td><strong>em</strong></td><td>M的宽度</td><td><code>相对单位</code></td><td>相对当前节点字体</td></tr><tr><td><strong>rem</strong></td><td>M的宽度</td><td><code>相对单位</code></td><td>相对根结点字体</td></tr><tr><td><strong>ch</strong></td><td>0的宽度</td><td><code>相对单位</code></td><td>相对当前节点字体</td></tr><tr><td><strong>ex</strong></td><td>x的宽度</td><td><code>相对单位</code></td><td>相对当前节点字体</td></tr><tr><td><strong>vw</strong></td><td>1%视窗宽度</td><td><code>相对单位</code></td><td>相对视窗</td></tr><tr><td><strong>vh</strong></td><td>1%视窗高度</td><td><code>相对单位</code></td><td>相对视窗</td></tr><tr><td><strong>vmin</strong></td><td>vw/vh最小者</td><td><code>相对单位</code></td><td>相对视窗</td></tr><tr><td><strong>vmax</strong></td><td>vw/vh最大者</td><td><code>相对单位</code></td><td>相对视窗</td></tr></tbody></table><p>这么多单位，到底如何区别呢？首先要明确一点，那就是<strong>屏幕分辨率</strong>。</p><p><strong>屏幕分辨率</strong>指横纵向上的像素点数，单位是<code>px</code>。<code>屏幕分辨率</code>确定计算机屏幕上能显示多少信息的，以水平和垂直像素衡量。屏幕尺寸一致的情况下，<code>屏幕分辨率</code>越低在屏幕上显示的像素就越少，单个像素尺寸也比较大，<code>屏幕分辨率</code>越高在屏幕上显示的像素越多，单个像素尺寸也比较小。</p><p><code>屏幕分辨率</code>就是屏幕上显示的像素个数，分辨率<code>1920×1080</code>意味着水平方向含有<code>1920</code>个像素数，垂直方向含有<code>1080</code>个像素数。屏幕尺寸一致的情况下，<code>屏幕分辨率</code>越高，显示效果就越细腻。这也是为何<code>iPhone</code>经常亮瞎眼睛的原因。</p><p>所以在同一个网页里，以<code>px</code>作为长度单位时，在不同<code>屏幕分辨率</code>下显示的大小是不同的。在低<code>屏幕分辨率</code>下像素比较大，显示的页面元素也偏大偏模糊。实际上，所有单位无论是<code>绝对单位</code>还是<code>相对单位</code>，最终都是转化为<code>px</code>在屏幕上显示。因此在设计和开发过程中都以<code>px</code>为准。</p><p>em/rem区别</p><p><code>em</code>和<code>rem</code>是移动端布局上常用的长度单位，两者的后缀都一致。<code>rem</code>全称是<code>root em</code>，意思是相对根节点作为参考的长度单位。</p><ul><li><strong>em</strong>：当前节点字体宽度，准确来说是一个M的宽度</li><li><strong>rem</strong>：默认字体宽度，准确来说是一个M的宽度</li></ul><p>两者区别在于：<strong>em相对父节点，rem相对根节点</strong>。<code>em</code>以当前节点字体宽度作为参考，<code>rem</code>以根节点<code>&lt;html&gt;</code>字体宽度作为参考，默认是<code>16px</code>。很多同学错误地以为<code>em</code>是根据父节点作为参考的，实际上是当前节点继承了父节点的属性后产生的错觉。</p><p><code>em</code>和<code>rem</code>都是很灵活且可扩展的长度单位，由浏览器转换为<code>px</code>，具体取决于设计图中的字体大小。</p><p>针对移动端，笔者通常会结合JS依据屏幕宽度与设计图宽度的比例动态声明<code>&lt;html&gt;</code>的<code>font-size</code>，以<code>rem</code>为长度单位声明所有节点的几何属性，这样就能做到大部分移动设备的页面兼容，兼容出入比较大的地方再通过<code>媒体查询</code>做特别处理。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function AutoResponse(width = 750) {</span></span>
<span class="line"><span>    const target = document.documentElement;</span></span>
<span class="line"><span>    if (target.clientWidth &gt;= 600) {</span></span>
<span class="line"><span>        target.style.fontSize = &quot;80px&quot;;</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        target.style.fontSize = target.clientWidth / width * 100 + &quot;px&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>AutoResponse();</span></span></code></pre></div><p>前提还需在<code>&lt;html&gt;</code>中声明以下代码，阻止用户缩放屏幕。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1&quot;&gt;</span></span></code></pre></div><p>视窗比例单位</p><p>在CSS3中增加了与<code>viewport</code>相关的四个长度单位，随着时间推移，目前大部分浏览器对这四个长度单位都有比较好的兼容，这也是未来最建议在伸缩方案中使用的长度单位。</p><ul><li><p><code>1vw</code>表示<code>1%</code>视窗宽度</p></li><li><p><code>1vh</code>表示<code>1%</code>视窗高度</p></li><li><p><code>1vmin</code>表示<code>1%</code>视窗宽度和<code>1%</code>视窗高度中最小者</p></li><li><p><code>1vmax</code>表示<code>1%</code>视窗宽度和<code>1%</code>视窗高度中最大者</p></li></ul><p>视窗宽高在JS中分别对应<code>window.innerWidth</code>和<code>window.innerHeight</code>。若不考虑低版本浏览器的兼容，完全可用一行CSS代码秒杀所有移动端的伸缩方案。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* 基于UI width=750px DPR=2的页面 */</span></span>
<span class="line"><span>html {</span></span>
<span class="line"><span>    font-size: calc(100vw / 7.5);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这是<code>calc()</code>的一个神操作，在第7章<strong>函数计算</strong>会详细讲解<code>calc()</code>怎么玩。这行CSS代码就留个给位同学思考，为何这样处理能，细心的同学可能发现这段代码可代替上述那段JS代码。</p>`,52),a=[n];function c(p,l,i,r,h,g){return d(),t("div",null,a)}const b=e(s,[["render",c]]);export{m as __pageData,b as default};
