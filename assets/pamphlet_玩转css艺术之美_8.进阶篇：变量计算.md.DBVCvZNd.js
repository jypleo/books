import{_ as n,c as s,o as a,a2 as p}from"./chunks/framework.D8Prfz4N.js";const m=JSON.parse('{"title":"8.进阶篇：变量计算","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/8.进阶篇：变量计算.md","filePath":"pamphlet/玩转css艺术之美/8.进阶篇：变量计算.md"}'),e={name:"pamphlet/玩转css艺术之美/8.进阶篇：变量计算.md"},l=p(`<h1 id="_8-进阶篇-变量计算" tabindex="-1">8.进阶篇：变量计算 <a class="header-anchor" href="#_8-进阶篇-变量计算" aria-label="Permalink to &quot;8.进阶篇：变量计算&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>在重构个人官网过程中，不知为何突然喜欢用上<code>CSS变量</code>，可能其自身隐藏的魅力，让笔者对其刮目相看。所以也将其纳入本小册的使用范围，也是唯一一章需集合JS操作。</p><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p><strong>CSS变量</strong>又名<strong>CSS自定义属性</strong>，指可在整个文档中重复使用的值。它由自定义属性<code>--var</code>和函数<code>var()</code>组成，<code>var()</code>用于引用自定义属性。谈到为何会在CSS中使用变量，以下上个示例，估计一看就会明白。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* 不使用变量 */</span></span>
<span class="line"><span>.title {</span></span>
<span class="line"><span>    background-color: red;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.desc {</span></span>
<span class="line"><span>    background-color: red;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>/* 使用变量 */</span></span>
<span class="line"><span>:root {</span></span>
<span class="line"><span>    --bg-color: red;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.title {</span></span>
<span class="line"><span>    background-color: var(--bg-color);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>.desc {</span></span>
<span class="line"><span>    background-color: var(--bg-color);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>看完可能会觉得使用变量的代码会多了一点，但是有无想到突然某天万恶的策划小哥哥和设计小姐姐说要做一个换肤功能。按照平时思路，估计有些同学就会按照<code>默认颜色主题</code>增加一份对照的<code>新颜色主题</code>样式文件。这样每次增加需求都同时维护几套颜色主题多麻烦啊。</p><p>此时变量就派上用场了，提前跟设计小姐姐规范好各种需变换的颜色并使用变量定义，通过JS批量操作这些定义好的变量即可。这也是<strong>变换颜色主题</strong>的一种解决方案，好处在于只需维护一套CSS代码，第13章<strong>实战大操作-切换控件</strong>会使用纯CSS实现暗黑模式换肤。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;].forEach(v =&gt; {</span></span>
<span class="line"><span>    const btn = document.getElementById(\`\${v}-theme-btn\`);</span></span>
<span class="line"><span>    btn.addEventListener(&quot;click&quot;, () =&gt; document.body.style.setProperty(&quot;--bg-color&quot;, v));</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>CSS使用变量有如下好处。</p><ul><li><p>减少样式代码的重复性</p></li><li><p>增加样式代码的扩展性</p></li><li><p>提高样式代码的灵活性</p></li><li><p>增多一种CSS与JS的通讯方式</p></li><li><p>不用深层遍历DOM改变某个样式</p></li></ul><p>可能有些同学会问，<code>sass</code>和<code>less</code>早就实现了变量该特性，何必再多此一举呢？可是细想一下，变量对比<code>Sass变量</code>和<code>Less变量</code>又有它的过人之处。</p><ul><li>浏览器原生特性，无需经过任何转译可直接运行</li><li>DOM对象一员，极大便利了CSS与JS间的联系</li></ul><h3 id="认识" tabindex="-1">认识 <a class="header-anchor" href="#认识" aria-label="Permalink to &quot;认识&quot;">​</a></h3><p>本来打算用一半篇幅讲述变量的规范和用法，但是网上一搜一大把就感觉没必要了，贴上阮一峰老师发表的教程<a href="http://www.ruanyifeng.com/blog/2017/05/css-variables.html" target="_blank" rel="noreferrer">《CSS变量教程》</a>。同时笔者也对变量的细节作一个整理，方便记忆。</p><ul><li><p>声明：<code>--变量名</code></p></li><li><p>读取：<code>var(--变量名, 默认值)</code></p></li><li><p>类型</p></li><li><ul><li>普通：只能用作<code>属性值</code>不能用作<code>属性名</code></li><li>字符：与字符串拼接 <code>&quot;Hello, &quot;var(--name)</code></li></ul></li><li><ul><li>数值：使用<code>calc()</code>与数值单位连用 <code>var(--width) * 10px</code></li></ul></li><li><p>作用域</p></li><li><ul><li>范围：在<code>当前节点块作用域</code>及其<code>子节点块作用域</code>下有效</li><li>优先级别：<code>内联样式 = 外联样式 &gt; ID选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 元素选择器 = 伪元素选择器 &gt; 通配选择器 = 后代选择器 = 兄弟选择器</code></li></ul></li></ul><p>接下来使用几个特别的场景展示变量的魅力。还是那句话，<strong>一样东西有使用的场景，那自然就会有它的价值</strong>，那么用的人也会越来越多。</p><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><p>其实变量有一个特别好用的场景，那就是结合<code>List集合</code>使用。若不明白这是什么，请继续往下看。</p><h5 id="条形加载条" tabindex="-1">条形加载条 <a class="header-anchor" href="#条形加载条" aria-label="Permalink to &quot;条形加载条&quot;">​</a></h5><p>一个条形加载条通常由几条线条组成，每条线条对应一个存在不同时延的相同动画，通过时间差运行相同的动画，从而产生加载效果。估计大部分的同学可能会把CSS代码编写成以下这样。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767375-4a717766-f719-4b99-b988-1c3fa5e4fff2.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul class=&quot;strip-loading&quot;&gt;</span></span>
<span class="line"><span>    &lt;li v-for=&quot;v in 6&quot; :key=&quot;v&quot;&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span>
<span class="line"><span>.strip-loading {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    width: 200px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    li {</span></span>
<span class="line"><span>        border-radius: 3px;</span></span>
<span class="line"><span>        width: 6px;</span></span>
<span class="line"><span>        height: 30px;</span></span>
<span class="line"><span>        background-color: #f66;</span></span>
<span class="line"><span>        animation: beat 1s ease-in-out infinite;</span></span>
<span class="line"><span>        &amp; + li {</span></span>
<span class="line"><span>            margin-left: 5px;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;:nth-child(2) {</span></span>
<span class="line"><span>            animation-delay: 200ms;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;:nth-child(3) {</span></span>
<span class="line"><span>            animation-delay: 400ms;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;:nth-child(4) {</span></span>
<span class="line"><span>            animation-delay: 600ms;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;:nth-child(5) {</span></span>
<span class="line"><span>            animation-delay: 800ms;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;:nth-child(6) {</span></span>
<span class="line"><span>            animation-delay: 1s;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        transform: scaleY(1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    50% {</span></span>
<span class="line"><span>        transform: scaleY(.5);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>分析代码发现，每个<code>&lt;li&gt;</code>只是存在<code>animation-delay</code>不同，而其余代码则完全相同，换成其他类似的List集合，那岂不是有10个<code>&lt;li&gt;</code>就写10个<code>:nth-child(n)</code>。</p><p>显然这种方法不灵活也不容易封装成组件，若能像JS那样封装成一个函数，并根据参数输出不同样式效果，那就更棒了。说到这里，很明显就是为了铺垫变量的开发技巧了。</p><p>对于HTML部分的修改，让每个<code>&lt;li&gt;</code>拥有一个自己作用域下的变量。对于CSS部分的修改，就需分析哪些属性是随着<code>index</code>递增而发生规律变化的，对规律变化的部分使用变量表达式代替即可。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ul class=&quot;strip-loading&quot;&gt;</span></span>
<span class="line"><span>    &lt;li v-for=&quot;v in 6&quot; :key=&quot;v&quot; :style=&quot;\`--line-index: \${v}\`&quot;&gt;&lt;/li&gt;</span></span>
<span class="line"><span>&lt;/ul&gt;</span></span>
<span class="line"><span>.strip-loading {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    width: 200px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    li {</span></span>
<span class="line"><span>        --time: calc(var(--line-index) * 200ms);</span></span>
<span class="line"><span>        border-radius: 3px;</span></span>
<span class="line"><span>        width: 6px;</span></span>
<span class="line"><span>        height: 30px;</span></span>
<span class="line"><span>        background-color: #f66;</span></span>
<span class="line"><span>        animation: beat 1.5s ease-in-out var(--time) infinite;</span></span>
<span class="line"><span>        &amp; + li {</span></span>
<span class="line"><span>            margin-left: 5px;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        transform: scaleY(1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    50% {</span></span>
<span class="line"><span>        transform: scaleY(.5);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>代码中的变量<code>--line-index</code>和<code>--time</code>使每个<code>&lt;li&gt;</code>拥有一个属于自己的作用域。例如第二个<code>&lt;li&gt;</code>，<code>--line-index</code>的值为2，<code>--time</code>的计算值为<code>200ms</code>，换成第三个<code>&lt;li&gt;</code>后这两个值又会不同了。</p><p>这就是变量的作用范围所致(<code>在当前节点块作用域及其子节点块作用域下有效</code>)，因此在<code>.strip-loading</code>的块作用域下调用<code>--line-index</code>是无效的。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* flex属性无效 */</span></span>
<span class="line"><span>.strip-loading {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    flex: var(--line-index);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>通过妙用变量，也把CSS代码从<code>41行</code>缩减到<code>27行</code>，对于那些含有List集合越多的场景，效果就越明显。而且这样处理也更美观更容易维护，某天说加载效果的时间差不明显，直接将<code>calc((var(--line-index) - 1) * 200ms)</code>里的<code>200ms</code>调整成<code>400ms</code>即可，就无需修改每个<code>:nth-child(n)</code>了。</p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/ZEGPrxy" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E6%9D%A1%E5%BD%A2%E5%8A%A0%E8%BD%BD%E6%9D%A1.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="心形加载条" tabindex="-1">心形加载条 <a class="header-anchor" href="#心形加载条" aria-label="Permalink to &quot;心形加载条&quot;">​</a></h5><p>前段时间刷掘金看到<code>陈大鱼头兄</code>的心形加载条，觉得挺漂亮的，很带感觉。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767377-e5c2aaa6-8f7d-41b9-be23-52e9942d8187.gif" alt="img"></p><p>通过动图分析，发现每条线条的背景颜色和动画时延不同，另外动画运行时的高度也不同。细心的你可能还会发现，第一条和第九条的高度一致，第二条和第八条的高度一致，依次类推，得到<code>高度变换相同类</code>的公式：<code>对称index = 总数 + 1 - index</code>。</p><p>背景颜色使用了滤镜的色相旋转<code>hue-rotate()</code>，目的是为了使颜色过渡得更自然；动画时延与上述<code>条形加载条</code>一致。以下就用变量根据看到的动图实现一番。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;heart-loading&quot;&gt;</span></span>
<span class="line"><span>    &lt;ul style=&quot;--line-count: 9&quot;&gt;</span></span>
<span class="line"><span>        &lt;li v-for=&quot;v in 9&quot; :key=&quot;v&quot; :class=&quot;\`line-\${v}\`&quot; :style=&quot;\`--line-index: \${v}\`&quot;&gt;&lt;/li&gt;</span></span>
<span class="line"><span>    &lt;/ul&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>.heart-loading {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    justify-content: center;</span></span>
<span class="line"><span>    align-items: center;</span></span>
<span class="line"><span>    width: 200px;</span></span>
<span class="line"><span>    height: 200px;</span></span>
<span class="line"><span>    ul {</span></span>
<span class="line"><span>        display: flex;</span></span>
<span class="line"><span>        justify-content: space-between;</span></span>
<span class="line"><span>        width: 150px;</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    li {</span></span>
<span class="line"><span>        --Θ: calc(var(--line-index) / var(--line-count) * .5turn);</span></span>
<span class="line"><span>        --time: calc((var(--line-index) - 1) * 40ms);</span></span>
<span class="line"><span>        border-radius: 5px;</span></span>
<span class="line"><span>        width: 10px;</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>        background-color: #3c9;</span></span>
<span class="line"><span>        filter: hue-rotate(var(--Θ));</span></span>
<span class="line"><span>        animation-duration: 1s;</span></span>
<span class="line"><span>        animation-delay: var(--time);</span></span>
<span class="line"><span>        animation-iteration-count: infinite;</span></span>
<span class="line"><span>        &amp;.line-1,</span></span>
<span class="line"><span>        &amp;.line-9 {</span></span>
<span class="line"><span>            animation-name: beat-1;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;.line-2,</span></span>
<span class="line"><span>        &amp;.line-8 {</span></span>
<span class="line"><span>            animation-name: beat-2;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;.line-3,</span></span>
<span class="line"><span>        &amp;.line-7 {</span></span>
<span class="line"><span>            animation-name: beat-3;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;.line-4,</span></span>
<span class="line"><span>        &amp;.line-6 {</span></span>
<span class="line"><span>            animation-name: beat-4;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        &amp;.line-5 {</span></span>
<span class="line"><span>            animation-name: beat-5;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat-1 {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    10%,</span></span>
<span class="line"><span>    90%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    45%,</span></span>
<span class="line"><span>    55% {</span></span>
<span class="line"><span>        height: 30px;</span></span>
<span class="line"><span>        transform: translate3d(0, -15px, 0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat-2 {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    10%,</span></span>
<span class="line"><span>    90%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    45%,</span></span>
<span class="line"><span>    55% {</span></span>
<span class="line"><span>        height: 60px;</span></span>
<span class="line"><span>        transform: translate3d(0, -30px, 0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat-3 {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    10%,</span></span>
<span class="line"><span>    90%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    45%,</span></span>
<span class="line"><span>    55% {</span></span>
<span class="line"><span>        height: 80px;</span></span>
<span class="line"><span>        transform: translate3d(0, -40px, 0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat-4 {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    10%,</span></span>
<span class="line"><span>    90%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    45%,</span></span>
<span class="line"><span>    55% {</span></span>
<span class="line"><span>        height: 90px;</span></span>
<span class="line"><span>        transform: translate3d(0, -30px, 0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@keyframes beat-5 {</span></span>
<span class="line"><span>    0%,</span></span>
<span class="line"><span>    10%,</span></span>
<span class="line"><span>    90%,</span></span>
<span class="line"><span>    100% {</span></span>
<span class="line"><span>        height: 10px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    45%,</span></span>
<span class="line"><span>    55% {</span></span>
<span class="line"><span>        height: 90px;</span></span>
<span class="line"><span>        transform: translate3d(0, -20px, 0);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>一波操作后就有了以下效果。与<code>陈大鱼头兄</code>的心形加载条对比一下，颜色、波动曲线和跳动频率有点不同，在暖色调的蔓延和肾上腺素的飙升下，这是一种心动的感觉。想起自己曾经写的一首诗：<code>我见犹怜，爱不释手，雅俗共赏，君子好逑</code>。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767536-d47cadc7-a7a1-40d6-82b9-502ca1c6286d.gif" alt="img"></p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/VwLRQyV" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E5%BF%83%E5%BD%A2%E5%8A%A0%E8%BD%BD%E6%9D%A1.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="标签导航" tabindex="-1">标签导航 <a class="header-anchor" href="#标签导航" aria-label="Permalink to &quot;标签导航&quot;">​</a></h5><p>上述通过两个加载条演示了变量在CSS中的运用以及一些妙用技巧，现在通过<strong>标签导航</strong>演示变量在JS中的运用。</p><p>JS中有3个操作变量的API，看上去简单易记。</p><ul><li><p>读取变量：<code>elem.style.getPropertyValue()</code></p></li><li><p>设置变量：<code>elem.style.setProperty()</code></p></li><li><p>删除变量：<code>elem.style.removeProperty()</code></p></li></ul><p>先上效果图，效果中主要是使用变量标记每个Tab的背景颜色和切换Tab的显示状态。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767525-61ba2b91-fc1c-43d5-b810-37c968faf502.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div class=&quot;tab-navbar&quot;&gt;</span></span>
<span class="line"><span>    &lt;nav&gt;</span></span>
<span class="line"><span>        &lt;a v-for=&quot;(v, i) in list&quot; :key=&quot;v&quot; :class=&quot;{ active: index === i }&quot; @click=&quot;select(i)&quot;&gt;标题{{i + 1}}&lt;/a&gt;</span></span>
<span class="line"><span>    &lt;/nav&gt;</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>        &lt;ul ref=&quot;tabs&quot; :style=&quot;\`--tab-count: \${list.length}\`&quot;&gt;</span></span>
<span class="line"><span>            &lt;li v-for=&quot;(v, i) in list&quot; :key=&quot;v&quot; :style=&quot;\`--bg-color: \${v}\`&quot;&gt;内容{{i + 1}}&lt;/li&gt;</span></span>
<span class="line"><span>        &lt;/ul&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span>.tab-navbar {</span></span>
<span class="line"><span>    display: flex;</span></span>
<span class="line"><span>    overflow: hidden;</span></span>
<span class="line"><span>    flex-direction: column-reverse;</span></span>
<span class="line"><span>    border-radius: 10px;</span></span>
<span class="line"><span>    width: 300px;</span></span>
<span class="line"><span>    height: 400px;</span></span>
<span class="line"><span>    nav {</span></span>
<span class="line"><span>        display: flex;</span></span>
<span class="line"><span>        height: 40px;</span></span>
<span class="line"><span>        background-color: #f0f0f0;</span></span>
<span class="line"><span>        line-height: 40px;</span></span>
<span class="line"><span>        text-align: center;</span></span>
<span class="line"><span>        a {</span></span>
<span class="line"><span>            flex: 1;</span></span>
<span class="line"><span>            cursor: pointer;</span></span>
<span class="line"><span>            transition: all 300ms;</span></span>
<span class="line"><span>            &amp;.active {</span></span>
<span class="line"><span>                background-color: #3c9;</span></span>
<span class="line"><span>                color: #fff;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    div {</span></span>
<span class="line"><span>        flex: 1;</span></span>
<span class="line"><span>        ul {</span></span>
<span class="line"><span>            --tab-index: 0;</span></span>
<span class="line"><span>            --tab-width: calc(var(--tab-count) * 100%);</span></span>
<span class="line"><span>            --tab-move: calc(var(--tab-index) / var(--tab-count) * -100%);</span></span>
<span class="line"><span>            display: flex;</span></span>
<span class="line"><span>            flex-wrap: nowrap;</span></span>
<span class="line"><span>            width: var(--tab-width);</span></span>
<span class="line"><span>            height: 100%;</span></span>
<span class="line"><span>            transform: translate3d(var(--tab-move), 0, 0);</span></span>
<span class="line"><span>            transition: all 300ms;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        li {</span></span>
<span class="line"><span>            display: flex;</span></span>
<span class="line"><span>            justify-content: center;</span></span>
<span class="line"><span>            align-items: center;</span></span>
<span class="line"><span>            flex: 1;</span></span>
<span class="line"><span>            background-color: var(--bg-color);</span></span>
<span class="line"><span>            font-weight: bold;</span></span>
<span class="line"><span>            font-size: 20px;</span></span>
<span class="line"><span>            color: #fff;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    data() {</span></span>
<span class="line"><span>        return {</span></span>
<span class="line"><span>            index: 0,</span></span>
<span class="line"><span>            list: [&quot;#f66&quot;, &quot;#66f&quot;, &quot;#f90&quot;, &quot;#09f&quot;]</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    methods: {</span></span>
<span class="line"><span>        select(i) {</span></span>
<span class="line"><span>            this.index = i;</span></span>
<span class="line"><span>            this.$refs.tabs.style.setProperty(&quot;--tab-index&quot;, i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>在<code>&lt;ul&gt;</code>上定义<code>--tab-index</code>表示Tab当前的索引，当点击按钮时重置<code>--tab-index</code>的值，可实现不操作DOM移动<code>&lt;ul&gt;</code>的位置显示指定的Tab。不操作DOM而可移动<code>&lt;ul&gt;</code>是因为定义了<code>--tab-move</code>，通过<code>calc()</code>计算<code>--tab-index</code>与<code>--tab-move</code>的关系，从而操控<code>transform:translate3d()</code>移动<code>&lt;ul&gt;</code>。</p><p>另外在<code>&lt;li&gt;</code>上定义<code>--bg-color</code>表示Tab的背景颜色，也是一种比较简洁的模板赋值方式，总比写<code>&lt;li :style=&quot;backgroundColor:\${color}&quot;&gt;</code>要好看。若多个属性依赖一个变量赋值，那么使用变量赋值到<code>style</code>上就更方便了，那些属性可在<code>css文件</code>里计算与赋值，这样可帮助JS分担一些属性计算工作。</p><p>当然该标签导航也可通过纯CSS实现。</p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/oNvzoZg" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%88%AA.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="悬浮跟踪按钮" tabindex="-1">悬浮跟踪按钮 <a class="header-anchor" href="#悬浮跟踪按钮" aria-label="Permalink to &quot;悬浮跟踪按钮&quot;">​</a></h5><p>通过几个示例实践了变量在CSS和JS上的运用，相信各位同学已经掌握了其用法和技巧。曾经在某个网站看过一个比较酷炫的鼠标悬浮效果，好像也是使用变量实现的。笔者凭着记忆也使用变量实现一番。</p><p>其实思路也比较简单，先对按钮布局和着色，然后使用伪元素标记鼠标的位置，定义<code>--x</code>和<code>--y</code>表示伪元素在按钮里的坐标，通过JS获取鼠标在按钮上的<code>offsetX</code>和<code>offsetY</code>分别赋值给<code>--x</code>和<code>--y</code>，再对伪元素添加径向渐变的背景颜色，大功告成，一个酷炫的鼠标悬浮跟踪效果就这样诞生了。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767663-2a3fdb1b-ba7f-4810-a417-58a51d5931d2.gif" alt="img"></p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;a class=&quot;track-btn&quot; @mousemove=&quot;move&quot;&gt;</span></span>
<span class="line"><span>    &lt;span&gt;妙用CSS变量，让你的CSS变得更心动&lt;/span&gt;</span></span>
<span class="line"><span>&lt;/a&gt;</span></span>
<span class="line"><span>.track-btn {</span></span>
<span class="line"><span>    overflow: hidden;</span></span>
<span class="line"><span>    position: relative;</span></span>
<span class="line"><span>    border-radius: 25px;</span></span>
<span class="line"><span>    width: 400px;</span></span>
<span class="line"><span>    height: 50px;</span></span>
<span class="line"><span>    background-color: #66f;</span></span>
<span class="line"><span>    cursor: pointer;</span></span>
<span class="line"><span>    line-height: 50px;</span></span>
<span class="line"><span>    text-align: center;</span></span>
<span class="line"><span>    font-weight: bold;</span></span>
<span class="line"><span>    font-size: 18px;</span></span>
<span class="line"><span>    color: #fff;</span></span>
<span class="line"><span>    span {</span></span>
<span class="line"><span>        position: relative;</span></span>
<span class="line"><span>        pointer-events: none;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;::before {</span></span>
<span class="line"><span>        --size: 0;</span></span>
<span class="line"><span>        position: absolute;</span></span>
<span class="line"><span>        left: var(--x);</span></span>
<span class="line"><span>        top: var(--y);</span></span>
<span class="line"><span>        width: var(--size);</span></span>
<span class="line"><span>        height: var(--size);</span></span>
<span class="line"><span>        background-image: radial-gradient(circle closest-side, #09f, transparent);</span></span>
<span class="line"><span>        content: &quot;&quot;;</span></span>
<span class="line"><span>        transform: translate3d(-50%, -50%, 0);</span></span>
<span class="line"><span>        transition: width 200ms ease, height 200ms ease;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    &amp;:hover::before {</span></span>
<span class="line"><span>        --size: 400px;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>    name: &quot;track-btn&quot;,</span></span>
<span class="line"><span>    methods: {</span></span>
<span class="line"><span>        move(e) {</span></span>
<span class="line"><span>            const x = e.pageX - e.target.offsetLeft;</span></span>
<span class="line"><span>            const y = e.pageY - e.target.offsetTop;</span></span>
<span class="line"><span>            e.target.style.setProperty(&quot;--x&quot;, \`\${x}px\`);</span></span>
<span class="line"><span>            e.target.style.setProperty(&quot;--y&quot;, \`\${y}px\`);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>其实可结合<code>鼠标事件</code>完成更多的酷炫效果，例如<code>动画关联</code>和<code>事件响应</code>等操作。没有做不到只有想不到，尽情发挥你的想象力啦。</p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/vYOPdjP" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E6%82%AC%E6%B5%AE%E8%B7%9F%E8%B8%AA%E6%8C%89%E9%92%AE.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h5 id="悬浮视差按钮" tabindex="-1">悬浮视差按钮 <a class="header-anchor" href="#悬浮视差按钮" aria-label="Permalink to &quot;悬浮视差按钮&quot;">​</a></h5><p>曾经在CodePen上还看到一个挺不错的示例，一个<a href="https://t.co/qE0woiNip8" target="_blank" rel="noreferrer">悬浮视差按钮</a>，具体代码涉及到一些3D变换的知识。看完源码后，按照其思路自己也实现一番，顺便对代码稍加改良。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767651-6b301bee-77ba-4afd-9837-9ab2b4c256ad.gif" alt="img"></p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/RwPdQEz" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E6%82%AC%E6%B5%AE%E8%A7%86%E5%B7%AE%E6%8C%89%E9%92%AE.vue" target="_blank" rel="noreferrer">Here</a></li></ul><h3 id="兼容" tabindex="-1">兼容 <a class="header-anchor" href="#兼容" aria-label="Permalink to &quot;兼容&quot;">​</a></h3><p>对于现代浏览器来说，变量的兼容性其实还是蛮好的，所以可放心使用。毕竟现在都是各大浏览器厂商快速迭代的时刻，产品对于用户体验来说是占了很大比重，因此在条件允许的情况下还是大胆尝新，不要被一些过去的所谓的规范所约束着。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320767619-f1944aa7-64cd-4ba7-90dd-30ee8317ee55.png" alt="img"></p><p>试问现在还有多少人愿意去维护<code>IExplorer兼容性</code>，若一个产品的用户体验受限于远古浏览器的压制(<code>可能政务网站和金融网站除外吧</code>)，相信该产品也不会走得很远。</p><p>在完成一个产品的过程中，不仅仅是为了完成工作任务，若在保证进度的同时能花点心思点缀一下，可能会有意外的收获。<strong>用心写好每一段代码，才是享受写代码的真谛</strong>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过循序渐进的方式探讨了变量的运用和技巧，对于一个这么好用的特性，当然是不能放过啦。其实多多思考，就能把变量用在很多场景上。最后送给各位同学一个大大的彩蛋，一个暖心彩虹色调🌈搭配的爱心点赞按钮。第15章<strong>实战大操作-变量控件</strong>是纯CSS变量实战，请各位同学期待下啦。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320767514-48c87ea8-cf54-4c6d-81b4-28f205563fed.gif" alt="img"></p><hr><ul><li>在线演示：<a href="https://codepen.io/JowayYoung/pen/PoqLQgq" target="_blank" rel="noreferrer">Here</a></li><li>在线源码：<a href="https://github.com/JowayYoung/idea-css/blob/master/icss/src/components/component/%E7%82%B9%E8%B5%9E%E6%8C%89%E9%92%AE.vue" target="_blank" rel="noreferrer">Here</a></li></ul><p>若有收获，就点个赞吧</p>`,79),i=[l];function c(t,o,r,d,u,h){return a(),s("div",null,i)}const b=n(e,[["render",c]]);export{m as __pageData,b as default};
