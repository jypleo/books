import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.D8Prfz4N.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/防御式 CSS 精讲/2 如何根据 UI 形式选择视觉盒模型？.md","filePath":"pamphlet/防御式 CSS 精讲/2 如何根据 UI 形式选择视觉盒模型？.md"}'),n={name:"pamphlet/防御式 CSS 精讲/2 如何根据 UI 形式选择视觉盒模型？.md"},l=t(`<p>Web 开发者都知道，在 Web 中呈现给用户的 UI 形式，它主要由 HTML 和 CSS 组成。<strong>Web 开发者使用 HTML 元素来构建 UI 的骨架，使用 CSS 规则来美化 UI</strong>，看上去它们两者（HTML 和 CSS）分工明确，不会有任何的耦合或关联，事实上并非如此。对用户来说，在 Web 上渲染出来的 UI 只要好看即可，但对于一名优秀的 Web 开发者而言，在构建 UI 的时候，需要尽可能地根据 UI 形式来选择适合的 HTML 元素和视觉盒模型。</p><p>在接下来的内容中，我们一起来探讨，Web 开发者应该怎么做，才能根据 UI 呈现形式来选择合适的 HTML 元素和视觉盒模型。</p><h2 id="什么是视觉盒模型" tabindex="-1">什么是视觉盒模型？ <a class="header-anchor" href="#什么是视觉盒模型" aria-label="Permalink to &quot;什么是视觉盒模型？&quot;">​</a></h2><p>大部分 Web 开发者都知道，在 CSS 的世界中，每一个元素都会被视为一个<strong>盒子</strong>，同时对 CSS 的盒模型较为熟悉，但很多人会对于视觉盒模型感到很陌生。孰不知，<a href="https://www.w3.org/TR/CSS22/visuren.html" target="_blank" rel="noreferrer"><strong>视觉盒模型</strong></a> 也是 CSS 中的一个非常重要的基础概念。</p><p>简单地说，视觉盒模型也被称为<strong>视觉格式化模型</strong>，它会根据 CSS 盒模型将 HTML 文档中的元素转换为一个个盒子。它会根据盒子的包含块（Container Block）的边界来渲染盒子。其实，它也是我们常说的格式化上下文（Formatting Context），比如大家常听到的 BFC、IFC 等。</p><p>如此一来，在 CSS 中任何一个盒子就有了两种模型，其中一个是<strong>盒模型（Box Model）</strong> ，另一个就是<strong>视觉盒模型（Visual Formatting Model）</strong> 。它们有着明确的分工：</p><ul><li><strong>盒模型</strong> ：主要用来计算盒子大小的，它主要包括了 CSS 的 <code>width</code> 、<code>height</code> 、<code>border</code> 、<code>padding</code> 和 <code>margin</code>；</li><li><strong>视觉盒模型</strong> ：主要用来计算盒子位置，即用于布局。它主要由盒子的尺寸、盒子的类型、定位方案、文档树中的其它元素、浏览器视窗尺寸与位置、所包含的图片尺寸、其他的某些外部因素来决定。</li></ul><h2 id="为什么要选择合理的视觉盒模型" tabindex="-1">为什么要选择合理的视觉盒模型？ <a class="header-anchor" href="#为什么要选择合理的视觉盒模型" aria-label="Permalink to &quot;为什么要选择合理的视觉盒模型？&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9c78ce0f63444319e9f4969a5aef83a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>上图是一个很常见的表单注册页。抛开其他 UI 不说，我们只说上图中的 “<strong>Sign Up</strong>” 按钮。上图中左侧设计稿中的 “Sign Up” 按钮和右侧设计稿中的 “Sign Up”按钮最为明显的差异就是<strong>宽度</strong>不一样，其他样式是相似的。</p><p>针对按钮的还原，不同的 Web 开发者会选择不同的 HTML 元素。注重 Web 语义化的同学可能会选择 <code>&lt;button&gt;</code> 元素：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当然，不少 Web 开发者可能会根据 UI 形式来选择 HTML 元素：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 左侧图中 Sign Up 按钮 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 右侧图中 Sign Up 按钮 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>现实开发中，很多 Web 开发者既不关注 HTML 语义化标签的使用，也不会关注 UI 呈现的形式，基本上一个 <code>&lt;div&gt;</code> 标签梭哈了。即，不管 UI 的任何呈现形式，所有 Web 页面都只有 <code>&lt;div&gt;</code> 标签元素：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>虽然说，如此使用 HTML 元素不会被认定为是一种错误方式，但会被认为是不合理的方式。即使不考虑语义化，也将会为编写 CSS 规则付出更多的代价（将产生冗余代码）。<strong>需要根据 UI 呈现形式改变视觉盒模型</strong> ，即 <strong>显式调整格式化上下文（<strong><strong><a href="https://drafts.csswg.org/css-display-3/#formatting-context" target="_blank" rel="noreferrer">Formatting Context</a></strong></strong>）</strong> 。HTML 中的标签元素主要分为：</p><ul><li><strong>块元素</strong>：比如 <code>&lt;div&gt;</code> 、<code>&lt;p&gt;</code> 和 <code>&lt;ul&gt;</code> 等；</li><li><strong>内联元素</strong> ：比如 <code>&lt;span&gt;</code> 、<code>&lt;a&gt;</code> 和 <code>&lt;strong&gt;</code> 等；</li><li><strong>不可替换元素</strong> ：比如 <code>&lt;img&gt;</code>。</li></ul><p>这些不同类型的 HTML 元素都有着自身默认的视觉盒模型格式，比如块元素被称为<strong>块格式化上下文（Block Formatting Context）</strong> 、内联元素被称为<strong>行内格式化上下文（Inline Formatting Context）</strong> 。简单地说，不同类型的元素的 <code>display</code> 是不一样的：</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.block-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.inline-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>抛开其理论不说，仅从呈现给用户的 UI 效果而言，块格式化上下文和行内格式化上下文所产生的盒子大小有着非常直观的差异：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88bc9e855c5048ee861a996d486caa17~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>简单地说：</p><ul><li>块元素（块格式化上下文），它的默认宽度（<code>width</code>）会填满其包含块，即 <code>width: 100%</code>；</li><li>内联元素（内联格式化上下文），它的默认宽度（<code>width</code>）和其内容有关，如果有足够多的内容时，它也会填满其包含块，否则相当于 <code>max-content</code>。</li></ul><p>所以，<strong>在还原 Web UI 时，我们首先要根据设计稿中 UI 呈现形式来选择正确的</strong> <strong>HTML 标签元素（最好是能选择更具语义化的标签元素）</strong>。</p><h2 id="如何改变视觉盒模型的格式" tabindex="-1">如何改变视觉盒模型的格式？ <a class="header-anchor" href="#如何改变视觉盒模型的格式" aria-label="Permalink to &quot;如何改变视觉盒模型的格式？&quot;">​</a></h2><p>现在我们已经知道了，视觉盒模型会将 HTML 文档中的标签元素变成一个盒子，而且盒子有着不同类型。这样一来，Web 开发者根据 UI 呈现形式选择了正确的标签元素，也有可能会造成盒子的格式化模式不对。比如，上面表单中的 “Sign UP” 按钮，我们选择合适的语义化标签 <code>&lt;button&gt;</code> ，但无法满足布局所需。也就是说，我们很多时候需要基于语义化的标签元素，手动调整盒子的格式化模式。</p><p>在 CSS 中，我们可以通过 <code>display</code> 属性来手动调整盒子类型（视觉盒模型）。<a href="https://www.w3.org/TR/css-display-3/#the-display-properties" target="_blank" rel="noreferrer">CSS 的 display 属性</a>提供了多个不同类型的值：</p><table tabindex="0"><thead><tr><th><strong><code>display</code></strong> <strong>的简写</strong></th><th><strong><code>display</code></strong> <strong>全称</strong></th><th><strong>生成的盒子</strong></th></tr></thead><tbody><tr><td><code>none</code></td><td></td><td>从盒子树中移除，包括其所有后代元素</td></tr><tr><td><code>contents</code></td><td></td><td>元素替换为盒子树中的内容</td></tr><tr><td><code>block</code></td><td><code>block flow</code></td><td>正常流内的块级盒子</td></tr><tr><td><code>flow-root</code></td><td><code>block flow-root</code></td><td>定义一个 BFC 的块级盒子</td></tr><tr><td><code>inline</code></td><td><code>inline flow</code></td><td>正常流内的内联级盒子</td></tr><tr><td><code>inline-block</code></td><td><code>inline flow-root</code></td><td>定义一个内联块级盒子，又称内联块</td></tr><tr><td><code>run-in</code></td><td><code>run-in flow</code></td><td>定义一个 run-in 盒子（具有特殊的盒子树修改规则的内联级盒子）</td></tr><tr><td><code>list-item</code></td><td><code>block flow list-item</code></td><td>正常文档流和带有附加标记的块级盒子</td></tr><tr><td><code>inline list-item</code></td><td><code>inline flow list-item</code></td><td>正常文档流和带有附加标记的内联级盒子</td></tr><tr><td><code>flex</code></td><td><code>block flex</code></td><td>带有内部伸缩布局的块级盒子（块级伸缩容器）</td></tr><tr><td><code>inline-flex</code></td><td><code>inline flex</code></td><td>带有内部伸缩布局的内联级盒子（内联级伸缩容器）</td></tr><tr><td><code>grid</code></td><td><code>block grid</code></td><td>带有内部网格布局的块级盒子（块级网格容器）</td></tr><tr><td><code>inline-grid</code></td><td><code>inline grid</code></td><td>带有内部网格布局的内联级盒子（内联级网格容器）</td></tr><tr><td><code>ruby</code></td><td><code>inline ruby</code></td><td>内联级 ruby 容器</td></tr><tr><td><code>block ruby</code></td><td><code>block ruby</code></td><td>块级 ruby 容器</td></tr><tr><td><code>table</code></td><td><code>block table</code></td><td>带有内部表格布局的块级盒子</td></tr><tr><td><code>inline-table</code></td><td><code>inline table</code></td><td>带有内部表格布局的内联级盒子</td></tr></tbody></table><p>注意，上面表格中第一列是目前 <code>display</code> 的使用语法，第二列是 <code>display</code> 属性未来的使用语法，也被称为双值语法，即：</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 等同于 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 两个词之间有一个空格 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 等同于 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 两个词之间有一个空格 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当你在为选择合适的盒子类型（格式化盒子）感到困惑时，我们可以按照 <code>display</code> 属性的双语法规则来做出相应的选择：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8145ecc6bb01409bb23a8c93d4f1289a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>如上图所示，我们可以根据 UI 形式，从第一列中选择相应文档流方式，可以是 <code>block</code> 或是 <code>inline</code> ；然后从第二列中选择布局方案，如果选择使用 CSS Flexbox 布局，则选择 <code>flex</code> ；如果选择使用 CSS Grid 布局，则选择 <code>grid</code>；如果 UI 是一个列表（可能带有标记符），则选择第三列中的 <code>list-item</code> 。</p><p>我们来看一个具体的案例：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/583a34a074d2449fa9bb3375bf8002ee~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>从上图中不难发现，左侧图中的 “Sign Up” 按钮的宽度没填充整个包含块（按钮宽度小于包含块的宽度），而右侧图中的 “Sign Up” 按钮宽度填充了整个包含块（按钮宽度等于包含块的宽度）。</p><p>如果从这个角度出发，左图中的 “Sign Up” 按钮更接近于一个内联级盒子，即 <code>inline</code> ，而右图中的 “Sign Up” 按钮更接近于一个块级盒子，即 <code>block</code> 。如果决定使用 CSS Flexbox 来布局的话，那么最终左图的按钮会选择 <code>inline flex</code> ，右图的按钮会选择 <code>block flex</code> ：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 左图中的 Sign Up 按钮 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button button--left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 右图中的 Sign Up 按钮 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button button--right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.button--left {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display: inline-flex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /* 等同于 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display: inline flex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.button--right {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display: flex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /* 等同于 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display: block flex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以用下图来映射出 <code>display</code> 属性现有的值：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61325b6daebf4c75b51e5fea5f3b05e5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这样做（<code>display</code> 设置双值）能更好地帮助你理解更改 <code>display</code> 属性值时会发生什么。因为，当你在 CSS 中定义一个盒子的布局时，你是在定义这个盒子发生了什么，它又是如何与布局中的其他盒子产生关系的。你还定义了该盒子的所有子元素的行为。</p><h2 id="案例-注册表单中的按钮" tabindex="-1">案例：注册表单中的按钮 <a class="header-anchor" href="#案例-注册表单中的按钮" aria-label="Permalink to &quot;案例：注册表单中的按钮&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b52adf7169d43bfaa08483a98d0beb0~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>继续拿上图中的按钮为例。按理来说，在 Web 中制作按钮，最好是使用带有语义化的 <code>&lt;button&gt;</code> 标签，不过我为了模拟现在互联网上现状，使用了不具任何语义化的标签 <code>&lt;div&gt;</code> 来制作按钮：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 左图 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Loop Music&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Loop Music is the best music streaming app to enjoy great music. Play any song of your favorite artist, album or playlist in high quality.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button button--primary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button button--secondary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign In&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 右图 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;signup&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Get Started&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Name&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Toprak Efe Guvenc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Email&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toprakefeguvenc@gmail.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Password&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enter your password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Must be at least 8 characters&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tabindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button button--primary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Sign Up&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>注意，上面代码中所示的 HTML 结构和设计稿中的不是完全一致！如果你感兴趣的话，可以将右图的结构进一步完善！</p></blockquote><p>示例中的 <code>div.button</code> 默认的盒子类型（视觉盒模型格式化）是 <code>block</code> ，即 <code>display</code> 的值是 <code>block</code> 。不过，为了实现所需的布局效果，Web 开发者会采用 CSS Flexbox 或 CSS Grid 布局技术。也就是说，会手动将 <code>display</code> 的值改成 <code>inline-flex</code> 或 <code>flex</code> 。</p><p>可能你会问，应该将 <code>display</code> 属性的值设置为哪一个呢，是 <code>inline-flex</code> 还是 <code>flex</code>？</p><p>其实答案在前面就已经提到了，首先我们应该根据 UI 呈现形式来做出合适的选择。比如上图中左图的按钮，它在文档流是一个内联级盒子，那么将它的 <code>display</code> 属性值设置为 <code>inline-flex</code> 更合适；右图的按钮，它在文档流是一个块组级盒子，所以将它的 <code>display</code> 属性值设置为 <code>flex</code> 更合适。</p><p>可事实上，很多 Web 开发者在实际开发中时，并不会考虑到这一点，很多时候直接将 <code>display</code> 设置为 <code>flex</code> 。这样一来，很难满足 UI 还原的需要：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d1d633cf689413daca37a718414a10c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/yLxLwWN" target="_blank" rel="noreferrer">https://codepen.io/airen/full/yLxLwWN</a></p></blockquote><p>也就是说，没有选择合理的视觉盒模型，你可有需要增加额外的 CSS 代码。假设你选择 <code>display: flex</code> ，那么你需要给左图中的按钮设置一个最大宽度值：</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">280</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3975029d7014d948d84caff7fc78cb5~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/ababxXj" target="_blank" rel="noreferrer">https://codepen.io/airen/full/ababxXj</a></p></blockquote><p>同样的，如果将 <code>display</code> 都设置为 <code>inine-flex</code> ，那么你需要给右图中的按钮设置宽度 <code>width</code> 为 <code>100%</code> ：</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.signup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4a18ad2fa464789be9be8ad35736cad~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/LYJYvoq" target="_blank" rel="noreferrer">https://codepen.io/airen/full/LYJYvoq</a></p></blockquote><p>正确的使用姿势应该是根据 UI 所需给 <code>display</code> 设置正确的值：</p><div class="language-CSS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">CSS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 左图按钮 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    --display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 右图按钮 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.signup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    --display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/xxaxevy" target="_blank" rel="noreferrer">https://codepen.io/airen/full/xxaxevy</a></p></blockquote><p>需要注意的是，上面这种现象同样存在于 CSS Grid 布局中。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/356474e26b194bd98f3dae2c41587813~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>Demo 地址：<a href="https://codepen.io/airen/full/qBMBGbv" target="_blank" rel="noreferrer">https://codepen.io/airen/full/qBMBGbv</a></p></blockquote><p>如上图所示，当 Flexbox 容器或 Grid 容器的包含块（父元素）未显式定义 <code>display</code> 属性的值，Flexbox 容器和 Grid 容器在不同上下文格式之下有着不同的渲染（渲染盒子）：</p><ul><li>设置为 <code>flex</code> 格式，它的宽度和父容器等宽，即 <code>width</code> 为 <code>100%</code>，也称<strong>块 Flexbox 容器</strong>；</li><li>设置为 <code>inline-flex</code> 格式，它的宽度是由其子元素（后代元素）的内容来决定，相当于 <code>width</code> 为 <code>auto</code>，也称<strong>内联 Flexbox 容器</strong>；</li><li>设置为 <code>grid</code> 格式，它的宽度和父容器等宽，即 <code>width</code> 为 <code>100%</code> ， 也称<strong>块 Grid 容器</strong>；</li><li>设置为 <code>inline-grid</code> 格式，它的宽度将由其具有最大宽度（<code>max-content</code>）的子元素（网格项目）来决定，也称<strong>内联 Grid 容器</strong>。</li></ul><p>不过，CSS Grid 中的 <code>grid</code> 、<code>inline-grid</code> 和 CSS Flexbox 中的 <code>flex</code> 、<code>inline-flex</code> 有着明显的区别：</p><ul><li>Flexbox 布局中，不管是 <code>flex</code> 还是 <code>inline-flex</code>，默认情况下，都会让所有 Flex 项目排在主轴上（一行或一列）；</li><li>Grid 布局中，不管是 <code>grid</code> 还是 <code>inline-grid</code>，默认情况下，都不会改变 Grid 项目的排列方式，将按照 HTML 结构中的源顺序排列，除非你在声明网格容器的时候，显式使用 <code>grid-template-*</code>（比如，<code>grid-template-columns</code>、<code>grid-template-rows</code> 或 <code>grid-template-areas</code>）改变其排列方式。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/781e489da1744aea9d50498e6305bd5c~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p>有关于这方面更详细的介绍，或者你想获得更多关于 CSS Flexbox 和 Grid 布局方面的知识，建议你移步阅读《<a href="https://s.juejin.cn/ds/BVngy56/" target="_blank" rel="noreferrer">现代 Web 布局</a>》。</p></blockquote><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>虽然在 Web 开发中，并没有明确的条文或规则要求我们根据 UI 呈现形式来选择合适的视觉盒模型。但在 CSS 中，视觉盒模型直接决定了 HTML 元素会生成一个什么类型的盒子，并且 CSS 视觉盒模型会直接影响 Web 布局。</p><p>正如文章中所示，如果你在开发的过程中，没有根据 UI 呈现形式选择合适的视觉盒模型，会让你的 CSS 代码变得更冗余，从而增加了编写和维护 CSS 代码的成本。</p><p>在此，强烈建议大家在还原 UI 界面时，首先根据 UI 界面中的对象选择更为合理（具有语义化）的 HTML 标签元素；同时也应该根据 UI 界面呈现形式选择合理的视觉盒模型，即给元素的 <code>display</code> 属性设置合适的值。<strong>在正确的地方选择正确方法，才能实现正确的效果</strong>。</p>`,77),p=[l];function e(h,k,d,E,o,r){return a(),i("div",null,p)}const y=s(n,[["render",e]]);export{c as __pageData,y as default};
