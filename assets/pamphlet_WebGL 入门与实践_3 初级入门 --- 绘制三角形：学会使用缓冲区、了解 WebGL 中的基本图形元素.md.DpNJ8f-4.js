import{_ as s,c as i,o as a,a2 as l}from"./chunks/framework.D8Prfz4N.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/WebGL 入门与实践/3 初级入门 --- 绘制三角形：学会使用缓冲区、了解 WebGL 中的基本图形元素.md","filePath":"pamphlet/WebGL 入门与实践/3 初级入门 --- 绘制三角形：学会使用缓冲区、了解 WebGL 中的基本图形元素.md"}'),n={name:"pamphlet/WebGL 入门与实践/3 初级入门 --- 绘制三角形：学会使用缓冲区、了解 WebGL 中的基本图形元素.md"},t=l(`<p>上节带领大家学习了<code>点图元</code>的绘制过程，内容涉及到着色器的语法部分以及 JavaScript 操作 WebGL 的步骤。如果大家能够按照例子多练习几遍的话，之后的学习会更容易一些。</p><p>本节带大家练习绘制三角形，三角形的绘制比较简单。 因为它是 WebGL 提供给我们的基本图元之一，我们只需要给着色器提供三角形的顶点数据，调用 WebGL 的绘制命令 <code>gl.drawArrays</code> 即可。</p><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>本节通过实现利用鼠标动态绘制三角形的功能，学习使用缓冲区向 GPU 中传递数据。最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8dc46e5a511b~tplv-t2oaga2asx-image.image" alt=""></p><ul><li><a href="http://ifanqi.top/webgl/pages/lesson2.html" target="_blank" rel="noreferrer">演示地址</a></li><li><a href="https://github.com/lucefer/webgl/blob/master/pages/lesson2.html" target="_blank" rel="noreferrer">源码地址</a>。</li></ul><p>通过本节学习，你将会掌握如下内容：</p><ul><li>三角形图元的分类。</li><li>使用缓冲区传递数据。</li><li>类型化数组的作用。</li><li>动态绘制三角形。</li></ul><h2 id="三角形图元的分类" tabindex="-1">三角形图元的分类 <a class="header-anchor" href="#三角形图元的分类" aria-label="Permalink to &quot;三角形图元的分类&quot;">​</a></h2><p>WebGL 的基本图元包含点、线段、三角形，而三角形又分为三类</p><ul><li>基本三角形</li><li>三角带</li><li>三角扇</li></ul><p>那么，他们之间有什么区别呢？</p><ul><li>基本三角形（TRIANGLES）</li></ul><p>基本三角形是一个个独立的三角形，假如我们提供给着色器六个顶点，那么 WebGL 会绘制两个三角形，前三个顶点绘制一个，后三个顶点绘制另一个，互不相干。 举个例子来说，假如我们有六个顶点【v1, v2, v3, v4, v5, v6】，采用基本三角形图元进行绘制，绘制完是这个样子：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8dc0abecae80~tplv-t2oaga2asx-image.image" alt=""></p><p>【v1, v2, v3】为一个三角形，【v4, v5, v6】 为另一个三角形。</p><p><code>绘制三角形的数量 = 顶点数 / 3</code>。</p><ul><li>三角带（TRIANGLE_STRIP）</li></ul><p>同样是这六个顶点，如果采用三角带的方式绘制的话，则会绘制 【v1, v2, v3】, 【v3, v2, v4】, 【v3, v4, v5】, 【v5, v4, v6】 共计 4 个三角形，如下图所示：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/1/22/16875b8e51710e48~tplv-t2oaga2asx-image.image" alt=""></p><p><code>绘制三角形的数量 = 顶点数 - 2</code></p><ul><li>三角扇（TRIANGLE_FAN）</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8dc2bb044266~tplv-t2oaga2asx-image.image" alt=""></p><p>可以看出，三角扇的绘制方式是以第一个顶点作为所有三角形的顶点进行绘制的。采用三角扇绘制方式所能绘制的三角形的数量和顶点个数的关系如下：</p><p><code>绘制三角形的数量 = 顶点数 - 2</code></p><p>本节我们主要学习基本三角形图元的绘制。</p><h2 id="绘制基本三角形" tabindex="-1">绘制基本三角形 <a class="header-anchor" href="#绘制基本三角形" aria-label="Permalink to &quot;绘制基本三角形&quot;">​</a></h2><p>我们的目标是在 canvas 上点击三个位置作为三角形的三个顶点，然后绘制一个红颜色的三角形，本节还是不涉及深度信息（Z值），所以每个顶点我们只传入【x, y】坐标即可。</p><p>我们从简单之处着手，首先实现一个固定顶点坐标的三角形。</p><p>按照惯例，我们先准备着色器程序：</p><h3 id="顶点着色器" tabindex="-1">顶点着色器 <a class="header-anchor" href="#顶点着色器" aria-label="Permalink to &quot;顶点着色器&quot;">​</a></h3><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置浮点数据类型为中级精度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">precision mediump </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//接收顶点坐标 (x, y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_Position;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_Position, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="片元着色器" tabindex="-1">片元着色器 <a class="header-anchor" href="#片元着色器" aria-label="Permalink to &quot;片元着色器&quot;">​</a></h3><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置浮点数据类型为中级精度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">precision mediump </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//接收 JavaScript 传过来的颜色值（rgba）。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uniform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_Color;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   vec4 color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_Color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="html-部分" tabindex="-1">HTML 部分 <a class="header-anchor" href="#html-部分" aria-label="Permalink to &quot;HTML 部分&quot;">​</a></h3><p>HTML 部分还是包含一个 <code>canvas</code> 标签，以及存储片元和顶点着色器源码的 <code>script</code> 标签，和之前绘制点的内容大致相同，仅着色器源码有所差异。 为了节省篇幅，我们不贴这部分的源码了。</p><h3 id="javascript-部分" tabindex="-1">JavaScript 部分 <a class="header-anchor" href="#javascript-部分" aria-label="Permalink to &quot;JavaScript 部分&quot;">​</a></h3><p>首先，定义三角形的三个顶点：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var positions = [1,0, 0,1, 0,0];</span></span></code></pre></div><p>给着色器传递顶点数据和上节采用的方式不同，区别在于如何将三角形的三个顶点数据传递到顶点着色器中。<br> 按照惯例，我们还是先找到 a_Position 变量：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(program, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a_Position&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>找到了该变量，接下来我们该怎么传递数据呢？按照上节绘制点的方式传递数据肯定不行了，因为这次我们要传递多个顶点数据。这里我们借助一个强大的工具<code>缓冲区</code>，通过缓冲区我们可以向着色器传递多个顶点数据。</p><p>首先创建一个缓冲区：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>缓冲区创建好了，我们绑定该缓冲区为 WebGL 当前缓冲区 <code>gl.ARRAY_BUFFER</code>，绑定之后，对缓冲区绑定点的的任何操作都会基于该缓冲区（即buffer） 进行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buffer);</span></span></code></pre></div><p>接下来往当前缓冲区（即上一步通过 bindBuffer 绑定的缓冲区）中写入数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positions), gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">STATIC_DRAW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p>注意，着色器程序中的变量需要强类型数据，所以我们在往缓冲区写数据的时候，JS 的弱类型数组一定要用类型化数组转化一下。上面的 <code>new Float32Array(positions)</code>，目的就是将 JavaScript 中的弱类型数组转化为强类型数组。</p></blockquote><p>总结一下这一系列步骤：</p><ul><li>首先，创建了一个保存顶点坐标的数组，保存了三角形的顶点信息。</li><li>然后我们使用<code>gl.createBuffer</code>创建了一个缓冲区，并通过<code>gl.bindBuffer(gl.ARRAY_BUFFER, buffer)</code>绑定 <code>buffer</code> 为当前缓冲区。</li><li>之后我们用<code>new Float32Array(positions)</code>将顶点数组转化为更严谨的类型化数组。</li><li>最后我们使用 <code>gl.bufferData</code> 将类型化后的数组复制到缓冲区中，最后一个参数 <code>gl.STATIC_DRAW</code> 提示 WebGL 我们不会频繁改变缓冲区中的数据，WebGL 会根据这个参数做一些优化处理。</li></ul><blockquote><p>以上这些代码属于初始化过程，在渲染过程中一般不会再次调用。</p></blockquote><p>接下来，我们演示如何把顶点组成的模型渲染到屏幕上。</p><p>我们需要告诉 WebGL 如何从之前创建的缓冲区中获取数据，并且传递给顶点着色器中的 <code>a_Position</code> 属性。 那么，首先启用对应属性 <code>a_Position</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enableVertexAttribArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_Position);</span></span></code></pre></div><p>接下来我们需要设置从缓冲区中取数据的方式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//每次取两个数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//每个数据的类型是32位浮点型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FLOAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//不需要归一化数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> normalize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每次迭代运行需要移动数据数 * 每个数据所占内存 到下一个数据开始点。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stride </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从缓冲起始位置开始读取     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 a_Position 变量获取数据的缓冲区指向当前绑定的 buffer。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vertexAttribPointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   a_Position, size, type, normalize, stride, offset)</span></span></code></pre></div><blockquote><p>需要注意的是，我们通过 <code>gl.vertexAttribPointer</code> 将属性绑定到了当前的缓冲区，即使之后我们使用 <code>bindBuffer</code> 绑定到其他缓冲区时，<code>a_Position</code> 也依然会从 <code>buffer</code> 这个缓冲区中获取数据。</p></blockquote><p>这个函数比较关键，它决定了目标属性(本例是 a_Position )如何从缓冲区中读取数据，在这里我解释一下：</p><ul><li>gl.vertexAttribPointer (target, size, type, normalize, stride, offset)。 <ul><li>target： 允许哪个属性读取当前缓冲区的数据。</li><li>size：一次取几个数据赋值给 <code>target</code> 指定的目标属性。在我们的示例中，顶点着色器中 a_Position 是 vec2 类型，即每次接收两个数据，所以 <code>size</code> 设置为 2。以后我们绘制立体模型的时候，a_Position 会接收三个数据，size 相应地也会设置成 3。</li><li>type：数据类型，一般而言都是浮点型。</li><li>normalize：是否需要将非浮点类型数据<code>单位化</code>到【-1, 1】区间。</li><li>stride：步长，即每个顶点所包含数据的字节数，默认是 0 ，0 表示一个属性的数据是连续存放的。在我们的例子中，我们的一个顶点包含两个分量，X 坐标和 Y 坐标，每个分量都是一个 Float32 类型，占 4 个字节，所以，stride = 2 * 4 = 8 个字节。但我们的例子中，缓冲区只为一个属性<code>a_Position</code>服务，缓冲区的数据是连续存放的，因此我们可以使用默认值 0 来表示。但如果我们的缓冲区为多个属性所共用，那么 stride 就不能设置为 0 了，需要进行计算。</li><li>offset：在每个步长的数据里，目标属性需要偏移多少字节开始读取。在我们的例子中，buffer 只为 a_Position 一个属性服务，所以 offset 为 0 * 4 = 0。</li></ul></li></ul><p>假如我们的顶点数组为【10, 20, 30, 30, 40, 50, 60, 70】，每两个相邻数字代表一个顶点的 X 坐标和 Y 坐标。由于我们使用的是 Float32Array 浮点数组，每个数字占 4 个字节。</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/6/165adbb47096a00f~tplv-t2oaga2asx-image.image" width="70%" height="70%"><p>上面也介绍了，stride 代表每个顶点数据所占用字节数：</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/6/165adbb5478cdcb9~tplv-t2oaga2asx-image.image" width="60%" height="60%"><blockquote><p>这两个图应该能让大家更容易理解 stride 的计算方式。关于 <code>gl.vertexAttribPointer</code> 的使用方式我们先告一段落，下节我们再介绍用一个缓冲区为多个属性传递数据时，stride 和 offset 该如何计算。</p></blockquote><p>言归正传，设置完变量和缓冲区的绑定之后，我们接下来编写绘制代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//绘制图元设置为三角形</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> primitiveType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRIANGLES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//从顶点数组的开始位置取顶点数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//因为我们要绘制三个点，所以执行三次顶点绘制操作。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(primitiveType, offset, count);</span></span></code></pre></div><p>大功告成，我们看下效果：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8dc7174338aa~tplv-t2oaga2asx-image.image" alt=""></p><blockquote><p>可以看出，使用 WebGL 绘制一个简单的三角形就需要很多代码。但请大家不要担心，代码固然多，但是很容易理解，而且这部分代码我们完全可以通过封装，减少调用。</p></blockquote><p>大家看代码注释就能明白对应的含义，而且 GLSL 的语法也能够让人见名知意。本节不对 GLSL 做过多介绍。我会在之后的中级进阶里专门开辟一个章节详细介绍 GLSL 的语法细节。</p><p>一张图演示上面这个例子的数据传输过程：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8f2f0f0caff2~tplv-t2oaga2asx-image.image" alt=""></p><h2 id="动态绘制三角形" tabindex="-1">动态绘制三角形 <a class="header-anchor" href="#动态绘制三角形" aria-label="Permalink to &quot;动态绘制三角形&quot;">​</a></h2><p>到目前为止，我们已经实现了在屏幕上绘制一个固定三角形的功能，接下来我们实现动态绘制三角形，大家回想一下上节动态绘制点的逻辑，动态三角形的绘制和它基本类似。</p><h3 id="着色器部分" tabindex="-1">着色器部分 <a class="header-anchor" href="#着色器部分" aria-label="Permalink to &quot;着色器部分&quot;">​</a></h3><ul><li>顶点着色器增加一个变量用来接收 canvas 的尺寸，将 canvas 坐标转化为 NDC 坐标。</li></ul><div class="language-glsl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">glsl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置浮点数精度为中等精度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">precision mediump </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接收顶点坐标 (x, y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_Position;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接收 canvas 的尺寸(width, height)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_Screen_Size;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vec2 position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_Screen_Size) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>片元着色器部分没有改动。</li></ul><h3 id="javascript-部分-1" tabindex="-1">JavaScript 部分 <a class="header-anchor" href="#javascript-部分-1" aria-label="Permalink to &quot;JavaScript 部分&quot;">​</a></h3><p>在 JavaScript 代码部分，我们多了一些交互操作：</p><ul><li>鼠标点击 canvas，存储点击位置的坐标。</li><li>每点击三次时，再执行绘制命令。因为三个顶点组成一个三角形，我们要保证当顶点个数是3的整数倍时，再执行绘制操作。</li></ul><p>关键代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mouseup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageX;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    positions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //向缓冲区中复制新的顶点数据。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positions), gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DYNAMIC_DRAW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //重新渲染</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//渲染函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">gl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //用上一步设置的清空画布颜色清空画布。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BUFFER_BIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //绘制图元设置为三角形</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> primitiveType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRIANGLES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //从顶点数组的开始位置取顶点数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawOffset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //因为我们要绘制 N 个点，所以执行 N 次顶点绘制操作。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(primitiveType, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>至此，我们完成了动态绘制三角形的功能，效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/5/165a8dc46e5a511b~tplv-t2oaga2asx-image.image" alt=""></p><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p>回顾一下我们本节学到的内容：</p><ul><li>三角形图元分类 <ul><li>gl.TRIANGLES：基本三角形。</li><li>gl.TRIANGLE_STRIP：三角带。</li><li>gl.TRIANGLE_FAN：三角扇。</li></ul></li><li>类型化数组的作用。 <ul><li>Float32Array：32位浮点数组。</li></ul></li><li>使用缓冲区传递数据。 <ul><li>gl.createBuffer：创建buffer。</li><li>gl.bindBuffer：绑定某个缓冲区对象为当前缓冲区。</li><li>gl.bufferData：往缓冲区中复制数据。</li><li>gl.enableVertexAttribArray：启用顶点属性。</li><li>gl.vertexAttribPointer：设置顶点属性从缓冲区中读取数据的方式。</li></ul></li><li>动态绘制三角形。 <ul><li>改变顶点信息，然后通过缓冲区将改变后的顶点信息传递到着色器，重新绘制三角形。</li></ul></li></ul><h2 id="思考与作业" tabindex="-1">思考与作业 <a class="header-anchor" href="#思考与作业" aria-label="Permalink to &quot;思考与作业&quot;">​</a></h2><p>大家有没有发现一些问题：</p><ul><li>为什么绘制的所有三角形颜色都是一样的？</li><li>能不能不同的三角形显示不同的颜色？</li><li>同一个三角形能不能做成渐变色？</li></ul><p>仔细思考一下，动手试试看。</p><p>下一节我们学习第三种基本图元：<code>线段</code>。</p>`,94),p=[t];function h(e,k,r,d,E,g){return a(),i("div",null,p)}const y=s(n,[["render",h]]);export{c as __pageData,y as default};
