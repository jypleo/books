import{_ as s,c as a,o as p,a2 as i}from"./chunks/framework.D8Prfz4N.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/基于 Vite 的组件库工程化实战/11 组件发布： 建立语义化版本与提交软件包仓库 Npm.md","filePath":"pamphlet/基于 Vite 的组件库工程化实战/11 组件发布： 建立语义化版本与提交软件包仓库 Npm.md"}'),n={name:"pamphlet/基于 Vite 的组件库工程化实战/11 组件发布： 建立语义化版本与提交软件包仓库 Npm.md"},e=i(`<p>组件库在开发到一定阶段后需要进行版本发布，需要将版本提交到软件包仓库 Npm。对于版本发布，首先就需要确定版本编号。这里面就很有学问，比如 Vue 经历的三个大的版本，什么时候应该升级一个大的版本？大家常说的正式发布前的 alpha 版和 beta 版都是什么 ？</p><p>版本发布是将版本库中的代码进行编译打包，这个过程其实是一个 CD 持续交付过程。这个工具是如何使用工具完成的，答案都会在本章展开。</p><h2 id="用户故事-userstory" tabindex="-1">用户故事(UserStory) <a class="header-anchor" href="#用户故事-userstory" aria-label="Permalink to &quot;用户故事(UserStory)&quot;">​</a></h2><p>为组件库建立语义化版本，并且设置持续交付机制自动发布版本。</p><h2 id="任务分解-task" tabindex="-1">任务分解(Task) <a class="header-anchor" href="#任务分解-task" aria-label="Permalink to &quot;任务分解(Task)&quot;">​</a></h2><ul><li>确定语义化版本；</li><li>设置持续交付过程 ;</li><li>引用自动发布徽章。</li></ul><h2 id="任务实现" tabindex="-1">任务实现 <a class="header-anchor" href="#任务实现" aria-label="Permalink to &quot;任务实现&quot;">​</a></h2><h3 id="使用语义化版本" tabindex="-1">使用语义化版本 <a class="header-anchor" href="#使用语义化版本" aria-label="Permalink to &quot;使用语义化版本&quot;">​</a></h3><p>由于软件的发行版本会不断更新，为了让用户可以用到确定功能的软件，必须制定一个版本号。最原始的版本号只需要使用自然递增就好了。比如 Ver1 ....Ver2， 但是软件都会有自己从不成熟到成熟再到转生的过程，只用一个自然递增的方法好像不太行，至少以下几个问题需要附加说明才能解决。</p><ul><li>哪些是稳定的正式版本 ？</li><li>哪些是测试版，以及测试版本的完善程度如何 ？</li><li>哪些版本之间 API 已经出现了不兼容情况 ？</li><li>哪些版本只是修正了Bug 放心升级就好 ？</li></ul><p>假设所有的版本信息都需要附加说明，那就会变成这样：</p><ul><li>Ver 1 ： 测试版本；</li><li>Ver 2 ： 预上线版本 ；</li><li>Ver 3 ： 正式版本；</li><li>Ver 4 ： 修复 Ver3 的bug；</li><li>Ver 5 ： 新 API 的测试版本，但是与Ver 3、Ver4 有不兼容情况；</li><li>Ver 6 ： Ver4 的后的 bug 修复版；</li><li>Ver7 ： Ver5 的正式版本，但是与 Ver3/4/6 都不兼容。</li></ul><p>可见即使是有详细的说明，也会让整个版本混乱不堪，而且缺乏可读性。</p><p>为了解决这个问题，社区慢慢摸索出了语义化版本体系，目的就是让版本号中就包含了相邻版本间的底层代码和修改内容信息。</p><p>语义化版本最早是由 <code>Gravatars</code> 创办者兼 GitHub 共同创办者 <code>Tom Preston-Werner</code> 所建立的一个有关如何命名软件和库（包）版本的规范，用于解决在大型项目中对依赖的版本失去控制的问题（例如你可能因为害怕不兼容而不敢去更新<strong>依赖</strong>）。</p><p>现在 Semantic Versioning 已经在开源社区中得到了广泛的认同，Node.js 的包管理工具 npm 也完全基于 Semantic Versioning 来管理依赖的版本。</p><p>语义化版本是这样规定的。</p><p>版本格式：主版本号.次版本号.修订号（MAJOR.MINOR.PATCH），版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改；</li><li>次版本号：当你做了向下兼容的功能性新增；</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><p>以 Vue 的版本为例 ：</p><ul><li>Vue 2.6.0</li><li>Vue 2.7.0 - 新增 Composition API；</li><li>Vue 2.7.1 - 修正 bug；</li><li>Vue 3.0.0 - alpha - 新版本 Vue 的第一个预览版、与以前版本 API 不兼容；</li><li>Vue 3.0.0 - alpha.2 - 第二个预览版；</li><li>Vue 3.0.0 - beta - 测试版、也叫公开测试版；</li><li>Vue 3.0.3 - RC - Release Condidate 已经具备正式上线条件的版本，也叫做上线候选版；</li><li>Vue 3.0.0 - GA - General Availability 正式发布的版本；</li><li>Vue 3.0.1 - 修正 bug。</li></ul><p>大家看一下这样是不是就非常的清晰。</p><p>了解了语义化版本的知识，下面我们就可以按照社区通行的规则发布自己的版本了。</p><h3 id="修改-package-版本信息" tabindex="-1">修改 Package 版本信息 <a class="header-anchor" href="#修改-package-版本信息" aria-label="Permalink to &quot;修改 Package 版本信息&quot;">​</a></h3><p>发布一个版本首先要做的就是修改 package.json 上的版本信息。对于 npm 软件包管理器来讲， package 上的版本号就是唯一的版本标识。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01454027cdc44b52b63921874e376274~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h3 id="设置-git-版本库标签" tabindex="-1">设置 Git 版本库标签 <a class="header-anchor" href="#设置-git-版本库标签" aria-label="Permalink to &quot;设置 Git 版本库标签&quot;">​</a></h3><p>Tag 是 git 版本库的一个标记， 指向某个 commit 的指针。</p><p>在发布版本的时候，应该给 git 打上一个 v.0.1.0 这样的版本标记 。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 创建版本号对应的 git tag</span></span>
<span class="line"><span>git tag 0.1.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将新的 git tag 推送到 github 上面</span></span>
<span class="line"><span>git push --tag</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a11d32094c243838447d7964f3fe090~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>推送版本到 Github ，就可以在 Git 上面看到一个版本标记，而且可以提供此版本的 zip 打包下载。实际上这个也可以作为一种软件分发方式，只不过相对于使用 npm 包管理器，没有提供自动依赖安装。</p><h3 id="利用action-实现自动发布" tabindex="-1">利用Action 实现自动发布 <a class="header-anchor" href="#利用action-实现自动发布" aria-label="Permalink to &quot;利用Action 实现自动发布&quot;">​</a></h3><p>下面就是发布的重头戏，推送软件包到 Npm 仓库了。</p><p>传统的做法是使用命令实现。在项目的根目录下，运行 npm publish 就可以实现。</p><p>还有一种方法就是利用 CI 工具实现，实际上这个过程叫做 CD 持续交付，对于组件库来讲，最终的交付就是推送到版本仓库中。</p><p>推送仓库的触发条件，肯定不是每次 push， 而是在有新的版本发布时，发布新版的动作可以通过判断 publish 提交的方法判定。具体做法为，首先单独划分一个 publish 分支，当发布版本时，就建立一个 pull request 到 publish 分支，当在 github 上 merge 分支时就触发发布流程。</p><p>首先，先划分 publish 分支。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b publish-smarty-ui-vite</span></span>
<span class="line"><span>git push --set-upstream origin publish-smarty-ui-vite</span></span></code></pre></div><p>根据目前的npm规则，首次发布比较严格，需要识别验证码。所以需要在本地发布。 在项目根目录下建立一个 publish.sh 文件。 这个 Shell 脚本的功能包括</p><ul><li>切换镜像仓库 （主要是由于国内默认是 taobao这种第三方仓库、需要切换到原始库）</li><li>认证</li><li>发布</li><li>还原Taobao镜像仓库</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 检查仓库镜像库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry=http://registry.npmjs.org</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;请进行登录相关操作：&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 登陆</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-------publishing-------&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 发布</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry=https://registry.npm.taobao.org</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置为淘宝镜像</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;发布完成&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span></code></pre></div><p>使用命令行工具执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./publish.sh</span></span></code></pre></div><p>执行过程中会收到带有验证码的邮件需要填写到界面里面</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0b67ccbdc104947994e462fc09cec46~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>首次发布后，其余更新就可以使用 CI 工具自动完成了。</p><p>编写一个 Action 脚本用于自动打包，并推送新的软件包到 npm。</p><p>Action 的方法和前面讲的持续集成类似，只是发布动作，可以使用一个现成的 publish 插件完成。</p><p><a href="https://github.com/primer/publish" target="_blank" rel="noreferrer">https://github.com/primer/publish</a></p><p>在需要提交 npm 库时需要认证，我们通过向 npm 申请 token 完成。</p><p>首先，在 npm 中的账户信息中生成一个新的 Token。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef56e50ae7441dd876b6f4aca78f591~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>这个 Token 相当于随意操作你自己 npm 库的授权，提交的时候需要用到。但是又不能放在 Action 代码中，因为代码是公开的，一旦公开了 Token，相当于任何人都可以操作你的 npm 库，解决的办法就是使用 Action Secret 功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8952b4f9e8aa4bb3b368f30f48ecf48f~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>Action Secret 相当于建立了一个不公开的环境变量。只有项目的所有者可以设定，其他人则看不到。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31f2c30bb15549738308b1314cdb68da~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9633373425f46e5847de7ebee1fa54d~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>设置后就可以在 Action 脚本中使用了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name: Publish Smarty-ui-vite To Npm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches: [publish-smarty-ui-vite]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  publish:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    name: &quot;publish npm&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    environment: npm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - uses: actions/checkout@master</span></span>
<span class="line"><span>      - uses: pnpm/action-setup@v2.1.0</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          version: 6.31.0</span></span>
<span class="line"><span>      - name: Install modules</span></span>
<span class="line"><span>        run: pnpm install</span></span>
<span class="line"><span>      - name: Build</span></span>
<span class="line"><span>        run: cd packages/smarty-ui-vite &amp;&amp; npm run build</span></span>
<span class="line"><span>      - name: &quot;Publish to the npm registry&quot;</span></span>
<span class="line"><span>        uses: primer/publish@3.0.0</span></span>
<span class="line"><span>        env:</span></span>
<span class="line"><span>          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span>          NPM_AUTH_TOKEN: \${{ secrets.NPM_AUTH_TOKEN }} # 跟前面步骤中的 NPM_AUTH_TOKEN 保持一致</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          default_branch: &quot;publish&quot;</span></span>
<span class="line"><span>          dir: &quot;packages/smarty-ui-vite&quot;</span></span></code></pre></div><p>提交代码到 github，并创建一个 Pull Request。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecefb0aef37749dd996d97d790253c8a~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p>合并后会自动触发发布到 Npm。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/423a969e69d648fea667f5f74ef9e620~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2bfd4ee44944ca49b44b980c9dca3af~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db4f8b3d510b4cdc82dd359e89228f25~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><h2 id="复盘" tabindex="-1">复盘 <a class="header-anchor" href="#复盘" aria-label="Permalink to &quot;复盘&quot;">​</a></h2><p>这节课的主要内容是对组件库进行版本发布，其中包括了语义化标签的定义、Git版本 Tag 标签、Publish分支、持续交付脚本的设置。</p><p>最后留一些思考题帮助大家复习，也欢迎在留言区讨论。</p><ul><li>语义化标签的优点是什么 ？</li><li>Git 的 Tag 标签的作用 ？</li><li>如何利用 Github Action 实现持续交付 ？</li></ul><p>下节课，我们将给大家讲解如何用Monorepo风格管理组件库生态，下节课见。</p>`,71),l=[e];function t(h,c,o,r,u,k){return p(),a("div",null,l)}const d=s(n,[["render",t]]);export{m as __pageData,d as default};
