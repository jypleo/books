import{_ as e,c,o,a2 as a}from"./chunks/framework.D8Prfz4N.js";const m=JSON.parse('{"title":"1.准备篇：学前准备","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/玩转css艺术之美/1.准备篇：学前准备.md","filePath":"pamphlet/玩转css艺术之美/1.准备篇：学前准备.md"}'),r={name:"pamphlet/玩转css艺术之美/1.准备篇：学前准备.md"},t=a('<h1 id="_1-准备篇-学前准备" tabindex="-1">1.准备篇：学前准备 <a class="header-anchor" href="#_1-准备篇-学前准备" aria-label="Permalink to &quot;1.准备篇：学前准备&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Hello，我是<strong>JowayYoung</strong>。首次写书，希望能给各位同学带来惊喜，能让各位同学爱上CSS。</p><p>本小册分为<code>准备篇</code>、<code>基础篇</code>、<code>进阶篇</code>、<code>技巧篇</code>、<code>实战篇</code>、<code>总结篇</code>六大块总共<code>16章</code>，从0到1拥有一个完整的CSS知识体系，外加玩转<strong>CSS神操作骚技巧</strong>。本小册主要以<strong>开发技巧</strong>作为驱动点，让CSS创造出更多意想不到的事情，通过<strong>概念、技巧、场景三合一</strong>的方式实现一些看似只能由JS才能实现的效果。</p><p>本小册以<strong>CSS神操作骚技巧</strong>作为核心内容，集齐CSS的<code>基础+原理+进阶+技巧+实战</code>，希望通过多种方式强化各位同学对<strong>CSS知识体系</strong>和<strong>CSS神操作骚技巧</strong>的吸收，帮助各位同学得心应手玩转CSS。</p><h3 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h3><p>何为技巧，意指表现在文学、工艺、体育等方面的巧妙技能。代码作为一门现代高级工艺，推动着人类科学技术的发展，同时犹如文字一样承托着人类文化的进步。</p><p>每写好一篇文章，都会使用大量的写作技巧。<code>烘托、渲染、悬念、铺垫、照应、伏笔、联想、想象、抑扬结合、点面结合、动静结合、叙议结合、情景交融、首尾呼应、衬托对比、白描细描、比喻象征、借古讽今、卒章显志、承上启下、开门见山、动静相衬、虚实相生、实写虚写、托物寓意、咏物抒情</code>等，这些应该都是我们从小到大写文章而接触到的写作技巧。</p><p>作为程序猿的我们，编码同样也需大量的写作技巧。一份良好的代码能让人耳目一新，让人容易理解，让人舒服自然，同时也让自己成就感满满(哈哈，这个才是重点)。</p><p>本小册以<strong>CSS神操作骚技巧</strong>作为核心内容，通过多个章节剖析CSS的艺术之美。很多同学都觉得CSS简单，但是简单也能玩出很多新花样。</p><p>相信喜欢CSS的同学应该都看过笔者在2019年发表的<a href="https://juejin.im/post/5d4d0ec651882549594e7293" target="_blank" rel="noreferrer">《灵活运用CSS开发技巧》</a>一文，到目前为止在掘金社区里有<code>4000+</code>点赞量和<code>12万+</code>阅读量，让笔者也相信其实还是有很多同学对<strong>CSS神操作骚技巧</strong>很感兴趣的，本小册就带领各位同学从0到1玩转CSS。</p><p>若还没看过<a href="https://juejin.im/post/5d4d0ec651882549594e7293" target="_blank" rel="noreferrer">《灵活运用CSS开发技巧》</a>一文，可先来预览一些纯CSS实现一些看似只能由JS才能实现的效果。</p><p>结构类：通过结构选择器、Flex布局方式、对齐方式等方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320215714-845113ac-a6ab-45f8-9a15-85216ff80fd9.png" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320215645-6bf04d82-1c6b-45ea-a47b-7269c4cb5d04.png" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215742-27c2f2cb-6619-4db7-bbdc-53da7d033d9f.gif" alt="img"></p><p>背景类：通过多重背景、渐变背景、遮罩等方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215687-b81e52d9-b599-4b84-b7d8-1eeae2efede8.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215801-f1b5d654-17f4-4cb8-a2c6-058eade77e2e.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320215826-018d5371-7bab-4297-8d1b-cbb692d014a4.png" alt="img"></p><p>点击类：通过状态选择器结合层次选择器的方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215820-dc44a55c-e5af-4ca0-867c-734612d063dc.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215648-5f93da99-a442-46fa-ac9b-ad48a1ae32a3.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215674-40aa3f33-a6c1-48ee-b3b6-7d903a958115.gif" alt="img"></p><p>悬浮类：通过行为选择器结合层次选择器的方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215793-61fc795b-6240-477e-b519-37f0c42537f8.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215759-304adba2-f4bc-46dc-a0e6-2a233f64c593.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215921-1d98441b-8f8e-4792-a166-bd8e749592cf.gif" alt="img"></p><p>切换类：通过状态选择器结合层次选择器的方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215934-ecc249a6-88be-4670-b938-4319c3f0ef68.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320215766-28313a88-4a65-460c-97cf-6f63d4ef5cb5.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320216221-6aae7cca-615a-41ed-b3b9-db6030e263b1.gif" alt="img"></p><p>表单类：通过状态选择器互相结合的方式实现</p><p><img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320216155-cc87c635-e588-4b12-ba39-8cd37d7c29f6.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320216148-25685324-2eb6-4d95-a8b0-409bda7146b4.gif" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2020/gif/2985494/1607320216288-c851cc1e-67ea-4751-8e89-56505eb68b53.gif" alt="img"></p><p>上述纯CSS效果都是基于笔者很熟悉大部分CSS开发技巧的情况下实现的，所以在最后的实战篇也为各位同学准备三个实战大操作，通过本小册学习到的全部CSS开发技巧实行一次糅合和整体应用。相信各位同学在日后的项目中也能用CSS大展身手。</p><h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h3><p>在进入学习前，先部署相关开发环境。其实对于CSS开发环境的部署还是挺简单的，<code>一个浏览器一个编辑器</code>即可。当然这样的部署也只能应付一些比较简单的Demo，项目级别的开发过程还是需结合Webpack进行的。</p><p>以下就一步一步部署CSS开发环境。万事开头都要有准备，不要觉得一切简单而去忽略。细节从我做起，笔者的座右铭<a href="https://yangzw.vip/" target="_blank" rel="noreferrer">认真做好每一份细节，用心写好每一段代码</a>，让笔者对细节把握更好。</p><ul><li><p><strong>浏览器</strong>：<a href="https://www.google.cn/intl/zh-CN/chrome" target="_blank" rel="noreferrer">Chrome 60+</a>，笔者选择版本为<code>85</code></p></li><li><p><strong>编辑器</strong>：<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VSCode 1+</a>，笔者选择版本为<code>1.48.0</code></p></li><li><p><strong>运行环境</strong>：<a href="https://nodejs.org/en/download/releases" target="_blank" rel="noreferrer">Node 12+</a>，笔者选择版本为<code>12.18.0</code></p></li></ul><p>首先安装<code>Chrome</code>，对于CSS开发环境的要求其实并不高，随便即可，但是为了保证一些CSS3和CSS4可在浏览器中正常使用，还是建议选择<strong>高版本Chrome</strong>，这样体验效果会更佳。注意，<code>不要使用IExplorer</code>，众所周知，其CSS兼容性比较差，即使现在已到2020年，还是有部分CSS3无法在<code>IExplorer</code>上正常使用，更何况是CSS4了。</p><p>然后安装<code>VSCode</code>，安装完成后配置<code>VSCode</code>。因为本小册是一本几乎纯讲CSS的书，所以先安装几个CSS插件。在后续开发过程中，笔者会详细讲解这些插件如何配置和使用，所以麻烦各位同学提前安装上。</p><p>点击红框的<code>插件按钮</code>，在蓝框的<code>搜索栏</code>里输入以下插件名称，点击安装即可。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320216199-a34a64f2-8d9f-4ca5-aadf-752534a02972.png" alt="img"></p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-caniuse" target="_blank" rel="noreferrer">Caniuse</a>：查看CSS兼容性</li><li><a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-csscomb" target="_blank" rel="noreferrer">CSScomb</a>：排序CSS属性</li></ul><p>最后安装<code>Node</code>，安装完成后需搭建项目的Webpack构建环境。为了简化这些流程，笔者曾经开源过一个零配置开箱即用的<code>React/Vue</code>应用自动化构建脚手架<strong>bruce-cli</strong>，可认为是一个<code>Webpack Plus</code>(增强版)，它可做到完全分离构建代码和业务代码，让前端开发者只需专注于业务代码的编写。</p><p>打开CMD，执行<code>npm i -g bruce-cli</code>安装<strong>bruce-cli</strong>，若安装不上，请按照以下步骤执行。</p><ul><li><p>切换<strong>NPM镜像</strong>为淘宝镜像：<code>npm config set registry https://registry.npm.taobao.org/</code></p></li><li><p>切换<strong>Node镜像</strong>为淘宝镜像：<code>npm config set disturl https://npm.taobao.org/mirrors/node/</code></p></li><li><p>重新执行安装命令：<code>npm i -g bruce-cli</code></p></li></ul><p>若对<strong>bruce-cli</strong>感兴趣，请戳<a href="https://github.com/JowayYoung/bruce-cli" target="_blank" rel="noreferrer">这里</a>查看详情，喜欢的可给笔者一个Star作为鼓励吗？</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320216273-c60bd115-358b-4a59-bc15-0bc468611b9a.png" alt="img"></p><p>若各位同学可自行搭建项目的Webpack构建环境也是一个不错的选择，那可选择使用你搭建的构建代码运行本小册的项目。在此笔者就不啰嗦如何搭建Webpack配置了，相信各位同学都是一位厉害的Webpack配置工程师了。</p><p>当然笔者还是建议各位同学使用<strong>bruce-cli</strong>体验构建代码和业务代码完全分离的快感。若懒得搭建，使用<code>@vue/cli</code>也行。</p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>安装完<strong>bruce-cli</strong>后，请跟随笔者一起创建本小册项目。</p><ul><li><p>执行<code>bruce -v</code>查看<code>bruce-cli</code>的版本，笔者使用的版本都是<code>最新版本</code></p></li><li><p>若你是港澳台的同学，可执行<code>bruce l</code>选择面板语言并切换到繁体中文，另外还提供英文切换</p></li><li><p>找一个用来存储本小册项目的位置，例如桌面，执行<code>bruce i</code>，按照以下选择即可创建一个完整的项目目录，本项目选择<code>vue</code>作为开发框架，选择<code>scss</code>作为样式预处理 <img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320216256-d8e526b3-b866-4b8d-a804-ad66e574d95f.png" alt="img"></p></li><li><p>执行<code>cd icss</code>进入本项目</p></li><li><p>执行<code>bruce b</code>，按照以下选择即可构建本项目，构建环境记得选择<code>开发环境</code>，为了让代码规范化还得选择校验CSS和JS <img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320216234-02cd87bf-740a-44b3-8ca0-adab3a0e49b0.png" alt="img"></p></li><li><p>为了形成默契，后续每讲解一个案例，都执行<code>bruce n</code>创建一个组件，笔者也不再啰嗦提醒你们创建组件了，创建完成后打开<code>vue文件</code>，<code>&lt;template&gt;</code>用来记录<code>HTML代码</code>，<code>&lt;style lang=&quot;scss&quot;&gt;</code>用来记录<code>CSS/SCSS代码</code></p></li></ul><p>到此为止，本小册所有的学前准备都搞掂了，接下来即可愉快地进入学习状态了。</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bruce-cli默认安装最新版本的vue，若安装的版本是3.x，请把版本降级到2.x</span></span></code></pre></div><h3 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h3><p>玩转CSS的要诀在于<strong>能使用CSS实现的效果都优先使用CSS</strong>，各位同学在学完本小册后也许就会明白CSS的奥义在哪里了。</p><p>在此分享一下笔者学习CSS的秘诀。</p><ul><li><p><strong>按照类型将CSS属性进行分类并记忆</strong></p></li><li><p><strong>按照功能将CSS选择器进行分类并记忆</strong></p></li><li><p><strong>将效果粒度化</strong>：将效果进行组件拆分，分析其细节是否能由纯CSS实现，由下往上分析并组装，若每个组件都能由纯CSS实现，那么大体就能由纯CSS实现</p></li><li><p><strong>放弃JS实现效果的固有化思维</strong>：当然有些效果确实不能由纯CSS实现，但是可先从简单的纯CSS实现效果入手，实在无法实现再改用JS完成</p></li><li><p><strong>多浏览设计类网站</strong>：前端不仅仅只编码，走近设计类网站能让你对产品和用户体验有更多的感悟和灵感</p></li></ul><p>听上去好像很笼统，但是各位同学不要着急，后面会一步一步解构这些秘诀。</p><h3 id="题外话" tabindex="-1">题外话 <a class="header-anchor" href="#题外话" aria-label="Permalink to &quot;题外话&quot;">​</a></h3><p>上述提到的<strong>bruce-cli</strong>是为了简化所有的项目初始化流程而开发出来的，它可承包<code>初始项目</code>、<code>构建项目</code>、<code>打包项目</code>和<code>发布项目</code>等项目开发流程，目前也还一直在完善和迭代中，真正实现了前端项目的构建代码和业务代码的完全分离。妥妥的<code>建筑承包商</code>，哈哈！</p><p>极简的项目目录结构让你很舒心地编写业务代码，完全不用去理会那些构建代码。通过<strong>bruce-cli</strong>创建出来的项目是不包含任何构建配置的(什么Postcss、Babel等配置通通都没有)，这些配置都是集成在<strong>bruce-cli</strong>里，可通过项目中的<code>brucerc.js</code>修改<strong>bruce-cli</strong>的默认配置。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2985494/1607320216270-c94f10e9-b86d-4832-baa9-5de74b1c5f8c.png" alt="img"></p><p>目前笔者负责的项目中有50多个项目是由<strong>bruce-cli</strong>构建，若对<strong>bruce-cli</strong>感兴趣，请戳<a href="https://github.com/JowayYoung/bruce-cli" target="_blank" rel="noreferrer">这里</a>查看详情，喜欢的可给笔者一个Star作为鼓励吗？若有任何疑问，欢迎添加笔者微信<code>YangzwVIP</code>与笔者详谈，感谢支持。</p><h3 id="传送门" tabindex="-1">传送门 <a class="header-anchor" href="#传送门" aria-label="Permalink to &quot;传送门&quot;">​</a></h3><p>为了统一小册内容与<code>在线演示</code>和<code>在线源码</code>的一致性，笔者将所有与代码相关的内容发布到以下位置，各位同学在学习小册的过程中请参照以下内容同步学习。</p><ul><li><p>在线预览：<a href="https://yangzw.vip/idea-css" target="_blank" rel="noreferrer">Here</a></p></li><li><p>在线演示：<a href="https://codepen.io/JowayYoung" target="_blank" rel="noreferrer">Here</a></p></li><li><p>在线源码：<a href="https://github.com/JowayYoung/idea-css" target="_blank" rel="noreferrer">Here</a></p></li></ul>',59),d=[t];function n(p,i,s,l,g,u){return o(),c("div",null,d)}const S=e(r,[["render",n]]);export{m as __pageData,S as default};
