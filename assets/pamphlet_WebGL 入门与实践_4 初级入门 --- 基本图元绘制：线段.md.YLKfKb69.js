import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.D8Prfz4N.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pamphlet/WebGL 入门与实践/4 初级入门 --- 基本图元绘制：线段.md","filePath":"pamphlet/WebGL 入门与实践/4 初级入门 --- 基本图元绘制：线段.md"}'),p={name:"pamphlet/WebGL 入门与实践/4 初级入门 --- 基本图元绘制：线段.md"},e=t(`<p>上节我们通过三角形的绘制方式，了解到 WebGL 开发的基本要素，以及如何通过缓冲区向着色器传递数据。本节我们学习最后一种基本图元<code>线段</code>。</p><p>本节内容虽然简单，但是我仍然想向那些钟爱 WebGL 的新手同学们详细地讲解一下，毕竟这是 WebGL 知识体系中的一部分，有经验的同学可以略过哈~</p><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>本节通过鼠标点击动态绘制线段的示例，学习线段图元的分类以及绘制特点，效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676ef8587bbdd52~tplv-t2oaga2asx-image.image" alt=""></p><ul><li><a href="http://ifanqi.top/webgl/pages/lesson5.html" target="_blank" rel="noreferrer">演示地址</a></li><li><a href="https://github.com/lucefer/webgl/blob/master/pages/lesson5.html" target="_blank" rel="noreferrer">源码地址</a></li></ul><h2 id="线段图元的分类" tabindex="-1">线段图元的分类 <a class="header-anchor" href="#线段图元的分类" aria-label="Permalink to &quot;线段图元的分类&quot;">​</a></h2><p>线段图元分为三种：</p><ul><li>LINES：基本线段。</li><li>LINE_STRIP：带状线段。</li><li>LINE_LOOP：环状线段。</li></ul><p>接下来我们还是以实战为主，练习线段图元的绘制，并介绍他们之间的区别。</p><h2 id="lines-图元" tabindex="-1">LINES 图元 <a class="header-anchor" href="#lines-图元" aria-label="Permalink to &quot;LINES 图元&quot;">​</a></h2><p>LINES 图元称为基本线段图元，绘制每一条线段都需要明确指定构成线段的两个端点。</p><p>我们还是通过每次点击产生一个点，并将点击位置坐标放进 positions 数组中。</p><blockquote><p>注意，我们的坐标还是相对于屏幕坐标系，顶点着色器中会将屏幕坐标系转换到裁剪坐标系，也就是坐标区间在[-1, 1]之间。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mouseup&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageX;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.pageY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    positions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    positions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bufferData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ARRAY_BUFFER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(positions),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DYNAMIC_DRAW</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>之后进行绘制，注意执行 drawArrays 时，图元参数应该设置为 gl.LINES。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LINES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676edc8253ea74e~tplv-t2oaga2asx-image.image" alt=""></p><p>可以看到，每次点击两次之后才能绘制一条新的线段，也就是说，采用 gl.LINES 进行绘制的话，必须制定两个端点坐标。</p><p>基本线段图元的绘制比较简单，我们看一下<code>带状线段</code>的绘制特点。</p><h3 id="line-strip" tabindex="-1">LINE_STRIP <a class="header-anchor" href="#line-strip" aria-label="Permalink to &quot;LINE_STRIP&quot;">​</a></h3><p><code>LINE_STRIP</code> 图元的绘制特点和 <code>LINES</code> 的有所区别，在绘制线段时，它会采用前一个顶点作为当前线段的起始端点。我们还是通过一个例子理解一下。</p><p>依然采用上面的代码，只不过这次在绘制时，将图元设置为 LINE_STRIP：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LINE_STRIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676ee17d48e6893~tplv-t2oaga2asx-image.image" alt=""></p><p>可以看到，除了第一条线段需要指定两个端点，之后每次点击一个新的点，都会自动绘制一条新线段，新线段的起点是上一个线段的终点。</p><p>LINE_STRIP 也比较简单，接下来看下环状线段<code>LINE_LOOP</code>的特点。</p><h3 id="line-loop" tabindex="-1">LINE_LOOP <a class="header-anchor" href="#line-loop" aria-label="Permalink to &quot;LINE_LOOP&quot;">​</a></h3><p>顾名思义，环状线段除了包含 LINE_STRIP 的绘制特性，还有一个特点就是将线段的终点和第一个线段的起点进行连接，形成一个线段闭环。</p><p>废话不多说，看下效果大家就明白了。</p><blockquote><p>注意，不要忘记将绘制图元更改为 <code>LINE_LOOP</code>。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LINE_LOOP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, positions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676eeb846ebcef3~tplv-t2oaga2asx-image.image" alt=""></p><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p>线段图元的绘制方式到此就结束了，比较简单。我们可以用线段做路线标注，也可以用它绘制一些线状图形，再加上一些动画做出有创意的效果。</p><blockquote><p>事实上，webgl 的知识是有限的，但是我们的创意是无限的，有的时候并不需要技术多牛逼，只要创意够好，简单的技术也能实现让人惊艳的效果。</p></blockquote><p>题外话：我一直觉得我的想象力是很差的，有时候还不如自己三岁的女儿。在做这个 demo 的时候，我女儿的一次胡乱点击，让我大吃一惊，她的绘制路径像极了一个五角星，我在此大致还原了一下她的点击路径：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/2/1676ef8587bbdd52~tplv-t2oaga2asx-image.image" alt=""></p><p>一个胖胖、扁扁的的五角星，PS：偷笑。</p><p>下一节进入本节的一个重点，我会通过绘制<code>渐变三角形</code>来带大家深入学习<code>顶点缓冲区</code>的使用，并解答第三章节的三个遗留问题。</p>`,40),l=[e];function n(h,k,r,E,d,g){return a(),i("div",null,l)}const y=s(p,[["render",n]]);export{c as __pageData,y as default};
